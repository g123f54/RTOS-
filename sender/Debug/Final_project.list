
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069b8  080069b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080069b8  080069b8  000169b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c0  080069c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f10  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f84  20012f84  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e1d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031d5  00000000  00000000  00037ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  0003b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001110  00000000  00000000  0003c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ffb  00000000  00000000  0003d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015043  00000000  00000000  000613db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfbad  00000000  00000000  0007641e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00155fcb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fec  00000000  00000000  00156020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068fc 	.word	0x080068fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080068fc 	.word	0x080068fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <joystick>:
		vTaskDelay(1000);
		i++;
	}
}

void joystick(void *pvParameters){
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t joy[2];
	char MonitorTset[4];
	memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2204      	movs	r2, #4
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fd8f 	bl	80060ac <memset>
	while(1)
	{

		HAL_ADC_Start_DMA(&hadc1, joy, 2);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2202      	movs	r2, #2
 8000594:	4619      	mov	r1, r3
 8000596:	48a8      	ldr	r0, [pc, #672]	; (8000838 <joystick+0x2c0>)
 8000598:	f000 fe7c 	bl	8001294 <HAL_ADC_Start_DMA>
		if (joy[1]>=4000)  //up
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005a2:	d321      	bcc.n	80005e8 <joystick+0x70>
		{
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005aa:	48a4      	ldr	r0, [pc, #656]	; (800083c <joystick+0x2c4>)
 80005ac:	f002 f846 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2204      	movs	r2, #4
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fd77 	bl	80060ac <memset>
			sprintf(MonitorTset,"a\r\n");
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	499f      	ldr	r1, [pc, #636]	; (8000840 <joystick+0x2c8>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f005 fd79 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	f107 010c 	add.w	r1, r7, #12
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	4898      	ldr	r0, [pc, #608]	; (8000844 <joystick+0x2cc>)
 80005e2:	f002 ffba 	bl	800355a <HAL_UART_Transmit>
 80005e6:	e005      	b.n	80005f4 <joystick+0x7c>
		}
		else
		{
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	4893      	ldr	r0, [pc, #588]	; (800083c <joystick+0x2c4>)
 80005f0:	f002 f824 	bl	800263c <HAL_GPIO_WritePin>
		}
		if (joy[1]<=800)  //down
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80005fa:	d821      	bhi.n	8000640 <joystick+0xc8>
		{
			HAL_GPIO_WritePin( GPIOD, Red_LED_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000602:	488e      	ldr	r0, [pc, #568]	; (800083c <joystick+0x2c4>)
 8000604:	f002 f81a 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2204      	movs	r2, #4
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f005 fd4b 	bl	80060ac <memset>
			sprintf(MonitorTset,"b\r\n");
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	498b      	ldr	r1, [pc, #556]	; (8000848 <joystick+0x2d0>)
 800061c:	4618      	mov	r0, r3
 800061e:	f005 fd4d 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 010c 	add.w	r1, r7, #12
 8000634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000638:	4882      	ldr	r0, [pc, #520]	; (8000844 <joystick+0x2cc>)
 800063a:	f002 ff8e 	bl	800355a <HAL_UART_Transmit>
 800063e:	e005      	b.n	800064c <joystick+0xd4>
		}
		else
		{
			HAL_GPIO_WritePin( GPIOD, Red_LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000646:	487d      	ldr	r0, [pc, #500]	; (800083c <joystick+0x2c4>)
 8000648:	f001 fff8 	bl	800263c <HAL_GPIO_WritePin>
		}
		if (joy[0]>=4000)  //right
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000652:	d321      	bcc.n	8000698 <joystick+0x120>
		{
			HAL_GPIO_WritePin( GPIOD, Orange_LED_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4878      	ldr	r0, [pc, #480]	; (800083c <joystick+0x2c4>)
 800065c:	f001 ffee 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2204      	movs	r2, #4
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fd1f 	bl	80060ac <memset>
			sprintf(MonitorTset,"c\r\n");
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4976      	ldr	r1, [pc, #472]	; (800084c <joystick+0x2d4>)
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fd21 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fda6 	bl	80001d0 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 010c 	add.w	r1, r7, #12
 800068c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000690:	486c      	ldr	r0, [pc, #432]	; (8000844 <joystick+0x2cc>)
 8000692:	f002 ff62 	bl	800355a <HAL_UART_Transmit>
 8000696:	e005      	b.n	80006a4 <joystick+0x12c>
		}
		else
		{
			HAL_GPIO_WritePin( GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069e:	4867      	ldr	r0, [pc, #412]	; (800083c <joystick+0x2c4>)
 80006a0:	f001 ffcc 	bl	800263c <HAL_GPIO_WritePin>
		}
		if (joy[0]<=800)  //left
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80006aa:	d821      	bhi.n	80006f0 <joystick+0x178>
		{
			HAL_GPIO_WritePin( GPIOD, Blue_LED_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b2:	4862      	ldr	r0, [pc, #392]	; (800083c <joystick+0x2c4>)
 80006b4:	f001 ffc2 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2204      	movs	r2, #4
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f005 fcf3 	bl	80060ac <memset>
			sprintf(MonitorTset,"d\r\n");
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4961      	ldr	r1, [pc, #388]	; (8000850 <joystick+0x2d8>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fcf5 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd7a 	bl	80001d0 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	4856      	ldr	r0, [pc, #344]	; (8000844 <joystick+0x2cc>)
 80006ea:	f002 ff36 	bl	800355a <HAL_UART_Transmit>
 80006ee:	e005      	b.n	80006fc <joystick+0x184>
		}
		else
		{
			HAL_GPIO_WritePin( GPIOD, Blue_LED_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	4851      	ldr	r0, [pc, #324]	; (800083c <joystick+0x2c4>)
 80006f8:	f001 ffa0 	bl	800263c <HAL_GPIO_WritePin>
		}
		if (HAL_GPIO_ReadPin( joystick_button_GPIO_Port, joystick_button_Pin))
 80006fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000700:	4854      	ldr	r0, [pc, #336]	; (8000854 <joystick+0x2dc>)
 8000702:	f001 ff83 	bl	800260c <HAL_GPIO_ReadPin>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d018      	beq.n	800073e <joystick+0x1c6>
		{
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	484a      	ldr	r0, [pc, #296]	; (800083c <joystick+0x2c4>)
 8000714:	f001 ff92 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Orange_LED_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	4847      	ldr	r0, [pc, #284]	; (800083c <joystick+0x2c4>)
 8000720:	f001 ff8c 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Red_LED_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	4844      	ldr	r0, [pc, #272]	; (800083c <joystick+0x2c4>)
 800072c:	f001 ff86 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Blue_LED_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000736:	4841      	ldr	r0, [pc, #260]	; (800083c <joystick+0x2c4>)
 8000738:	f001 ff80 	bl	800263c <HAL_GPIO_WritePin>
 800073c:	e03e      	b.n	80007bc <joystick+0x244>
		}
		else
		{
			vTaskDelay(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f004 f832 	bl	80047a8 <vTaskDelay>
			while(!(HAL_GPIO_ReadPin(joystick_button_GPIO_Port, joystick_button_Pin)))
 8000744:	bf00      	nop
 8000746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074a:	4842      	ldr	r0, [pc, #264]	; (8000854 <joystick+0x2dc>)
 800074c:	f001 ff5e 	bl	800260c <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0f7      	beq.n	8000746 <joystick+0x1ce>
			{
				;
			}
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075c:	4837      	ldr	r0, [pc, #220]	; (800083c <joystick+0x2c4>)
 800075e:	f001 ff6d 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Orange_LED_Pin, GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4834      	ldr	r0, [pc, #208]	; (800083c <joystick+0x2c4>)
 800076a:	f001 ff67 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Red_LED_Pin, GPIO_PIN_SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000774:	4831      	ldr	r0, [pc, #196]	; (800083c <joystick+0x2c4>)
 8000776:	f001 ff61 	bl	800263c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( GPIOD, Blue_LED_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000780:	482e      	ldr	r0, [pc, #184]	; (800083c <joystick+0x2c4>)
 8000782:	f001 ff5b 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2204      	movs	r2, #4
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fc8c 	bl	80060ac <memset>
			sprintf(MonitorTset,"e\r\n");
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	492f      	ldr	r1, [pc, #188]	; (8000858 <joystick+0x2e0>)
 800079a:	4618      	mov	r0, r3
 800079c:	f005 fc8e 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fd13 	bl	80001d0 <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f107 010c 	add.w	r1, r7, #12
 80007b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b6:	4823      	ldr	r0, [pc, #140]	; (8000844 <joystick+0x2cc>)
 80007b8:	f002 fecf 	bl	800355a <HAL_UART_Transmit>
		}
		if (HAL_GPIO_ReadPin( right_button_GPIO_Port, right_button_Pin))
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <joystick+0x2dc>)
 80007c2:	f001 ff23 	bl	800260c <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d02d      	beq.n	8000828 <joystick+0x2b0>
		{
			vTaskDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f003 ffeb 	bl	80047a8 <vTaskDelay>
			while(!(HAL_GPIO_ReadPin(right_button_GPIO_Port, right_button_Pin)))
 80007d2:	bf00      	nop
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <joystick+0x2dc>)
 80007da:	f001 ff17 	bl	800260c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f7      	beq.n	80007d4 <joystick+0x25c>
			{
				;
			}
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <joystick+0x2c4>)
 80007ec:	f001 ff26 	bl	800263c <HAL_GPIO_WritePin>
			memset(MonitorTset,'\0',sizeof(MonitorTset));
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2204      	movs	r2, #4
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f005 fc57 	bl	80060ac <memset>
			sprintf(MonitorTset,"f\r\n");
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4916      	ldr	r1, [pc, #88]	; (800085c <joystick+0x2e4>)
 8000804:	4618      	mov	r0, r3
 8000806:	f005 fc59 	bl	80060bc <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t *)MonitorTset,strlen(MonitorTset),0xffff);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fcde 	bl	80001d0 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	f107 010c 	add.w	r1, r7, #12
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <joystick+0x2cc>)
 8000822:	f002 fe9a 	bl	800355a <HAL_UART_Transmit>
 8000826:	e6b2      	b.n	800058e <joystick+0x16>
		}
		else
		{
			HAL_GPIO_WritePin( GPIOD, Green_LED_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <joystick+0x2c4>)
 8000830:	f001 ff04 	bl	800263c <HAL_GPIO_WritePin>
		HAL_ADC_Start_DMA(&hadc1, joy, 2);
 8000834:	e6ab      	b.n	800058e <joystick+0x16>
 8000836:	bf00      	nop
 8000838:	20012dfc 	.word	0x20012dfc
 800083c:	40020c00 	.word	0x40020c00
 8000840:	08006928 	.word	0x08006928
 8000844:	20012ea4 	.word	0x20012ea4
 8000848:	0800692c 	.word	0x0800692c
 800084c:	08006930 	.word	0x08006930
 8000850:	08006934 	.word	0x08006934
 8000854:	40021000 	.word	0x40021000
 8000858:	08006938 	.word	0x08006938
 800085c:	0800693c 	.word	0x0800693c

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fc8f 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f81b 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086e:	f000 f92d 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000872:	f000 f8e1 	bl	8000a38 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000876:	f000 f909 	bl	8000a8c <MX_DMA_Init>
  MX_ADC1_Init();
 800087a:	f000 f87d 	bl	8000978 <MX_ADC1_Init>

  //xTaskCreate(LED_Task,"led_task",128,NULL,1,NULL);

  //xTaskCreate(USART_Test,"USART_Test",128,NULL,1,NULL);

  xTaskCreate(joystick,"joystick",2048,NULL,1,NULL);
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2301      	movs	r3, #1
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2300      	movs	r3, #0
 8000888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088c:	4903      	ldr	r1, [pc, #12]	; (800089c <main+0x3c>)
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <main+0x40>)
 8000890:	f003 fe5a 	bl	8004548 <xTaskCreate>

  vTaskStartScheduler();
 8000894:	f003 ffbc 	bl	8004810 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x38>
 800089a:	bf00      	nop
 800089c:	08006940 	.word	0x08006940
 80008a0:	08000579 	.word	0x08000579

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2230      	movs	r2, #48	; 0x30
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 fbfa 	bl	80060ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SystemClock_Config+0xcc>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	4a27      	ldr	r2, [pc, #156]	; (8000970 <SystemClock_Config+0xcc>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	; 0x40
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <SystemClock_Config+0xd0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a21      	ldr	r2, [pc, #132]	; (8000974 <SystemClock_Config+0xd0>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000910:	2300      	movs	r3, #0
 8000912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000914:	230f      	movs	r3, #15
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000918:	2390      	movs	r3, #144	; 0x90
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000920:	2305      	movs	r3, #5
 8000922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fea1 	bl	8002670 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000934:	f000 fa46 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2302      	movs	r3, #2
 800093e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000944:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f002 f902 	bl	8002b60 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000962:	f000 fa2f 	bl	8000dc4 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3750      	adds	r7, #80	; 0x50
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_ADC1_Init+0xb4>)
 800098c:	4a28      	ldr	r2, [pc, #160]	; (8000a30 <MX_ADC1_Init+0xb8>)
 800098e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <MX_ADC1_Init+0xb4>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_ADC1_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800099c:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <MX_ADC1_Init+0xb4>)
 800099e:	2201      	movs	r2, #1
 80009a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a8:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <MX_ADC1_Init+0xbc>)
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009d8:	f000 fc18 	bl	800120c <HAL_ADC_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f9ef 	bl	8000dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009e6:	2308      	movs	r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	4619      	mov	r1, r3
 80009f6:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_ADC1_Init+0xb4>)
 80009f8:	f000 fd7a 	bl	80014f0 <HAL_ADC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a02:	f000 f9df 	bl	8000dc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a06:	2309      	movs	r3, #9
 8000a08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	463b      	mov	r3, r7
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_ADC1_Init+0xb4>)
 8000a14:	f000 fd6c 	bl	80014f0 <HAL_ADC_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a1e:	f000 f9d1 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20012dfc 	.word	0x20012dfc
 8000a30:	40012000 	.word	0x40012000
 8000a34:	0f000001 	.word	0x0f000001

08000a38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART2_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f002 fd26 	bl	80034c0 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f9a3 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20012ea4 	.word	0x20012ea4
 8000a88:	40004400 	.word	0x40004400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_DMA_Init+0x3c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <MX_DMA_Init+0x3c>)
 8000a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_DMA_Init+0x3c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2038      	movs	r0, #56	; 0x38
 8000ab4:	f001 f874 	bl	8001ba0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab8:	2038      	movs	r0, #56	; 0x38
 8000aba:	f001 f88d 	bl	8001bd8 <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	4ba8      	ldr	r3, [pc, #672]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4aa7      	ldr	r2, [pc, #668]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4ba5      	ldr	r3, [pc, #660]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	4ba1      	ldr	r3, [pc, #644]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4aa0      	ldr	r2, [pc, #640]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b9e      	ldr	r3, [pc, #632]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b9a      	ldr	r3, [pc, #616]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a99      	ldr	r2, [pc, #612]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b97      	ldr	r3, [pc, #604]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b93      	ldr	r3, [pc, #588]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a92      	ldr	r2, [pc, #584]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b90      	ldr	r3, [pc, #576]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b8c      	ldr	r3, [pc, #560]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a8b      	ldr	r2, [pc, #556]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b85      	ldr	r3, [pc, #532]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a84      	ldr	r2, [pc, #528]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <MX_GPIO_Init+0x2bc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	487f      	ldr	r0, [pc, #508]	; (8000d8c <MX_GPIO_Init+0x2c0>)
 8000b90:	f001 fd54 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	487d      	ldr	r0, [pc, #500]	; (8000d90 <MX_GPIO_Init+0x2c4>)
 8000b9a:	f001 fd4f 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ba4:	487b      	ldr	r0, [pc, #492]	; (8000d94 <MX_GPIO_Init+0x2c8>)
 8000ba6:	f001 fd49 	bl	800263c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000baa:	2308      	movs	r3, #8
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4872      	ldr	r0, [pc, #456]	; (8000d8c <MX_GPIO_Init+0x2c0>)
 8000bc2:	f001 fb87 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	486c      	ldr	r0, [pc, #432]	; (8000d90 <MX_GPIO_Init+0x2c4>)
 8000bde:	f001 fb79 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000be2:	2308      	movs	r3, #8
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4864      	ldr	r0, [pc, #400]	; (8000d90 <MX_GPIO_Init+0x2c4>)
 8000bfe:	f001 fb69 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4860      	ldr	r0, [pc, #384]	; (8000d98 <MX_GPIO_Init+0x2cc>)
 8000c18:	f001 fb5c 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 031c 	add.w	r3, r7, #28
 8000c34:	4619      	mov	r1, r3
 8000c36:	4858      	ldr	r0, [pc, #352]	; (8000d98 <MX_GPIO_Init+0x2cc>)
 8000c38:	f001 fb4c 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3c:	23e0      	movs	r3, #224	; 0xe0
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4c:	2305      	movs	r3, #5
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4850      	ldr	r0, [pc, #320]	; (8000d98 <MX_GPIO_Init+0x2cc>)
 8000c58:	f001 fb3c 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	484b      	ldr	r0, [pc, #300]	; (8000d9c <MX_GPIO_Init+0x2d0>)
 8000c70:	f001 fb30 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : joystick_button_Pin right_button_Pin */
  GPIO_InitStruct.Pin = joystick_button_Pin|right_button_Pin;
 8000c74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4840      	ldr	r0, [pc, #256]	; (8000d8c <MX_GPIO_Init+0x2c0>)
 8000c8a:	f001 fb23 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	483c      	ldr	r0, [pc, #240]	; (8000d9c <MX_GPIO_Init+0x2d0>)
 8000cac:	f001 fb12 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000cb0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cb4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4832      	ldr	r0, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x2c8>)
 8000cca:	f001 fb03 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ce0:	2306      	movs	r3, #6
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <MX_GPIO_Init+0x2c4>)
 8000cec:	f001 faf2 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4824      	ldr	r0, [pc, #144]	; (8000d98 <MX_GPIO_Init+0x2cc>)
 8000d06:	f001 fae5 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000d0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	481c      	ldr	r0, [pc, #112]	; (8000d98 <MX_GPIO_Init+0x2cc>)
 8000d28:	f001 fad4 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_GPIO_Init+0x2c8>)
 8000d40:	f001 fac8 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d44:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d56:	2304      	movs	r3, #4
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480e      	ldr	r0, [pc, #56]	; (8000d9c <MX_GPIO_Init+0x2d0>)
 8000d62:	f001 fab7 	bl	80022d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_GPIO_Init+0x2c0>)
 8000d7c:	f001 faaa 	bl	80022d4 <HAL_GPIO_Init>

}
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 fa0b 	bl	80011cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ef8 <HAL_ADC_MspInit+0xd8>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d156      	bne.n	8000ef0 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <HAL_ADC_MspInit+0xdc>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481c      	ldr	r0, [pc, #112]	; (8000f00 <HAL_ADC_MspInit+0xe0>)
 8000e8e:	f001 fa21 	bl	80022d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <HAL_ADC_MspInit+0xe8>)
 8000e96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ebc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ed4:	480b      	ldr	r0, [pc, #44]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ed6:	f000 fe8d 	bl	8001bf4 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ee0:	f7ff ff70 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8000eea:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_ADC_MspInit+0xe4>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	20012e44 	.word	0x20012e44
 8000f08:	40026410 	.word	0x40026410

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x84>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12b      	bne.n	8000f86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_UART_MspInit+0x88>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f66:	230c      	movs	r3, #12
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f76:	2307      	movs	r3, #7
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <HAL_UART_MspInit+0x8c>)
 8000f82:	f001 f9a7 	bl	80022d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2036      	movs	r0, #54	; 0x36
 8000fb2:	f000 fdf5 	bl	8001ba0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb6:	2036      	movs	r0, #54	; 0x36
 8000fb8:	f000 fe0e 	bl	8001bd8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_InitTick+0xa4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <HAL_InitTick+0xa4>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_InitTick+0xa4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f003 0310 	and.w	r3, r3, #16
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fd8:	f107 0210 	add.w	r2, r7, #16
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 ff8c 	bl	8002f00 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fe8:	f001 ff62 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8000fec:	4603      	mov	r3, r0
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	4a13      	ldr	r2, [pc, #76]	; (8001044 <HAL_InitTick+0xa8>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	0c9b      	lsrs	r3, r3, #18
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_InitTick+0xac>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <HAL_InitTick+0xb0>)
 8001004:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_InitTick+0xac>)
 8001008:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_InitTick+0xac>)
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_InitTick+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_InitTick+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <HAL_InitTick+0xac>)
 8001022:	f001 ff9f 	bl	8002f64 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d104      	bne.n	8001036 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800102c:	4806      	ldr	r0, [pc, #24]	; (8001048 <HAL_InitTick+0xac>)
 800102e:	f001 fff3 	bl	8003018 <HAL_TIM_Base_Start_IT>
 8001032:	4603      	mov	r3, r0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40023800 	.word	0x40023800
 8001044:	431bde83 	.word	0x431bde83
 8001048:	20012ee8 	.word	0x20012ee8
 800104c:	40001000 	.word	0x40001000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <TIM6_DAC_IRQHandler+0x10>)
 8001082:	f002 f839 	bl	80030f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20012ee8 	.word	0x20012ee8

08001090 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001096:	f000 feb3 	bl	8001e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20012e44 	.word	0x20012e44

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f004 ffb2 	bl	800603c <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000090 	.word	0x20000090
 800110c:	20012f88 	.word	0x20012f88

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800116c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800113a:	490e      	ldr	r1, [pc, #56]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800113c:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001150:	4c0b      	ldr	r4, [pc, #44]	; (8001180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115e:	f7ff ffd7 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001162:	f004 ff71 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fb7b 	bl	8000860 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001178:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 800117c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001180:	20012f84 	.word	0x20012f84

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 fcea 	bl	8001b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f7ff fef0 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe08 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20012f30 	.word	0x20012f30

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20012f30 	.word	0x20012f30

0800120c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e033      	b.n	800128a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fdf8 	bl	8000e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa68 	bl	8001734 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x1e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0e9      	b.n	8001486 <HAL_ADC_Start_DMA+0x1f2>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d018      	beq.n	80012fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b6d      	ldr	r3, [pc, #436]	; (8001490 <HAL_ADC_Start_DMA+0x1fc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a6d      	ldr	r2, [pc, #436]	; (8001494 <HAL_ADC_Start_DMA+0x200>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001308:	d107      	bne.n	800131a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001318:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b01      	cmp	r3, #1
 8001326:	f040 80a1 	bne.w	800146c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001368:	d106      	bne.n	8001378 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f023 0206 	bic.w	r2, r3, #6
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
 8001376:	e002      	b.n	800137e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <HAL_ADC_Start_DMA+0x204>)
 8001388:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138e:	4a43      	ldr	r2, [pc, #268]	; (800149c <HAL_ADC_Start_DMA+0x208>)
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <HAL_ADC_Start_DMA+0x20c>)
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <HAL_ADC_Start_DMA+0x210>)
 80013a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80013ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	334c      	adds	r3, #76	; 0x4c
 80013d6:	4619      	mov	r1, r3
 80013d8:	68ba      	ldr	r2, [r7, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f000 fcb8 	bl	8001d50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d12a      	bne.n	8001442 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2d      	ldr	r2, [pc, #180]	; (80014a8 <HAL_ADC_Start_DMA+0x214>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d015      	beq.n	8001422 <HAL_ADC_Start_DMA+0x18e>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a2c      	ldr	r2, [pc, #176]	; (80014ac <HAL_ADC_Start_DMA+0x218>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d105      	bne.n	800140c <HAL_ADC_Start_DMA+0x178>
 8001400:	4b25      	ldr	r3, [pc, #148]	; (8001498 <HAL_ADC_Start_DMA+0x204>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a27      	ldr	r2, [pc, #156]	; (80014b0 <HAL_ADC_Start_DMA+0x21c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d136      	bne.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_ADC_Start_DMA+0x204>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	2b00      	cmp	r3, #0
 8001420:	d130      	bne.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d129      	bne.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e020      	b.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <HAL_ADC_Start_DMA+0x214>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d11b      	bne.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d114      	bne.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	e00b      	b.n	8001484 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	f043 0210 	orr.w	r2, r3, #16
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000000 	.word	0x20000000
 8001494:	431bde83 	.word	0x431bde83
 8001498:	40012300 	.word	0x40012300
 800149c:	0800192d 	.word	0x0800192d
 80014a0:	080019e7 	.word	0x080019e7
 80014a4:	08001a03 	.word	0x08001a03
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40012100 	.word	0x40012100
 80014b0:	40012200 	.word	0x40012200

080014b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_ADC_ConfigChannel+0x1c>
 8001508:	2302      	movs	r3, #2
 800150a:	e105      	b.n	8001718 <HAL_ADC_ConfigChannel+0x228>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d925      	bls.n	8001568 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68d9      	ldr	r1, [r3, #12]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	3b1e      	subs	r3, #30
 8001532:	2207      	movs	r2, #7
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43da      	mvns	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	400a      	ands	r2, r1
 8001540:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68d9      	ldr	r1, [r3, #12]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	4603      	mov	r3, r0
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4403      	add	r3, r0
 800155a:	3b1e      	subs	r3, #30
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	e022      	b.n	80015ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6919      	ldr	r1, [r3, #16]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	2207      	movs	r2, #7
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6919      	ldr	r1, [r3, #16]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	4603      	mov	r3, r0
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4403      	add	r3, r0
 80015a4:	409a      	lsls	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d824      	bhi.n	8001600 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b05      	subs	r3, #5
 80015c8:	221f      	movs	r2, #31
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	400a      	ands	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b05      	subs	r3, #5
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
 80015fe:	e04c      	b.n	800169a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d824      	bhi.n	8001652 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	3b23      	subs	r3, #35	; 0x23
 800161a:	221f      	movs	r2, #31
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43da      	mvns	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	400a      	ands	r2, r1
 8001628:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	3b23      	subs	r3, #35	; 0x23
 8001644:	fa00 f203 	lsl.w	r2, r0, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
 8001650:	e023      	b.n	800169a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	3b41      	subs	r3, #65	; 0x41
 8001664:	221f      	movs	r2, #31
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	400a      	ands	r2, r1
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	3b41      	subs	r3, #65	; 0x41
 800168e:	fa00 f203 	lsl.w	r2, r0, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_ADC_ConfigChannel+0x234>)
 800169c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	; (8001728 <HAL_ADC_ConfigChannel+0x238>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d109      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1cc>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b12      	cmp	r3, #18
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a19      	ldr	r2, [pc, #100]	; (8001728 <HAL_ADC_ConfigChannel+0x238>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d123      	bne.n	800170e <HAL_ADC_ConfigChannel+0x21e>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d003      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x1e6>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b11      	cmp	r3, #17
 80016d4:	d11b      	bne.n	800170e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d111      	bne.n	800170e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_ADC_ConfigChannel+0x23c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a10      	ldr	r2, [pc, #64]	; (8001730 <HAL_ADC_ConfigChannel+0x240>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	0c9a      	lsrs	r2, r3, #18
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40012300 	.word	0x40012300
 8001728:	40012000 	.word	0x40012000
 800172c:	20000000 	.word	0x20000000
 8001730:	431bde83 	.word	0x431bde83

08001734 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800173c:	4b79      	ldr	r3, [pc, #484]	; (8001924 <ADC_Init+0x1f0>)
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	021a      	lsls	r2, r3, #8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6899      	ldr	r1, [r3, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <ADC_Init+0x1f4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d022      	beq.n	8001812 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	e00f      	b.n	8001832 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001830:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0202 	bic.w	r2, r2, #2
 8001840:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6899      	ldr	r1, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7e1b      	ldrb	r3, [r3, #24]
 800184c:	005a      	lsls	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800187e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	3b01      	subs	r3, #1
 800188c:	035a      	lsls	r2, r3, #13
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e007      	b.n	80018a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	051a      	lsls	r2, r3, #20
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ea:	025a      	lsls	r2, r3, #9
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6899      	ldr	r1, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	029a      	lsls	r2, r3, #10
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	0f000001 	.word	0x0f000001

0800192c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001938:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001942:	2b00      	cmp	r3, #0
 8001944:	d13c      	bne.n	80019c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d12b      	bne.n	80019b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001964:	2b00      	cmp	r3, #0
 8001966:	d127      	bne.n	80019b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001980:	2b00      	cmp	r3, #0
 8001982:	d119      	bne.n	80019b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0220 	bic.w	r2, r2, #32
 8001992:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fd7b 	bl	80014b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019be:	e00e      	b.n	80019de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fd85 	bl	80014dc <HAL_ADC_ErrorCallback>
}
 80019d2:	e004      	b.n	80019de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fd67 	bl	80014c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f043 0204 	orr.w	r2, r3, #4
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fd5a 	bl	80014dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff4c 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb2:	f7ff ff61 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f7ff ffb1 	bl	8001b24 <NVIC_EncodePriority>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff80 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff54 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff faf8 	bl	80011f4 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e099      	b.n	8001d44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c30:	e00f      	b.n	8001c52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c32:	f7ff fadf 	bl	80011f4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d908      	bls.n	8001c52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2203      	movs	r2, #3
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e078      	b.n	8001d44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e8      	bne.n	8001c32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_DMA_Init+0x158>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d107      	bne.n	8001cbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d117      	bne.n	8001d16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00e      	beq.n	8001d16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fa6f 	bl	80021dc <DMA_CheckFifoParam>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d12:	2301      	movs	r3, #1
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa26 	bl	8002170 <DMA_CalcBaseAndBitshift>
 8001d24:	4603      	mov	r3, r0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	223f      	movs	r2, #63	; 0x3f
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f010803f 	.word	0xf010803f

08001d50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Start_IT+0x26>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e040      	b.n	8001df8 <HAL_DMA_Start_IT+0xa8>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d12f      	bne.n	8001dea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f9b8 	bl	8002114 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0216 	orr.w	r2, r2, #22
 8001dbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0208 	orr.w	r2, r2, #8
 8001dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e005      	b.n	8001df6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_DMA_IRQHandler+0x258>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_DMA_IRQHandler+0x25c>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0a9b      	lsrs	r3, r3, #10
 8001e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01a      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0204 	bic.w	r2, r2, #4
 8001e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2208      	movs	r2, #8
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e64:	f043 0201 	orr.w	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2201      	movs	r2, #1
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2201      	movs	r2, #1
 8001e90:	409a      	lsls	r2, r3
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2210      	movs	r2, #16
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d043      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03c      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2210      	movs	r2, #16
 8001efc:	409a      	lsls	r2, r3
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d018      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d108      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
 8001f2e:	e01f      	b.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e016      	b.n	8001f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	2220      	movs	r2, #32
 8001f76:	409a      	lsls	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f000 808e 	beq.w	800209e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8086 	beq.w	800209e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2220      	movs	r2, #32
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b05      	cmp	r3, #5
 8001fa8:	d136      	bne.n	8002018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0216 	bic.w	r2, r2, #22
 8001fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <HAL_DMA_IRQHandler+0x1da>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0208 	bic.w	r2, r2, #8
 8001fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	223f      	movs	r2, #63	; 0x3f
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	2b00      	cmp	r3, #0
 800200c:	d07d      	beq.n	800210a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	4798      	blx	r3
        }
        return;
 8002016:	e078      	b.n	800210a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01c      	beq.n	8002060 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d108      	bne.n	8002046 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	2b00      	cmp	r3, #0
 800203a:	d030      	beq.n	800209e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
 8002044:	e02b      	b.n	800209e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d027      	beq.n	800209e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
 8002056:	e022      	b.n	800209e <HAL_DMA_IRQHandler+0x29e>
 8002058:	20000000 	.word	0x20000000
 800205c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0210 	bic.w	r2, r2, #16
 800207c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d032      	beq.n	800210c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d022      	beq.n	80020f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2205      	movs	r2, #5
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	3301      	adds	r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d307      	bcc.n	80020e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f2      	bne.n	80020ca <HAL_DMA_IRQHandler+0x2ca>
 80020e4:	e000      	b.n	80020e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020e6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
 8002108:	e000      	b.n	800210c <HAL_DMA_IRQHandler+0x30c>
        return;
 800210a:	bf00      	nop
    }
  }
}
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop

08002114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002130:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d108      	bne.n	8002154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002152:	e007      	b.n	8002164 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	60da      	str	r2, [r3, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b10      	subs	r3, #16
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <DMA_CalcBaseAndBitshift+0x64>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <DMA_CalcBaseAndBitshift+0x68>)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d909      	bls.n	80021b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	1d1a      	adds	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	659a      	str	r2, [r3, #88]	; 0x58
 80021b0:	e007      	b.n	80021c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ba:	f023 0303 	bic.w	r3, r3, #3
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	aaaaaaab 	.word	0xaaaaaaab
 80021d8:	0800697c 	.word	0x0800697c

080021dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0x5a>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d856      	bhi.n	80022aa <DMA_CheckFifoParam+0xce>
 80021fc:	a201      	add	r2, pc, #4	; (adr r2, 8002204 <DMA_CheckFifoParam+0x28>)
 80021fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002202:	bf00      	nop
 8002204:	08002215 	.word	0x08002215
 8002208:	08002227 	.word	0x08002227
 800220c:	08002215 	.word	0x08002215
 8002210:	080022ab 	.word	0x080022ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d046      	beq.n	80022ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e043      	b.n	80022ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800222e:	d140      	bne.n	80022b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002234:	e03d      	b.n	80022b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223e:	d121      	bne.n	8002284 <DMA_CheckFifoParam+0xa8>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d837      	bhi.n	80022b6 <DMA_CheckFifoParam+0xda>
 8002246:	a201      	add	r2, pc, #4	; (adr r2, 800224c <DMA_CheckFifoParam+0x70>)
 8002248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224c:	0800225d 	.word	0x0800225d
 8002250:	08002263 	.word	0x08002263
 8002254:	0800225d 	.word	0x0800225d
 8002258:	08002275 	.word	0x08002275
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
      break;
 8002260:	e030      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d025      	beq.n	80022ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002272:	e022      	b.n	80022ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800227c:	d11f      	bne.n	80022be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002282:	e01c      	b.n	80022be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d903      	bls.n	8002292 <DMA_CheckFifoParam+0xb6>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d003      	beq.n	8002298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002290:	e018      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      break;
 8002296:	e015      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      break;
 80022a8:	e00b      	b.n	80022c2 <DMA_CheckFifoParam+0xe6>
      break;
 80022aa:	bf00      	nop
 80022ac:	e00a      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e008      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e006      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e004      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e002      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022be:	bf00      	nop
 80022c0:	e000      	b.n	80022c4 <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
    }
  } 
  
  return status; 
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop

080022d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	e16b      	b.n	80025c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	429a      	cmp	r2, r3
 800230a:	f040 815a 	bne.w	80025c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d005      	beq.n	8002326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	2b02      	cmp	r3, #2
 8002324:	d130      	bne.n	8002388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0201 	and.w	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	2b03      	cmp	r3, #3
 8002392:	d017      	beq.n	80023c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	2203      	movs	r2, #3
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d123      	bne.n	8002418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	08da      	lsrs	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3208      	adds	r2, #8
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80b4 	beq.w	80025c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b60      	ldr	r3, [pc, #384]	; (80025e0 <HAL_GPIO_Init+0x30c>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a5f      	ldr	r2, [pc, #380]	; (80025e0 <HAL_GPIO_Init+0x30c>)
 8002464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_GPIO_Init+0x30c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <HAL_GPIO_Init+0x310>)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_GPIO_Init+0x314>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d02b      	beq.n	80024fa <HAL_GPIO_Init+0x226>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a51      	ldr	r2, [pc, #324]	; (80025ec <HAL_GPIO_Init+0x318>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d025      	beq.n	80024f6 <HAL_GPIO_Init+0x222>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a50      	ldr	r2, [pc, #320]	; (80025f0 <HAL_GPIO_Init+0x31c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <HAL_GPIO_Init+0x21e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4f      	ldr	r2, [pc, #316]	; (80025f4 <HAL_GPIO_Init+0x320>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d019      	beq.n	80024ee <HAL_GPIO_Init+0x21a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4e      	ldr	r2, [pc, #312]	; (80025f8 <HAL_GPIO_Init+0x324>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x216>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4d      	ldr	r2, [pc, #308]	; (80025fc <HAL_GPIO_Init+0x328>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x212>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4c      	ldr	r2, [pc, #304]	; (8002600 <HAL_GPIO_Init+0x32c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x20e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <HAL_GPIO_Init+0x330>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x20a>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00e      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024de:	2308      	movs	r3, #8
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024e2:	2306      	movs	r3, #6
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x228>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x310>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800251a:	4b3b      	ldr	r3, [pc, #236]	; (8002608 <HAL_GPIO_Init+0x334>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800253e:	4a32      	ldr	r2, [pc, #200]	; (8002608 <HAL_GPIO_Init+0x334>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_GPIO_Init+0x334>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_GPIO_Init+0x334>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <HAL_GPIO_Init+0x334>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <HAL_GPIO_Init+0x334>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <HAL_GPIO_Init+0x334>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_GPIO_Init+0x334>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f ae90 	bls.w	80022f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40021c00 	.word	0x40021c00
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e264      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d075      	beq.n	800277a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	4ba3      	ldr	r3, [pc, #652]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4ba0      	ldr	r3, [pc, #640]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d112      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05b      	beq.n	8002778 <HAL_RCC_OscConfig+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d157      	bne.n	8002778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e23f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x74>
 80026d6:	4b91      	ldr	r3, [pc, #580]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a90      	ldr	r2, [pc, #576]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b8b      	ldr	r3, [pc, #556]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a8a      	ldr	r2, [pc, #552]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a87      	ldr	r2, [pc, #540]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 8002708:	4b84      	ldr	r3, [pc, #528]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a83      	ldr	r2, [pc, #524]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b81      	ldr	r3, [pc, #516]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a80      	ldr	r2, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fd64 	bl	80011f4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fd60 	bl	80011f4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e204      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xc0>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fe fd50 	bl	80011f4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe fd4c 	bl	80011f4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1f0      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0xe8>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b62      	ldr	r3, [pc, #392]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b5f      	ldr	r3, [pc, #380]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b5c      	ldr	r3, [pc, #368]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c4      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4952      	ldr	r1, [pc, #328]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b4f      	ldr	r3, [pc, #316]	; (8002920 <HAL_RCC_OscConfig+0x2b0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fd05 	bl	80011f4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe fd01 	bl	80011f4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a5      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b43      	ldr	r3, [pc, #268]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4940      	ldr	r1, [pc, #256]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_RCC_OscConfig+0x2b0>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe fce4 	bl	80011f4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7fe fce0 	bl	80011f4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e184      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d030      	beq.n	80028bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <HAL_RCC_OscConfig+0x2b4>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe fcc4 	bl	80011f4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe fcc0 	bl	80011f4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e164      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x200>
 800288e:	e015      	b.n	80028bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x2b4>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7fe fcad 	bl	80011f4 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289e:	f7fe fca9 	bl	80011f4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e14d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80a0 	beq.w	8002a0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ce:	4b13      	ldr	r3, [pc, #76]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10f      	bne.n	80028fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f6:	2301      	movs	r3, #1
 80028f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d121      	bne.n	800294a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_RCC_OscConfig+0x2b8>)
 800290c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002912:	f7fe fc6f 	bl	80011f4 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	e011      	b.n	800293e <HAL_RCC_OscConfig+0x2ce>
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	42470000 	.word	0x42470000
 8002924:	42470e80 	.word	0x42470e80
 8002928:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fc62 	bl	80011f4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e106      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b85      	ldr	r3, [pc, #532]	; (8002b54 <HAL_RCC_OscConfig+0x4e4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d106      	bne.n	8002960 <HAL_RCC_OscConfig+0x2f0>
 8002952:	4b81      	ldr	r3, [pc, #516]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a80      	ldr	r2, [pc, #512]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	e01c      	b.n	800299a <HAL_RCC_OscConfig+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b05      	cmp	r3, #5
 8002966:	d10c      	bne.n	8002982 <HAL_RCC_OscConfig+0x312>
 8002968:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a77      	ldr	r2, [pc, #476]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
 8002980:	e00b      	b.n	800299a <HAL_RCC_OscConfig+0x32a>
 8002982:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a74      	ldr	r2, [pc, #464]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002994:	f023 0304 	bic.w	r3, r3, #4
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fc27 	bl	80011f4 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fc23 	bl	80011f4 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0c5      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	4b65      	ldr	r3, [pc, #404]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ee      	beq.n	80029aa <HAL_RCC_OscConfig+0x33a>
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7fe fc11 	bl	80011f4 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d4:	e00a      	b.n	80029ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7fe fc0d 	bl	80011f4 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0af      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ee      	bne.n	80029d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fe:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a55      	ldr	r2, [pc, #340]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 809b 	beq.w	8002b4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d05c      	beq.n	8002ada <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d141      	bne.n	8002aac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a28:	4b4c      	ldr	r3, [pc, #304]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fbe1 	bl	80011f4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fe fbdd 	bl	80011f4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e081      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	019b      	lsls	r3, r3, #6
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	041b      	lsls	r3, r3, #16
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	4937      	ldr	r1, [pc, #220]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fbb6 	bl	80011f4 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fbb2 	bl	80011f4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e056      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x41c>
 8002aaa:	e04e      	b.n	8002b4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fb9f 	bl	80011f4 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aba:	f7fe fb9b 	bl	80011f4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e03f      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x44a>
 8002ad8:	e037      	b.n	8002b4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e032      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d028      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d11a      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b16:	4013      	ands	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40007000 	.word	0x40007000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	42470060 	.word	0x42470060

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0cc      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d90c      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fad0 	bl	80011f4 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe facc 	bl	80011f4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d20c      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe f948 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08006964 	.word	0x08006964
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d32:	2100      	movs	r1, #0
 8002d34:	6079      	str	r1, [r7, #4]
 8002d36:	2100      	movs	r1, #0
 8002d38:	60f9      	str	r1, [r7, #12]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d3e:	2100      	movs	r1, #0
 8002d40:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d42:	4952      	ldr	r1, [pc, #328]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d44:	6889      	ldr	r1, [r1, #8]
 8002d46:	f001 010c 	and.w	r1, r1, #12
 8002d4a:	2908      	cmp	r1, #8
 8002d4c:	d00d      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x3e>
 8002d4e:	2908      	cmp	r1, #8
 8002d50:	f200 8094 	bhi.w	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
 8002d54:	2900      	cmp	r1, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_RCC_GetSysClockFreq+0x32>
 8002d58:	2904      	cmp	r1, #4
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x38>
 8002d5c:	e08e      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d60:	60bb      	str	r3, [r7, #8]
       break;
 8002d62:	e08e      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d64:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d66:	60bb      	str	r3, [r7, #8]
      break;
 8002d68:	e08b      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6a:	4948      	ldr	r1, [pc, #288]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d6c:	6849      	ldr	r1, [r1, #4]
 8002d6e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002d72:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d74:	4945      	ldr	r1, [pc, #276]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d76:	6849      	ldr	r1, [r1, #4]
 8002d78:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d7c:	2900      	cmp	r1, #0
 8002d7e:	d024      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d80:	4942      	ldr	r1, [pc, #264]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002d82:	6849      	ldr	r1, [r1, #4]
 8002d84:	0989      	lsrs	r1, r1, #6
 8002d86:	4608      	mov	r0, r1
 8002d88:	f04f 0100 	mov.w	r1, #0
 8002d8c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002d90:	f04f 0500 	mov.w	r5, #0
 8002d94:	ea00 0204 	and.w	r2, r0, r4
 8002d98:	ea01 0305 	and.w	r3, r1, r5
 8002d9c:	493d      	ldr	r1, [pc, #244]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d9e:	fb01 f003 	mul.w	r0, r1, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	fb01 f102 	mul.w	r1, r1, r2
 8002da8:	1844      	adds	r4, r0, r1
 8002daa:	493a      	ldr	r1, [pc, #232]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dac:	fba2 0101 	umull	r0, r1, r2, r1
 8002db0:	1863      	adds	r3, r4, r1
 8002db2:	4619      	mov	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	f7fd fa60 	bl	8000280 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e04a      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b30      	ldr	r3, [pc, #192]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	ea02 0400 	and.w	r4, r2, r0
 8002de2:	ea03 0501 	and.w	r5, r3, r1
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	014b      	lsls	r3, r1, #5
 8002df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df8:	0142      	lsls	r2, r0, #5
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	1b00      	subs	r0, r0, r4
 8002e00:	eb61 0105 	sbc.w	r1, r1, r5
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	018b      	lsls	r3, r1, #6
 8002e0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e12:	0182      	lsls	r2, r0, #6
 8002e14:	1a12      	subs	r2, r2, r0
 8002e16:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	00d9      	lsls	r1, r3, #3
 8002e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e28:	00d0      	lsls	r0, r2, #3
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	1912      	adds	r2, r2, r4
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	0299      	lsls	r1, r3, #10
 8002e3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e42:	0290      	lsls	r0, r2, #10
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	f7fd fa14 	bl	8000280 <__aeabi_uldivmod>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x160>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	60bb      	str	r3, [r7, #8]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e7e:	60bb      	str	r3, [r7, #8]
      break;
 8002e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e82:	68bb      	ldr	r3, [r7, #8]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	017d7840 	.word	0x017d7840

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08006974 	.word	0x08006974

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffdc 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0b5b      	lsrs	r3, r3, #13
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08006974 	.word	0x08006974

08002f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_GetClockConfig+0x5c>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	08db      	lsrs	r3, r3, #3
 8002f3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_RCC_GetClockConfig+0x60>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0207 	and.w	r2, r3, #7
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	601a      	str	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e041      	b.n	8002ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f839 	bl	8003002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f000 f9d8 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d001      	beq.n	8003030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e04e      	b.n	80030ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_TIM_Base_Start_IT+0xc4>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d01d      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1f      	ldr	r2, [pc, #124]	; (80030e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1c      	ldr	r2, [pc, #112]	; (80030e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_TIM_Base_Start_IT+0x80>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a18      	ldr	r2, [pc, #96]	; (80030f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d111      	bne.n	80030bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d010      	beq.n	80030cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ba:	e007      	b.n	80030cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40010400 	.word	0x40010400
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40001800 	.word	0x40001800

080030f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0202 	mvn.w	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8ee 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f8e0 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8f1 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0204 	mvn.w	r2, #4
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f8c4 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f8b6 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8c7 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0208 	mvn.w	r2, #8
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f89a 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f88c 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f89d 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b10      	cmp	r3, #16
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2208      	movs	r2, #8
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f870 	bl	800331c <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f862 	bl	8003308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f873 	bl	8003330 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fd fd92 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f902 	bl	80034ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f838 	bl	8003344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0220 	mvn.w	r2, #32
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8cc 	bl	8003498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a40      	ldr	r2, [pc, #256]	; (800346c <TIM_Base_SetConfig+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a3d      	ldr	r2, [pc, #244]	; (8003470 <TIM_Base_SetConfig+0x118>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a3c      	ldr	r2, [pc, #240]	; (8003474 <TIM_Base_SetConfig+0x11c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3b      	ldr	r2, [pc, #236]	; (8003478 <TIM_Base_SetConfig+0x120>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3a      	ldr	r2, [pc, #232]	; (800347c <TIM_Base_SetConfig+0x124>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d108      	bne.n	80033aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <TIM_Base_SetConfig+0x114>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d027      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2c      	ldr	r2, [pc, #176]	; (8003470 <TIM_Base_SetConfig+0x118>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d023      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <TIM_Base_SetConfig+0x11c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <TIM_Base_SetConfig+0x120>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01b      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <TIM_Base_SetConfig+0x124>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d017      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <TIM_Base_SetConfig+0x128>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a27      	ldr	r2, [pc, #156]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00f      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <TIM_Base_SetConfig+0x130>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00b      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a25      	ldr	r2, [pc, #148]	; (800348c <TIM_Base_SetConfig+0x134>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a24      	ldr	r2, [pc, #144]	; (8003490 <TIM_Base_SetConfig+0x138>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a23      	ldr	r2, [pc, #140]	; (8003494 <TIM_Base_SetConfig+0x13c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d108      	bne.n	800341c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <TIM_Base_SetConfig+0x114>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0xf8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a0c      	ldr	r2, [pc, #48]	; (800347c <TIM_Base_SetConfig+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	615a      	str	r2, [r3, #20]
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40000400 	.word	0x40000400
 8003474:	40000800 	.word	0x40000800
 8003478:	40000c00 	.word	0x40000c00
 800347c:	40010400 	.word	0x40010400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800
 800348c:	40001800 	.word	0x40001800
 8003490:	40001c00 	.word	0x40001c00
 8003494:	40002000 	.word	0x40002000

08003498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e03f      	b.n	8003552 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fd10 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	; 0x24
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f929 	bl	800375c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b08a      	sub	sp, #40	; 0x28
 800355e:	af02      	add	r7, sp, #8
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	d17c      	bne.n	8003674 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <HAL_UART_Transmit+0x2c>
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e075      	b.n	8003676 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_UART_Transmit+0x3e>
 8003594:	2302      	movs	r3, #2
 8003596:	e06e      	b.n	8003676 <HAL_UART_Transmit+0x11c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2221      	movs	r2, #33	; 0x21
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ae:	f7fd fe21 	bl	80011f4 <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d108      	bne.n	80035dc <HAL_UART_Transmit+0x82>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e003      	b.n	80035e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035ec:	e02a      	b.n	8003644 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f840 	bl	800367e <UART_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e036      	b.n	8003676 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800361c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3302      	adds	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e007      	b.n	8003636 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	3301      	adds	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1cf      	bne.n	80035ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f810 	bl	800367e <UART_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e006      	b.n	8003676 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b090      	sub	sp, #64	; 0x40
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	e050      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d04c      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x30>
 800369e:	f7fd fda9 	bl	80011f4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d241      	bcs.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036ce:	637a      	str	r2, [r7, #52]	; 0x34
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e5      	bne.n	80036ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	613b      	str	r3, [r7, #16]
   return(result);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3314      	adds	r3, #20
 8003700:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003702:	623a      	str	r2, [r7, #32]
 8003704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	69f9      	ldr	r1, [r7, #28]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e5      	bne.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	429a      	cmp	r2, r3
 800374e:	d09f      	beq.n	8003690 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3740      	adds	r7, #64	; 0x40
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003760:	b09f      	sub	sp, #124	; 0x7c
 8003762:	af00      	add	r7, sp, #0
 8003764:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	ea40 0301 	orr.w	r3, r0, r1
 800377c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	431a      	orrs	r2, r3
 8003788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	431a      	orrs	r2, r3
 800378e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4313      	orrs	r3, r2
 8003794:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037a0:	f021 010c 	bic.w	r1, r1, #12
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037aa:	430b      	orrs	r3, r1
 80037ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	6999      	ldr	r1, [r3, #24]
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	ea40 0301 	orr.w	r3, r0, r1
 80037c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4bc5      	ldr	r3, [pc, #788]	; (8003ae0 <UART_SetConfig+0x384>)
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d004      	beq.n	80037da <UART_SetConfig+0x7e>
 80037d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4bc3      	ldr	r3, [pc, #780]	; (8003ae4 <UART_SetConfig+0x388>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d103      	bne.n	80037e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037da:	f7ff fb7d 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80037de:	6778      	str	r0, [r7, #116]	; 0x74
 80037e0:	e002      	b.n	80037e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037e2:	f7ff fb65 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80037e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f0:	f040 80b6 	bne.w	8003960 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f6:	461c      	mov	r4, r3
 80037f8:	f04f 0500 	mov.w	r5, #0
 80037fc:	4622      	mov	r2, r4
 80037fe:	462b      	mov	r3, r5
 8003800:	1891      	adds	r1, r2, r2
 8003802:	6439      	str	r1, [r7, #64]	; 0x40
 8003804:	415b      	adcs	r3, r3
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800380c:	1912      	adds	r2, r2, r4
 800380e:	eb45 0303 	adc.w	r3, r5, r3
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	00d9      	lsls	r1, r3, #3
 800381c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003820:	00d0      	lsls	r0, r2, #3
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	1911      	adds	r1, r2, r4
 8003828:	6639      	str	r1, [r7, #96]	; 0x60
 800382a:	416b      	adcs	r3, r5
 800382c:	667b      	str	r3, [r7, #100]	; 0x64
 800382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	461a      	mov	r2, r3
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	1891      	adds	r1, r2, r2
 800383a:	63b9      	str	r1, [r7, #56]	; 0x38
 800383c:	415b      	adcs	r3, r3
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003844:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003848:	f7fc fd1a 	bl	8000280 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4ba5      	ldr	r3, [pc, #660]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011e      	lsls	r6, r3, #4
 800385a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800385c:	461c      	mov	r4, r3
 800385e:	f04f 0500 	mov.w	r5, #0
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	1891      	adds	r1, r2, r2
 8003868:	6339      	str	r1, [r7, #48]	; 0x30
 800386a:	415b      	adcs	r3, r3
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
 800386e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003872:	1912      	adds	r2, r2, r4
 8003874:	eb45 0303 	adc.w	r3, r5, r3
 8003878:	f04f 0000 	mov.w	r0, #0
 800387c:	f04f 0100 	mov.w	r1, #0
 8003880:	00d9      	lsls	r1, r3, #3
 8003882:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003886:	00d0      	lsls	r0, r2, #3
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	1911      	adds	r1, r2, r4
 800388e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003890:	416b      	adcs	r3, r5
 8003892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	461a      	mov	r2, r3
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	1891      	adds	r1, r2, r2
 80038a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80038a2:	415b      	adcs	r3, r3
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038ae:	f7fc fce7 	bl	8000280 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <UART_SetConfig+0x38c>)
 80038b8:	fba3 1302 	umull	r1, r3, r3, r2
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	2164      	movs	r1, #100	; 0x64
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	3332      	adds	r3, #50	; 0x32
 80038ca:	4a87      	ldr	r2, [pc, #540]	; (8003ae8 <UART_SetConfig+0x38c>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d8:	441e      	add	r6, r3
 80038da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038dc:	4618      	mov	r0, r3
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	1894      	adds	r4, r2, r2
 80038e8:	623c      	str	r4, [r7, #32]
 80038ea:	415b      	adcs	r3, r3
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038f2:	1812      	adds	r2, r2, r0
 80038f4:	eb41 0303 	adc.w	r3, r1, r3
 80038f8:	f04f 0400 	mov.w	r4, #0
 80038fc:	f04f 0500 	mov.w	r5, #0
 8003900:	00dd      	lsls	r5, r3, #3
 8003902:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003906:	00d4      	lsls	r4, r2, #3
 8003908:	4622      	mov	r2, r4
 800390a:	462b      	mov	r3, r5
 800390c:	1814      	adds	r4, r2, r0
 800390e:	653c      	str	r4, [r7, #80]	; 0x50
 8003910:	414b      	adcs	r3, r1
 8003912:	657b      	str	r3, [r7, #84]	; 0x54
 8003914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	461a      	mov	r2, r3
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	1891      	adds	r1, r2, r2
 8003920:	61b9      	str	r1, [r7, #24]
 8003922:	415b      	adcs	r3, r3
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800392a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800392e:	f7fc fca7 	bl	8000280 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003938:	fba3 1302 	umull	r1, r3, r3, r2
 800393c:	095b      	lsrs	r3, r3, #5
 800393e:	2164      	movs	r1, #100	; 0x64
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	3332      	adds	r3, #50	; 0x32
 800394a:	4a67      	ldr	r2, [pc, #412]	; (8003ae8 <UART_SetConfig+0x38c>)
 800394c:	fba2 2303 	umull	r2, r3, r2, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	f003 0207 	and.w	r2, r3, #7
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4432      	add	r2, r6
 800395c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800395e:	e0b9      	b.n	8003ad4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003962:	461c      	mov	r4, r3
 8003964:	f04f 0500 	mov.w	r5, #0
 8003968:	4622      	mov	r2, r4
 800396a:	462b      	mov	r3, r5
 800396c:	1891      	adds	r1, r2, r2
 800396e:	6139      	str	r1, [r7, #16]
 8003970:	415b      	adcs	r3, r3
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003978:	1912      	adds	r2, r2, r4
 800397a:	eb45 0303 	adc.w	r3, r5, r3
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	00d9      	lsls	r1, r3, #3
 8003988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800398c:	00d0      	lsls	r0, r2, #3
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	eb12 0804 	adds.w	r8, r2, r4
 8003996:	eb43 0905 	adc.w	r9, r3, r5
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4618      	mov	r0, r3
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	008b      	lsls	r3, r1, #2
 80039ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039b2:	0082      	lsls	r2, r0, #2
 80039b4:	4640      	mov	r0, r8
 80039b6:	4649      	mov	r1, r9
 80039b8:	f7fc fc62 	bl	8000280 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4b49      	ldr	r3, [pc, #292]	; (8003ae8 <UART_SetConfig+0x38c>)
 80039c2:	fba3 2302 	umull	r2, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	011e      	lsls	r6, r3, #4
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039cc:	4618      	mov	r0, r3
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	1894      	adds	r4, r2, r2
 80039d8:	60bc      	str	r4, [r7, #8]
 80039da:	415b      	adcs	r3, r3
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e2:	1812      	adds	r2, r2, r0
 80039e4:	eb41 0303 	adc.w	r3, r1, r3
 80039e8:	f04f 0400 	mov.w	r4, #0
 80039ec:	f04f 0500 	mov.w	r5, #0
 80039f0:	00dd      	lsls	r5, r3, #3
 80039f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f6:	00d4      	lsls	r4, r2, #3
 80039f8:	4622      	mov	r2, r4
 80039fa:	462b      	mov	r3, r5
 80039fc:	1814      	adds	r4, r2, r0
 80039fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003a00:	414b      	adcs	r3, r1
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	008b      	lsls	r3, r1, #2
 8003a18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a1c:	0082      	lsls	r2, r0, #2
 8003a1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a22:	f7fc fc2d 	bl	8000280 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	2164      	movs	r1, #100	; 0x64
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	3332      	adds	r3, #50	; 0x32
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4a:	441e      	add	r6, r3
 8003a4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	1894      	adds	r4, r2, r2
 8003a5a:	603c      	str	r4, [r7, #0]
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a64:	1812      	adds	r2, r2, r0
 8003a66:	eb41 0303 	adc.w	r3, r1, r3
 8003a6a:	f04f 0400 	mov.w	r4, #0
 8003a6e:	f04f 0500 	mov.w	r5, #0
 8003a72:	00dd      	lsls	r5, r3, #3
 8003a74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a78:	00d4      	lsls	r4, r2, #3
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	eb12 0a00 	adds.w	sl, r2, r0
 8003a82:	eb43 0b01 	adc.w	fp, r3, r1
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a9e:	0082      	lsls	r2, r0, #2
 8003aa0:	4650      	mov	r0, sl
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	f7fc fbec 	bl	8000280 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003aae:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2164      	movs	r1, #100	; 0x64
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	3332      	adds	r3, #50	; 0x32
 8003ac0:	4a09      	ldr	r2, [pc, #36]	; (8003ae8 <UART_SetConfig+0x38c>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4432      	add	r2, r6
 8003ad2:	609a      	str	r2, [r3, #8]
}
 8003ad4:	bf00      	nop
 8003ad6:	377c      	adds	r7, #124	; 0x7c
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ade:	bf00      	nop
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f103 0208 	add.w	r2, r3, #8
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 0208 	add.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f103 0208 	add.w	r2, r3, #8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e00c      	b.n	8003bc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	e002      	b.n	8003bbc <vListInsert+0x2e>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d2f6      	bcs.n	8003bb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6892      	ldr	r2, [r2, #8]
 8003c16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6852      	ldr	r2, [r2, #4]
 8003c20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d103      	bne.n	8003c34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c7e:	f001 fee1 	bl	8005a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	441a      	add	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	441a      	add	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	22ff      	movs	r2, #255	; 0xff
 8003cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00f      	beq.n	8003cfc <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3310      	adds	r3, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 ffd1 	bl	8004c88 <xTaskRemoveFromEventList>
 8003ce6:	e009      	b.n	8003cfc <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3310      	adds	r3, #16
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fefd 	bl	8003aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fef8 	bl	8003aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cfc:	f001 fed2 	bl	8005aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08a      	sub	sp, #40	; 0x28
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	613b      	str	r3, [r7, #16]
}
 8003d30:	bf00      	nop
 8003d32:	e7fe      	b.n	8003d32 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e004      	b.n	8003d4a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3350      	adds	r3, #80	; 0x50
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 ff9a 	bl	8005c88 <pvPortMalloc>
 8003d54:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	3350      	adds	r3, #80	; 0x50
 8003d64:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d66:	79fa      	ldrb	r2, [r7, #7]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f805 	bl	8003d82 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d78:	69bb      	ldr	r3, [r7, #24]
	}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e002      	b.n	8003da4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003db0:	2101      	movs	r1, #1
 8003db2:	69b8      	ldr	r0, [r7, #24]
 8003db4:	f7ff ff4e 	bl	8003c54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08e      	sub	sp, #56	; 0x38
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueGenericSend+0x32>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d103      	bne.n	8003e08 <xQueueGenericSend+0x40>
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <xQueueGenericSend+0x44>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <xQueueGenericSend+0x46>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <xQueueGenericSend+0x60>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSend+0x6e>
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <xQueueGenericSend+0x72>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <xQueueGenericSend+0x74>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	f383 8811 	msr	BASEPRI, r3
 8003e48:	f3bf 8f6f 	isb	sy
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	623b      	str	r3, [r7, #32]
}
 8003e52:	bf00      	nop
 8003e54:	e7fe      	b.n	8003e54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e56:	f001 f8ad 	bl	8004fb4 <xTaskGetSchedulerState>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <xQueueGenericSend+0x9e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <xQueueGenericSend+0xa2>
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <xQueueGenericSend+0xa4>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	61fb      	str	r3, [r7, #28]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e86:	f001 fddd 	bl	8005a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <xQueueGenericSend+0xd4>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d112      	bne.n	8003ec2 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ea2:	f000 f9e3 	bl	800426c <prvCopyDataToQueue>
 8003ea6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d004      	beq.n	8003eba <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	3324      	adds	r3, #36	; 0x24
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fee7 	bl	8004c88 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eba:	f001 fdf3 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e062      	b.n	8003f88 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ec8:	f001 fdec 	bl	8005aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e05b      	b.n	8003f88 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 ff36 	bl	8004d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ee4:	f001 fdde 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee8:	f000 fce0 	bl	80048ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eec:	f001 fdaa 	bl	8005a44 <vPortEnterCritical>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x13e>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d103      	bne.n	8003f1c <xQueueGenericSend+0x154>
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f1c:	f001 fdc2 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f20:	1d3a      	adds	r2, r7, #4
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 ff25 	bl	8004d78 <xTaskCheckForTimeOut>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d123      	bne.n	8003f7c <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f36:	f000 fa91 	bl	800445c <prvIsQueueFull>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	3310      	adds	r3, #16
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fe4d 	bl	8004be8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f50:	f000 fa1c 	bl	800438c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f54:	f000 fcb8 	bl	80048c8 <xTaskResumeAll>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d193      	bne.n	8003e86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f5e:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <xQueueGenericSend+0x1c8>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e78a      	b.n	8003e86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f72:	f000 fa0b 	bl	800438c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f76:	f000 fca7 	bl	80048c8 <xTaskResumeAll>
 8003f7a:	e784      	b.n	8003e86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f7e:	f000 fa05 	bl	800438c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f82:	f000 fca1 	bl	80048c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3738      	adds	r7, #56	; 0x38
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	e000ed04 	.word	0xe000ed04

08003f94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08e      	sub	sp, #56	; 0x38
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <xQueueGenericSendFromISR+0x3c>
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueGenericSendFromISR+0x40>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueGenericSendFromISR+0x42>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	623b      	str	r3, [r7, #32]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d103      	bne.n	8003ffe <xQueueGenericSendFromISR+0x6a>
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <xQueueGenericSendFromISR+0x6e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <xQueueGenericSendFromISR+0x70>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	61fb      	str	r3, [r7, #28]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800401e:	f001 fdf3 	bl	8005c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004022:	f3ef 8211 	mrs	r2, BASEPRI
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	61ba      	str	r2, [r7, #24]
 8004038:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800403a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800403c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d302      	bcc.n	8004050 <xQueueGenericSendFromISR+0xbc>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d12c      	bne.n	80040aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004060:	f000 f904 	bl	800426c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004064:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d112      	bne.n	8004094 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	3324      	adds	r3, #36	; 0x24
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fe04 	bl	8004c88 <xTaskRemoveFromEventList>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e007      	b.n	80040a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004094:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004098:	3301      	adds	r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	b25a      	sxtb	r2, r3
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040a4:	2301      	movs	r3, #1
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80040a8:	e001      	b.n	80040ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3738      	adds	r7, #56	; 0x38
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	; 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <xQueueReceive+0x30>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	623b      	str	r3, [r7, #32]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <xQueueReceive+0x3e>
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <xQueueReceive+0x42>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <xQueueReceive+0x44>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <xQueueReceive+0x5e>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	61fb      	str	r3, [r7, #28]
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004122:	f000 ff47 	bl	8004fb4 <xTaskGetSchedulerState>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <xQueueReceive+0x6e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <xQueueReceive+0x72>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <xQueueReceive+0x74>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <xQueueReceive+0x8e>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	61bb      	str	r3, [r7, #24]
}
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004152:	f001 fc77 	bl	8005a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	2b00      	cmp	r3, #0
 8004160:	d014      	beq.n	800418c <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004166:	f000 f8eb 	bl	8004340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	1e5a      	subs	r2, r3, #1
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	3310      	adds	r3, #16
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd82 	bl	8004c88 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004184:	f001 fc8e 	bl	8005aa4 <vPortExitCritical>
				return pdPASS;
 8004188:	2301      	movs	r3, #1
 800418a:	e069      	b.n	8004260 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004192:	f001 fc87 	bl	8005aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004196:	2300      	movs	r3, #0
 8004198:	e062      	b.n	8004260 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a0:	f107 0310 	add.w	r3, r7, #16
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fdd1 	bl	8004d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ae:	f001 fc79 	bl	8005aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041b2:	f000 fb7b 	bl	80048ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041b6:	f001 fc45 	bl	8005a44 <vPortEnterCritical>
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d103      	bne.n	80041d0 <xQueueReceive+0x10c>
 80041c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d103      	bne.n	80041e6 <xQueueReceive+0x122>
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041e6:	f001 fc5d 	bl	8005aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ea:	1d3a      	adds	r2, r7, #4
 80041ec:	f107 0310 	add.w	r3, r7, #16
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fdc0 	bl	8004d78 <xTaskCheckForTimeOut>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d123      	bne.n	8004246 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004200:	f000 f916 	bl	8004430 <prvIsQueueEmpty>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	3324      	adds	r3, #36	; 0x24
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fce8 	bl	8004be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421a:	f000 f8b7 	bl	800438c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800421e:	f000 fb53 	bl	80048c8 <xTaskResumeAll>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d194      	bne.n	8004152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <xQueueReceive+0x1a4>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e78b      	b.n	8004152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800423a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800423c:	f000 f8a6 	bl	800438c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004240:	f000 fb42 	bl	80048c8 <xTaskResumeAll>
 8004244:	e785      	b.n	8004152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004248:	f000 f8a0 	bl	800438c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800424c:	f000 fb3c 	bl	80048c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004252:	f000 f8ed 	bl	8004430 <prvIsQueueEmpty>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f43f af7a 	beq.w	8004152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800425e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004260:	4618      	mov	r0, r3
 8004262:	3730      	adds	r7, #48	; 0x30
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d14d      	bne.n	800432e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 feaa 	bl	8004ff0 <xTaskPriorityDisinherit>
 800429c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	e043      	b.n	800432e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d119      	bne.n	80042e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6858      	ldr	r0, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	461a      	mov	r2, r3
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	f001 feea 	bl	8006090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d32b      	bcc.n	800432e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e026      	b.n	800432e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68d8      	ldr	r0, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	461a      	mov	r2, r3
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	f001 fed0 	bl	8006090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	425b      	negs	r3, r3
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d207      	bcs.n	800431c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	425b      	negs	r3, r3
 8004316:	441a      	add	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d105      	bne.n	800432e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3b01      	subs	r3, #1
 800432c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d303      	bcc.n	8004374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68d9      	ldr	r1, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	461a      	mov	r2, r3
 800437e:	6838      	ldr	r0, [r7, #0]
 8004380:	f001 fe86 	bl	8006090 <memcpy>
	}
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004394:	f001 fb56 	bl	8005a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800439e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a0:	e011      	b.n	80043c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fc6a 	bl	8004c88 <xTaskRemoveFromEventList>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043ba:	f000 fd3f 	bl	8004e3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	dce9      	bgt.n	80043a2 <prvUnlockQueue+0x16>
 80043ce:	e000      	b.n	80043d2 <prvUnlockQueue+0x46>
					break;
 80043d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	22ff      	movs	r2, #255	; 0xff
 80043d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043da:	f001 fb63 	bl	8005aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043de:	f001 fb31 	bl	8005a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ea:	e011      	b.n	8004410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3310      	adds	r3, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fc45 	bl	8004c88 <xTaskRemoveFromEventList>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004404:	f000 fd1a 	bl	8004e3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	3b01      	subs	r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004414:	2b00      	cmp	r3, #0
 8004416:	dce9      	bgt.n	80043ec <prvUnlockQueue+0x60>
 8004418:	e000      	b.n	800441c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800441a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004424:	f001 fb3e 	bl	8005aa4 <vPortExitCritical>
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004438:	f001 fb04 	bl	8005a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e001      	b.n	800444e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800444e:	f001 fb29 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004464:	f001 faee 	bl	8005a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	429a      	cmp	r2, r3
 8004472:	d102      	bne.n	800447a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e001      	b.n	800447e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800447e:	f001 fb11 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e014      	b.n	80044c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800449c:	4a0f      	ldr	r2, [pc, #60]	; (80044dc <vQueueAddToRegistry+0x50>)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044a8:	490c      	ldr	r1, [pc, #48]	; (80044dc <vQueueAddToRegistry+0x50>)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vQueueAddToRegistry+0x50>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044be:	e006      	b.n	80044ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b07      	cmp	r3, #7
 80044ca:	d9e7      	bls.n	800449c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	20012f34 	.word	0x20012f34

080044e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044f0:	f001 faa8 	bl	8005a44 <vPortEnterCritical>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044fa:	b25b      	sxtb	r3, r3
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d103      	bne.n	800450a <vQueueWaitForMessageRestricted+0x2a>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004510:	b25b      	sxtb	r3, r3
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d103      	bne.n	8004520 <vQueueWaitForMessageRestricted+0x40>
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004520:	f001 fac0 	bl	8005aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3324      	adds	r3, #36	; 0x24
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb7b 	bl	8004c30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800453a:	6978      	ldr	r0, [r7, #20]
 800453c:	f7ff ff26 	bl	800438c <prvUnlockQueue>
	}
 8004540:	bf00      	nop
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08c      	sub	sp, #48	; 0x30
 800454c:	af04      	add	r7, sp, #16
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fb93 	bl	8005c88 <pvPortMalloc>
 8004562:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00e      	beq.n	8004588 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800456a:	2058      	movs	r0, #88	; 0x58
 800456c:	f001 fb8c 	bl	8005c88 <pvPortMalloc>
 8004570:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	631a      	str	r2, [r3, #48]	; 0x30
 800457e:	e005      	b.n	800458c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f001 fc45 	bl	8005e10 <vPortFree>
 8004586:	e001      	b.n	800458c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d013      	beq.n	80045ba <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004592:	88fa      	ldrh	r2, [r7, #6]
 8004594:	2300      	movs	r3, #0
 8004596:	9303      	str	r3, [sp, #12]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f80e 	bl	80045ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ae:	69f8      	ldr	r0, [r7, #28]
 80045b0:	f000 f89a 	bl	80046e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045b4:	2301      	movs	r3, #1
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e002      	b.n	80045c0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045c0:	69bb      	ldr	r3, [r7, #24]
	}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b088      	sub	sp, #32
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	21a5      	movs	r1, #165	; 0xa5
 80045e4:	f001 fd62 	bl	80060ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045f2:	3b01      	subs	r3, #1
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	f023 0307 	bic.w	r3, r3, #7
 8004600:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <prvInitialiseNewTask+0x58>
	__asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	617b      	str	r3, [r7, #20]
}
 800461e:	bf00      	nop
 8004620:	e7fe      	b.n	8004620 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01f      	beq.n	8004668 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004628:	2300      	movs	r3, #0
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e012      	b.n	8004654 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	7819      	ldrb	r1, [r3, #0]
 8004636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	4413      	add	r3, r2
 800463c:	3334      	adds	r3, #52	; 0x34
 800463e:	460a      	mov	r2, r1
 8004640:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d006      	beq.n	800465c <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2b09      	cmp	r3, #9
 8004658:	d9e9      	bls.n	800462e <prvInitialiseNewTask+0x64>
 800465a:	e000      	b.n	800465e <prvInitialiseNewTask+0x94>
			{
				break;
 800465c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004666:	e003      	b.n	8004670 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	2b04      	cmp	r3, #4
 8004674:	d901      	bls.n	800467a <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004676:	2304      	movs	r3, #4
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004684:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2200      	movs	r2, #0
 800468a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	3304      	adds	r3, #4
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fa4b 	bl	8003b2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	3318      	adds	r3, #24
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fa46 	bl	8003b2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	f1c3 0205 	rsb	r2, r3, #5
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2200      	movs	r2, #0
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	f001 f88f 	bl	80057ec <pxPortInitialiseStack>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e0:	bf00      	nop
 80046e2:	3720      	adds	r7, #32
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046f0:	f001 f9a8 	bl	8005a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <prvAddNewTaskToReadyList+0xa8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <prvAddNewTaskToReadyList+0xa8>)
 80046fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046fe:	4b25      	ldr	r3, [pc, #148]	; (8004794 <prvAddNewTaskToReadyList+0xac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004706:	4a23      	ldr	r2, [pc, #140]	; (8004794 <prvAddNewTaskToReadyList+0xac>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <prvAddNewTaskToReadyList+0xa8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d110      	bne.n	8004736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004714:	f000 fbb0 	bl	8004e78 <prvInitialiseTaskLists>
 8004718:	e00d      	b.n	8004736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <prvAddNewTaskToReadyList+0xb0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004722:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <prvAddNewTaskToReadyList+0xac>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d802      	bhi.n	8004736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <prvAddNewTaskToReadyList+0xac>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <prvAddNewTaskToReadyList+0xb4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	4a17      	ldr	r2, [pc, #92]	; (800479c <prvAddNewTaskToReadyList+0xb4>)
 800473e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004740:	4b16      	ldr	r3, [pc, #88]	; (800479c <prvAddNewTaskToReadyList+0xb4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <prvAddNewTaskToReadyList+0xb8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	4a12      	ldr	r2, [pc, #72]	; (80047a0 <prvAddNewTaskToReadyList+0xb8>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff f9e8 	bl	8003b46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004776:	f001 f995 	bl	8005aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <prvAddNewTaskToReadyList+0xb0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <prvAddNewTaskToReadyList+0x9e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004782:	4b04      	ldr	r3, [pc, #16]	; (8004794 <prvAddNewTaskToReadyList+0xac>)
 8004784:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000016c 	.word	0x2000016c
 8004794:	20000094 	.word	0x20000094
 8004798:	20000178 	.word	0x20000178
 800479c:	20000188 	.word	0x20000188
 80047a0:	20000174 	.word	0x20000174
 80047a4:	20000098 	.word	0x20000098

080047a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d017      	beq.n	80047ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <vTaskDelay+0x60>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <vTaskDelay+0x30>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	60bb      	str	r3, [r7, #8]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047d8:	f000 f868 	bl	80048ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047dc:	2100      	movs	r1, #0
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fc8c 	bl	80050fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047e4:	f000 f870 	bl	80048c8 <xTaskResumeAll>
 80047e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <vTaskDelay+0x64>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000194 	.word	0x20000194
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004816:	4b1f      	ldr	r3, [pc, #124]	; (8004894 <vTaskStartScheduler+0x84>)
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2300      	movs	r3, #0
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	2300      	movs	r3, #0
 8004820:	2282      	movs	r2, #130	; 0x82
 8004822:	491d      	ldr	r1, [pc, #116]	; (8004898 <vTaskStartScheduler+0x88>)
 8004824:	481d      	ldr	r0, [pc, #116]	; (800489c <vTaskStartScheduler+0x8c>)
 8004826:	f7ff fe8f 	bl	8004548 <xTaskCreate>
 800482a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d102      	bne.n	8004838 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004832:	f000 fcc9 	bl	80051c8 <xTimerCreateTimerTask>
 8004836:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d116      	bne.n	800486c <vTaskStartScheduler+0x5c>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
}
 8004850:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <vTaskStartScheduler+0x90>)
 8004854:	f04f 32ff 	mov.w	r2, #4294967295
 8004858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <vTaskStartScheduler+0x94>)
 800485c:	2201      	movs	r2, #1
 800485e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <vTaskStartScheduler+0x98>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004866:	f001 f84b 	bl	8005900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486a:	e00e      	b.n	800488a <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004872:	d10a      	bne.n	800488a <vTaskStartScheduler+0x7a>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	607b      	str	r3, [r7, #4]
}
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <vTaskStartScheduler+0x78>
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000190 	.word	0x20000190
 8004898:	0800694c 	.word	0x0800694c
 800489c:	08004e55 	.word	0x08004e55
 80048a0:	2000018c 	.word	0x2000018c
 80048a4:	20000178 	.word	0x20000178
 80048a8:	20000170 	.word	0x20000170

080048ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <vTaskSuspendAll+0x18>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	4a03      	ldr	r2, [pc, #12]	; (80048c4 <vTaskSuspendAll+0x18>)
 80048b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80048ba:	bf00      	nop
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000194 	.word	0x20000194

080048c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048d6:	4b3b      	ldr	r3, [pc, #236]	; (80049c4 <xTaskResumeAll+0xfc>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	603b      	str	r3, [r7, #0]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048f4:	f001 f8a6 	bl	8005a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048f8:	4b32      	ldr	r3, [pc, #200]	; (80049c4 <xTaskResumeAll+0xfc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <xTaskResumeAll+0xfc>)
 8004900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b30      	ldr	r3, [pc, #192]	; (80049c4 <xTaskResumeAll+0xfc>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d155      	bne.n	80049b6 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800490a:	4b2f      	ldr	r3, [pc, #188]	; (80049c8 <xTaskResumeAll+0x100>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d051      	beq.n	80049b6 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004912:	e02e      	b.n	8004972 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004914:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <xTaskResumeAll+0x104>)
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3318      	adds	r3, #24
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f96d 	bl	8003c00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff f968 	bl	8003c00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	2201      	movs	r2, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <xTaskResumeAll+0x108>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4313      	orrs	r3, r2
 800493e:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <xTaskResumeAll+0x108>)
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <xTaskResumeAll+0x10c>)
 8004950:	441a      	add	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7ff f8f4 	bl	8003b46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <xTaskResumeAll+0x110>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <xTaskResumeAll+0x114>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004972:	4b16      	ldr	r3, [pc, #88]	; (80049cc <xTaskResumeAll+0x104>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1cc      	bne.n	8004914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004980:	f000 faf8 	bl	8004f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004984:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <xTaskResumeAll+0x118>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d010      	beq.n	80049b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004990:	f000 f838 	bl	8004a04 <xTaskIncrementTick>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <xTaskResumeAll+0x114>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f1      	bne.n	8004990 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <xTaskResumeAll+0x118>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <xTaskResumeAll+0x114>)
 80049b4:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049b6:	f001 f875 	bl	8005aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80049ba:	687b      	ldr	r3, [r7, #4]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000194 	.word	0x20000194
 80049c8:	2000016c 	.word	0x2000016c
 80049cc:	2000012c 	.word	0x2000012c
 80049d0:	20000174 	.word	0x20000174
 80049d4:	20000098 	.word	0x20000098
 80049d8:	20000094 	.word	0x20000094
 80049dc:	20000180 	.word	0x20000180
 80049e0:	2000017c 	.word	0x2000017c

080049e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <xTaskGetTickCount+0x1c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049f0:	687b      	ldr	r3, [r7, #4]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000170 	.word	0x20000170

08004a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0e:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <xTaskIncrementTick+0x108>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d16f      	bne.n	8004af6 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a16:	4b3e      	ldr	r3, [pc, #248]	; (8004b10 <xTaskIncrementTick+0x10c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a1e:	4a3c      	ldr	r2, [pc, #240]	; (8004b10 <xTaskIncrementTick+0x10c>)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d120      	bne.n	8004a6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a2a:	4b3a      	ldr	r3, [pc, #232]	; (8004b14 <xTaskIncrementTick+0x110>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <xTaskIncrementTick+0x46>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	603b      	str	r3, [r7, #0]
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xTaskIncrementTick+0x44>
 8004a4a:	4b32      	ldr	r3, [pc, #200]	; (8004b14 <xTaskIncrementTick+0x110>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <xTaskIncrementTick+0x114>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a2f      	ldr	r2, [pc, #188]	; (8004b14 <xTaskIncrementTick+0x110>)
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <xTaskIncrementTick+0x114>)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <xTaskIncrementTick+0x118>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <xTaskIncrementTick+0x118>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	f000 fa84 	bl	8004f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <xTaskIncrementTick+0x11c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d344      	bcc.n	8004b00 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a76:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <xTaskIncrementTick+0x110>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a80:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <xTaskIncrementTick+0x11c>)
 8004a82:	f04f 32ff 	mov.w	r2, #4294967295
 8004a86:	601a      	str	r2, [r3, #0]
					break;
 8004a88:	e03a      	b.n	8004b00 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <xTaskIncrementTick+0x110>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d203      	bcs.n	8004aaa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <xTaskIncrementTick+0x11c>)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004aa8:	e02a      	b.n	8004b00 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff f8a6 	bl	8003c00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	3318      	adds	r3, #24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f89d 	bl	8003c00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	2201      	movs	r2, #1
 8004acc:	409a      	lsls	r2, r3
 8004ace:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <xTaskIncrementTick+0x120>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <xTaskIncrementTick+0x120>)
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <xTaskIncrementTick+0x124>)
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f7ff f829 	bl	8003b46 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af4:	e7bf      	b.n	8004a76 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <xTaskIncrementTick+0x128>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3301      	adds	r3, #1
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <xTaskIncrementTick+0x128>)
 8004afe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b00:	697b      	ldr	r3, [r7, #20]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000194 	.word	0x20000194
 8004b10:	20000170 	.word	0x20000170
 8004b14:	20000124 	.word	0x20000124
 8004b18:	20000128 	.word	0x20000128
 8004b1c:	20000184 	.word	0x20000184
 8004b20:	2000018c 	.word	0x2000018c
 8004b24:	20000174 	.word	0x20000174
 8004b28:	20000098 	.word	0x20000098
 8004b2c:	2000017c 	.word	0x2000017c

08004b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <vTaskSwitchContext+0xa4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b3e:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b44:	e03f      	b.n	8004bc6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <vTaskSwitchContext+0xac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	f1c3 031f 	rsb	r3, r3, #31
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	491f      	ldr	r1, [pc, #124]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10a      	bne.n	8004b8c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	607b      	str	r3, [r7, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	e7fe      	b.n	8004b8a <vTaskSwitchContext+0x5a>
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <vTaskSwitchContext+0xb0>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3308      	adds	r3, #8
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d104      	bne.n	8004bbc <vTaskSwitchContext+0x8c>
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	; (8004be4 <vTaskSwitchContext+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000194 	.word	0x20000194
 8004bd8:	20000180 	.word	0x20000180
 8004bdc:	20000174 	.word	0x20000174
 8004be0:	20000098 	.word	0x20000098
 8004be4:	20000094 	.word	0x20000094

08004be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <vTaskPlaceOnEventList+0x44>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3318      	adds	r3, #24
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe ffb9 	bl	8003b8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	6838      	ldr	r0, [r7, #0]
 8004c20:	f000 fa6c 	bl	80050fc <prvAddCurrentTaskToDelayedList>
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000094 	.word	0x20000094

08004c30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10a      	bne.n	8004c58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	617b      	str	r3, [r7, #20]
}
 8004c54:	bf00      	nop
 8004c56:	e7fe      	b.n	8004c56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7fe ff70 	bl	8003b46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	68b8      	ldr	r0, [r7, #8]
 8004c76:	f000 fa41 	bl	80050fc <prvAddCurrentTaskToDelayedList>
	}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000094 	.word	0x20000094

08004c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60fb      	str	r3, [r7, #12]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe ffa1 	bl	8003c00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <xTaskRemoveFromEventList+0xac>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d11c      	bne.n	8004d00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe ff98 	bl	8003c00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <xTaskRemoveFromEventList+0xb0>)
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <xTaskRemoveFromEventList+0xb4>)
 8004cf0:	441a      	add	r2, r3
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe ff24 	bl	8003b46 <vListInsertEnd>
 8004cfe:	e005      	b.n	8004d0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3318      	adds	r3, #24
 8004d04:	4619      	mov	r1, r3
 8004d06:	480e      	ldr	r0, [pc, #56]	; (8004d40 <xTaskRemoveFromEventList+0xb8>)
 8004d08:	f7fe ff1d 	bl	8003b46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <xTaskRemoveFromEventList+0xbc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d905      	bls.n	8004d26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <xTaskRemoveFromEventList+0xc0>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e001      	b.n	8004d2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d2a:	697b      	ldr	r3, [r7, #20]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	20000194 	.word	0x20000194
 8004d38:	20000174 	.word	0x20000174
 8004d3c:	20000098 	.word	0x20000098
 8004d40:	2000012c 	.word	0x2000012c
 8004d44:	20000094 	.word	0x20000094
 8004d48:	20000180 	.word	0x20000180

08004d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d54:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <vTaskInternalSetTimeOutState+0x24>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <vTaskInternalSetTimeOutState+0x28>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	20000184 	.word	0x20000184
 8004d74:	20000170 	.word	0x20000170

08004d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10a      	bne.n	8004d9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
}
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004dba:	f000 fe43 	bl	8005a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <xTaskCheckForTimeOut+0xbc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d102      	bne.n	8004dde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	e023      	b.n	8004e26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <xTaskCheckForTimeOut+0xc0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d007      	beq.n	8004dfa <xTaskCheckForTimeOut+0x82>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d302      	bcc.n	8004dfa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004df4:	2301      	movs	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	e015      	b.n	8004e26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d20b      	bcs.n	8004e1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1ad2      	subs	r2, r2, r3
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff ff9b 	bl	8004d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e004      	b.n	8004e26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e26:	f000 fe3d 	bl	8005aa4 <vPortExitCritical>

	return xReturn;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	20000170 	.word	0x20000170
 8004e38:	20000184 	.word	0x20000184

08004e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <vTaskMissedYield+0x14>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000180 	.word	0x20000180

08004e54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e5c:	f000 f84c 	bl	8004ef8 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8004e60:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <prvIdleTask+0x20>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e70:	e7f4      	b.n	8004e5c <prvIdleTask+0x8>
 8004e72:	bf00      	nop
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7e:	2300      	movs	r3, #0
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	e00c      	b.n	8004e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <prvInitialiseTaskLists+0x60>)
 8004e90:	4413      	add	r3, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fe fe2a 	bl	8003aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d9ef      	bls.n	8004e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ea4:	480d      	ldr	r0, [pc, #52]	; (8004edc <prvInitialiseTaskLists+0x64>)
 8004ea6:	f7fe fe21 	bl	8003aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004eaa:	480d      	ldr	r0, [pc, #52]	; (8004ee0 <prvInitialiseTaskLists+0x68>)
 8004eac:	f7fe fe1e 	bl	8003aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004eb0:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <prvInitialiseTaskLists+0x6c>)
 8004eb2:	f7fe fe1b 	bl	8003aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004eb6:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <prvInitialiseTaskLists+0x70>)
 8004eb8:	f7fe fe18 	bl	8003aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ebc:	480b      	ldr	r0, [pc, #44]	; (8004eec <prvInitialiseTaskLists+0x74>)
 8004ebe:	f7fe fe15 	bl	8003aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <prvInitialiseTaskLists+0x78>)
 8004ec4:	4a05      	ldr	r2, [pc, #20]	; (8004edc <prvInitialiseTaskLists+0x64>)
 8004ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ec8:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <prvInitialiseTaskLists+0x7c>)
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <prvInitialiseTaskLists+0x68>)
 8004ecc:	601a      	str	r2, [r3, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000098 	.word	0x20000098
 8004edc:	200000fc 	.word	0x200000fc
 8004ee0:	20000110 	.word	0x20000110
 8004ee4:	2000012c 	.word	0x2000012c
 8004ee8:	20000140 	.word	0x20000140
 8004eec:	20000158 	.word	0x20000158
 8004ef0:	20000124 	.word	0x20000124
 8004ef4:	20000128 	.word	0x20000128

08004ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efe:	e019      	b.n	8004f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f00:	f000 fda0 	bl	8005a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f04:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <prvCheckTasksWaitingTermination+0x50>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe fe75 	bl	8003c00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f16:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <prvCheckTasksWaitingTermination+0x54>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <prvCheckTasksWaitingTermination+0x54>)
 8004f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f2a:	f000 fdbb 	bl	8005aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f810 	bl	8004f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <prvCheckTasksWaitingTermination+0x58>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e1      	bne.n	8004f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000140 	.word	0x20000140
 8004f4c:	2000016c 	.word	0x2000016c
 8004f50:	20000154 	.word	0x20000154

08004f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 ff55 	bl	8005e10 <vPortFree>
			vPortFree( pxTCB );
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 ff52 	bl	8005e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <prvResetNextTaskUnblockTime+0x38>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d104      	bne.n	8004f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f86:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f8c:	e008      	b.n	8004fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <prvResetNextTaskUnblockTime+0x38>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f9e:	6013      	str	r3, [r2, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000124 	.word	0x20000124
 8004fb0:	2000018c 	.word	0x2000018c

08004fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <xTaskGetSchedulerState+0x34>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d102      	bne.n	8004fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	e008      	b.n	8004fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc8:	4b08      	ldr	r3, [pc, #32]	; (8004fec <xTaskGetSchedulerState+0x38>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	607b      	str	r3, [r7, #4]
 8004fd4:	e001      	b.n	8004fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fda:	687b      	ldr	r3, [r7, #4]
	}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	20000178 	.word	0x20000178
 8004fec:	20000194 	.word	0x20000194

08004ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d06e      	beq.n	80050e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005006:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <xTaskPriorityDisinherit+0x100>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	429a      	cmp	r2, r3
 800500e:	d00a      	beq.n	8005026 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	60bb      	str	r3, [r7, #8]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	1e5a      	subs	r2, r3, #1
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	429a      	cmp	r2, r3
 8005058:	d044      	beq.n	80050e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d140      	bne.n	80050e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3304      	adds	r3, #4
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fdca 	bl	8003c00 <uxListRemove>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d115      	bne.n	800509e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	491f      	ldr	r1, [pc, #124]	; (80050f4 <xTaskPriorityDisinherit+0x104>)
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xTaskPriorityDisinherit+0xae>
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2201      	movs	r2, #1
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <xTaskPriorityDisinherit+0x108>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4013      	ands	r3, r2
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <xTaskPriorityDisinherit+0x108>)
 800509c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f1c3 0205 	rsb	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	2201      	movs	r2, #1
 80050b8:	409a      	lsls	r2, r3
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskPriorityDisinherit+0x108>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4313      	orrs	r3, r2
 80050c0:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <xTaskPriorityDisinherit+0x108>)
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <xTaskPriorityDisinherit+0x104>)
 80050d2:	441a      	add	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fe fd33 	bl	8003b46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050e4:	697b      	ldr	r3, [r7, #20]
	}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000094 	.word	0x20000094
 80050f4:	20000098 	.word	0x20000098
 80050f8:	20000174 	.word	0x20000174

080050fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005106:	4b29      	ldr	r3, [pc, #164]	; (80051ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800510c:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fd74 	bl	8003c00 <uxListRemove>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10b      	bne.n	8005136 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43da      	mvns	r2, r3
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4013      	ands	r3, r2
 8005132:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005134:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513c:	d10a      	bne.n	8005154 <prvAddCurrentTaskToDelayedList+0x58>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005144:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3304      	adds	r3, #4
 800514a:	4619      	mov	r1, r3
 800514c:	481a      	ldr	r0, [pc, #104]	; (80051b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800514e:	f7fe fcfa 	bl	8003b46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005152:	e026      	b.n	80051a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	429a      	cmp	r2, r3
 800516a:	d209      	bcs.n	8005180 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3304      	adds	r3, #4
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f7fe fd08 	bl	8003b8e <vListInsert>
}
 800517e:	e010      	b.n	80051a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005180:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe fcfe 	bl	8003b8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005192:	4b0c      	ldr	r3, [pc, #48]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	429a      	cmp	r2, r3
 800519a:	d202      	bcs.n	80051a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800519c:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6013      	str	r3, [r2, #0]
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000170 	.word	0x20000170
 80051b0:	20000094 	.word	0x20000094
 80051b4:	20000174 	.word	0x20000174
 80051b8:	20000158 	.word	0x20000158
 80051bc:	20000128 	.word	0x20000128
 80051c0:	20000124 	.word	0x20000124
 80051c4:	2000018c 	.word	0x2000018c

080051c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051d2:	f000 fad5 	bl	8005780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <xTimerCreateTimerTask+0x54>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00b      	beq.n	80051f6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <xTimerCreateTimerTask+0x58>)
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	2302      	movs	r3, #2
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051ec:	490d      	ldr	r1, [pc, #52]	; (8005224 <xTimerCreateTimerTask+0x5c>)
 80051ee:	480e      	ldr	r0, [pc, #56]	; (8005228 <xTimerCreateTimerTask+0x60>)
 80051f0:	f7ff f9aa 	bl	8004548 <xTaskCreate>
 80051f4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	603b      	str	r3, [r7, #0]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8005212:	687b      	ldr	r3, [r7, #4]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	200001c8 	.word	0x200001c8
 8005220:	200001cc 	.word	0x200001cc
 8005224:	08006954 	.word	0x08006954
 8005228:	08005361 	.word	0x08005361

0800522c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	623b      	str	r3, [r7, #32]
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <xTimerGenericCommand+0x98>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02a      	beq.n	80052b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b05      	cmp	r3, #5
 8005272:	dc18      	bgt.n	80052a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005274:	f7ff fe9e 	bl	8004fb4 <xTaskGetSchedulerState>
 8005278:	4603      	mov	r3, r0
 800527a:	2b02      	cmp	r3, #2
 800527c:	d109      	bne.n	8005292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <xTimerGenericCommand+0x98>)
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f107 0114 	add.w	r1, r7, #20
 8005286:	2300      	movs	r3, #0
 8005288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528a:	f7fe fd9d 	bl	8003dc8 <xQueueGenericSend>
 800528e:	6278      	str	r0, [r7, #36]	; 0x24
 8005290:	e012      	b.n	80052b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <xTimerGenericCommand+0x98>)
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	f107 0114 	add.w	r1, r7, #20
 800529a:	2300      	movs	r3, #0
 800529c:	2200      	movs	r2, #0
 800529e:	f7fe fd93 	bl	8003dc8 <xQueueGenericSend>
 80052a2:	6278      	str	r0, [r7, #36]	; 0x24
 80052a4:	e008      	b.n	80052b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <xTimerGenericCommand+0x98>)
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	f107 0114 	add.w	r1, r7, #20
 80052ae:	2300      	movs	r3, #0
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	f7fe fe6f 	bl	8003f94 <xQueueGenericSendFromISR>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3728      	adds	r7, #40	; 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200001c8 	.word	0x200001c8

080052c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d2:	4b22      	ldr	r3, [pc, #136]	; (800535c <prvProcessExpiredTimer+0x94>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3304      	adds	r3, #4
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe fc8d 	bl	8003c00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d022      	beq.n	800533a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	18d1      	adds	r1, r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	6978      	ldr	r0, [r7, #20]
 8005302:	f000 f8d1 	bl	80054a8 <prvInsertTimerInActiveList>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01f      	beq.n	800534c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800530c:	2300      	movs	r3, #0
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2300      	movs	r3, #0
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	2100      	movs	r1, #0
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff ff88 	bl	800522c <xTimerGenericCommand>
 800531c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d113      	bne.n	800534c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	b2da      	uxtb	r2, r3
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	4798      	blx	r3
}
 8005354:	bf00      	nop
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	200001c0 	.word	0x200001c0

08005360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f857 	bl	8005420 <prvGetNextExpireTime>
 8005372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4619      	mov	r1, r3
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f803 	bl	8005384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800537e:	f000 f8d5 	bl	800552c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005382:	e7f1      	b.n	8005368 <prvTimerTask+0x8>

08005384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800538e:	f7ff fa8d 	bl	80048ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f866 	bl	8005468 <prvSampleTimeNow>
 800539c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d130      	bne.n	8005406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <prvProcessTimerOrBlockTask+0x3c>
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d806      	bhi.n	80053c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053b2:	f7ff fa89 	bl	80048c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053b6:	68f9      	ldr	r1, [r7, #12]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ff85 	bl	80052c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053be:	e024      	b.n	800540a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d008      	beq.n	80053d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053c6:	4b13      	ldr	r3, [pc, #76]	; (8005414 <prvProcessTimerOrBlockTask+0x90>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <prvProcessTimerOrBlockTask+0x50>
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <prvProcessTimerOrBlockTask+0x52>
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053d8:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <prvProcessTimerOrBlockTask+0x94>)
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	4619      	mov	r1, r3
 80053e6:	f7ff f87b 	bl	80044e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053ea:	f7ff fa6d 	bl	80048c8 <xTaskResumeAll>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <prvProcessTimerOrBlockTask+0x98>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
}
 8005404:	e001      	b.n	800540a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005406:	f7ff fa5f 	bl	80048c8 <xTaskResumeAll>
}
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200001c4 	.word	0x200001c4
 8005418:	200001c8 	.word	0x200001c8
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <prvGetNextExpireTime+0x44>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <prvGetNextExpireTime+0x16>
 8005432:	2201      	movs	r2, #1
 8005434:	e000      	b.n	8005438 <prvGetNextExpireTime+0x18>
 8005436:	2200      	movs	r2, #0
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <prvGetNextExpireTime+0x44>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	e001      	b.n	8005454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005454:	68fb      	ldr	r3, [r7, #12]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	200001c0 	.word	0x200001c0

08005468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005470:	f7ff fab8 	bl	80049e4 <xTaskGetTickCount>
 8005474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <prvSampleTimeNow+0x3c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	429a      	cmp	r2, r3
 800547e:	d205      	bcs.n	800548c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005480:	f000 f91a 	bl	80056b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e002      	b.n	8005492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005492:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <prvSampleTimeNow+0x3c>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005498:	68fb      	ldr	r3, [r7, #12]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	200001d0 	.word	0x200001d0

080054a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d812      	bhi.n	80054f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	1ad2      	subs	r2, r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054dc:	2301      	movs	r3, #1
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e01b      	b.n	800551a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <prvInsertTimerInActiveList+0x7c>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f7fe fb4e 	bl	8003b8e <vListInsert>
 80054f2:	e012      	b.n	800551a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d206      	bcs.n	800550a <prvInsertTimerInActiveList+0x62>
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005504:	2301      	movs	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e007      	b.n	800551a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <prvInsertTimerInActiveList+0x80>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7fe fb3a 	bl	8003b8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800551a:	697b      	ldr	r3, [r7, #20]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200001c4 	.word	0x200001c4
 8005528:	200001c0 	.word	0x200001c0

0800552c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005532:	e0ae      	b.n	8005692 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	f2c0 80aa 	blt.w	8005690 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d004      	beq.n	8005552 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fb57 	bl	8003c00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005552:	1d3b      	adds	r3, r7, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff87 	bl	8005468 <prvSampleTimeNow>
 800555a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b09      	cmp	r3, #9
 8005560:	f200 8097 	bhi.w	8005692 <prvProcessReceivedCommands+0x166>
 8005564:	a201      	add	r2, pc, #4	; (adr r2, 800556c <prvProcessReceivedCommands+0x40>)
 8005566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556a:	bf00      	nop
 800556c:	08005595 	.word	0x08005595
 8005570:	08005595 	.word	0x08005595
 8005574:	08005595 	.word	0x08005595
 8005578:	08005609 	.word	0x08005609
 800557c:	0800561d 	.word	0x0800561d
 8005580:	08005667 	.word	0x08005667
 8005584:	08005595 	.word	0x08005595
 8005588:	08005595 	.word	0x08005595
 800558c:	08005609 	.word	0x08005609
 8005590:	0800561d 	.word	0x0800561d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	18d1      	adds	r1, r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055b4:	f7ff ff78 	bl	80054a8 <prvInsertTimerInActiveList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d069      	beq.n	8005692 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05e      	beq.n	8005692 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	441a      	add	r2, r3
 80055dc:	2300      	movs	r3, #0
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	2300      	movs	r3, #0
 80055e2:	2100      	movs	r1, #0
 80055e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055e6:	f7ff fe21 	bl	800522c <xTimerGenericCommand>
 80055ea:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d14f      	bne.n	8005692 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	61bb      	str	r3, [r7, #24]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800560e:	f023 0301 	bic.w	r3, r3, #1
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800561a:	e03a      	b.n	8005692 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	617b      	str	r3, [r7, #20]
}
 800564e:	bf00      	nop
 8005650:	e7fe      	b.n	8005650 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	18d1      	adds	r1, r2, r3
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005660:	f7ff ff22 	bl	80054a8 <prvInsertTimerInActiveList>
					break;
 8005664:	e015      	b.n	8005692 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005676:	f000 fbcb 	bl	8005e10 <vPortFree>
 800567a:	e00a      	b.n	8005692 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800568e:	e000      	b.n	8005692 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005692:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <prvProcessReceivedCommands+0x188>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f107 0108 	add.w	r1, r7, #8
 800569a:	2200      	movs	r2, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe fd11 	bl	80040c4 <xQueueReceive>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f47f af45 	bne.w	8005534 <prvProcessReceivedCommands+0x8>
	}
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200001c8 	.word	0x200001c8

080056b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056be:	e048      	b.n	8005752 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056c0:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <prvSwitchTimerLists+0xc0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <prvSwitchTimerLists+0xc0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe fa91 	bl	8003c00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d02e      	beq.n	8005752 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4413      	add	r3, r2
 80056fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d90e      	bls.n	8005724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005712:	4b19      	ldr	r3, [pc, #100]	; (8005778 <prvSwitchTimerLists+0xc0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f7fe fa36 	bl	8003b8e <vListInsert>
 8005722:	e016      	b.n	8005752 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005724:	2300      	movs	r3, #0
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	2300      	movs	r3, #0
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	2100      	movs	r1, #0
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fd7c 	bl	800522c <xTimerGenericCommand>
 8005734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	603b      	str	r3, [r7, #0]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <prvSwitchTimerLists+0xc0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1b1      	bne.n	80056c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <prvSwitchTimerLists+0xc0>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <prvSwitchTimerLists+0xc4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a04      	ldr	r2, [pc, #16]	; (8005778 <prvSwitchTimerLists+0xc0>)
 8005768:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800576a:	4a04      	ldr	r2, [pc, #16]	; (800577c <prvSwitchTimerLists+0xc4>)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	6013      	str	r3, [r2, #0]
}
 8005770:	bf00      	nop
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	200001c0 	.word	0x200001c0
 800577c:	200001c4 	.word	0x200001c4

08005780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005784:	f000 f95e 	bl	8005a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005788:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <prvCheckForValidListAndQueue+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11d      	bne.n	80057cc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005790:	4811      	ldr	r0, [pc, #68]	; (80057d8 <prvCheckForValidListAndQueue+0x58>)
 8005792:	f7fe f9ab 	bl	8003aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005796:	4811      	ldr	r0, [pc, #68]	; (80057dc <prvCheckForValidListAndQueue+0x5c>)
 8005798:	f7fe f9a8 	bl	8003aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <prvCheckForValidListAndQueue+0x60>)
 800579e:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <prvCheckForValidListAndQueue+0x58>)
 80057a0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057a2:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <prvCheckForValidListAndQueue+0x64>)
 80057a4:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <prvCheckForValidListAndQueue+0x5c>)
 80057a6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80057a8:	2200      	movs	r2, #0
 80057aa:	210c      	movs	r1, #12
 80057ac:	200a      	movs	r0, #10
 80057ae:	f7fe faac 	bl	8003d0a <xQueueGenericCreate>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <prvCheckForValidListAndQueue+0x54>)
 80057b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057b8:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <prvCheckForValidListAndQueue+0x54>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <prvCheckForValidListAndQueue+0x54>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4908      	ldr	r1, [pc, #32]	; (80057e8 <prvCheckForValidListAndQueue+0x68>)
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fe fe60 	bl	800448c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057cc:	f000 f96a 	bl	8005aa4 <vPortExitCritical>
}
 80057d0:	bf00      	nop
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	200001c8 	.word	0x200001c8
 80057d8:	20000198 	.word	0x20000198
 80057dc:	200001ac 	.word	0x200001ac
 80057e0:	200001c0 	.word	0x200001c0
 80057e4:	200001c4 	.word	0x200001c4
 80057e8:	0800695c 	.word	0x0800695c

080057ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b04      	subs	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b04      	subs	r3, #4
 800580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3b04      	subs	r3, #4
 800581a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800581c:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <pxPortInitialiseStack+0x64>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3b14      	subs	r3, #20
 8005826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3b04      	subs	r3, #4
 8005832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f06f 0202 	mvn.w	r2, #2
 800583a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3b20      	subs	r3, #32
 8005840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005842:	68fb      	ldr	r3, [r7, #12]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	08005855 	.word	0x08005855

08005854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <prvTaskExitError+0x54>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d00a      	beq.n	800587e <prvTaskExitError+0x2a>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	60fb      	str	r3, [r7, #12]
}
 800587a:	bf00      	nop
 800587c:	e7fe      	b.n	800587c <prvTaskExitError+0x28>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	60bb      	str	r3, [r7, #8]
}
 8005890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005892:	bf00      	nop
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0fc      	beq.n	8005894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800589a:	bf00      	nop
 800589c:	bf00      	nop
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	00000000 	.word	0x00000000

080058b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	4770      	bx	lr
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst2>:
 80058d0:	20000094 	.word	0x20000094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058d8:	4808      	ldr	r0, [pc, #32]	; (80058fc <prvPortStartFirstTask+0x24>)
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f380 8808 	msr	MSP, r0
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8814 	msr	CONTROL, r0
 80058ea:	b662      	cpsie	i
 80058ec:	b661      	cpsie	f
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	df00      	svc	0
 80058f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058fa:	bf00      	nop
 80058fc:	e000ed08 	.word	0xe000ed08

08005900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005906:	4b46      	ldr	r3, [pc, #280]	; (8005a20 <xPortStartScheduler+0x120>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a46      	ldr	r2, [pc, #280]	; (8005a24 <xPortStartScheduler+0x124>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10a      	bne.n	8005926 <xPortStartScheduler+0x26>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005926:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <xPortStartScheduler+0x120>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <xPortStartScheduler+0x128>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d10a      	bne.n	8005946 <xPortStartScheduler+0x46>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <xPortStartScheduler+0x12c>)
 8005948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	22ff      	movs	r2, #255	; 0xff
 8005956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005968:	b2da      	uxtb	r2, r3
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <xPortStartScheduler+0x130>)
 800596c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <xPortStartScheduler+0x134>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005974:	e009      	b.n	800598a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005976:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <xPortStartScheduler+0x134>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3b01      	subs	r3, #1
 800597c:	4a2d      	ldr	r2, [pc, #180]	; (8005a34 <xPortStartScheduler+0x134>)
 800597e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b80      	cmp	r3, #128	; 0x80
 8005994:	d0ef      	beq.n	8005976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <xPortStartScheduler+0x134>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1c3 0307 	rsb	r3, r3, #7
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d00a      	beq.n	80059b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60bb      	str	r3, [r7, #8]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059b8:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <xPortStartScheduler+0x134>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <xPortStartScheduler+0x134>)
 80059c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <xPortStartScheduler+0x134>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ca:	4a1a      	ldr	r2, [pc, #104]	; (8005a34 <xPortStartScheduler+0x134>)
 80059cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059d6:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <xPortStartScheduler+0x138>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <xPortStartScheduler+0x138>)
 80059dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059e2:	4b15      	ldr	r3, [pc, #84]	; (8005a38 <xPortStartScheduler+0x138>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a14      	ldr	r2, [pc, #80]	; (8005a38 <xPortStartScheduler+0x138>)
 80059e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059ee:	f000 f8dd 	bl	8005bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059f2:	4b12      	ldr	r3, [pc, #72]	; (8005a3c <xPortStartScheduler+0x13c>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059f8:	f000 f8fc 	bl	8005bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <xPortStartScheduler+0x140>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0f      	ldr	r2, [pc, #60]	; (8005a40 <xPortStartScheduler+0x140>)
 8005a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a08:	f7ff ff66 	bl	80058d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a0c:	f7ff f890 	bl	8004b30 <vTaskSwitchContext>
	prvTaskExitError();
 8005a10:	f7ff ff20 	bl	8005854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	e000ed00 	.word	0xe000ed00
 8005a24:	410fc271 	.word	0x410fc271
 8005a28:	410fc270 	.word	0x410fc270
 8005a2c:	e000e400 	.word	0xe000e400
 8005a30:	200001d4 	.word	0x200001d4
 8005a34:	200001d8 	.word	0x200001d8
 8005a38:	e000ed20 	.word	0xe000ed20
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	e000ef34 	.word	0xe000ef34

08005a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a68:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <vPortEnterCritical+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10f      	bne.n	8005a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <vPortEnterCritical+0x5c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	603b      	str	r3, [r7, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	e7fe      	b.n	8005a8e <vPortEnterCritical+0x4a>
	}
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aaa:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <vPortExitCritical+0x50>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10a      	bne.n	8005ac8 <vPortExitCritical+0x24>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
}
 8005ac4:	bf00      	nop
 8005ac6:	e7fe      	b.n	8005ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <vPortExitCritical+0x50>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a09      	ldr	r2, [pc, #36]	; (8005af4 <vPortExitCritical+0x50>)
 8005ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ad2:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <vPortExitCritical+0x50>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <vPortExitCritical+0x42>
 8005ada:	2300      	movs	r3, #0
 8005adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f383 8811 	msr	BASEPRI, r3
}
 8005ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000000c 	.word	0x2000000c
	...

08005b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b00:	f3ef 8009 	mrs	r0, PSP
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <pxCurrentTCBConst>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f01e 0f10 	tst.w	lr, #16
 8005b10:	bf08      	it	eq
 8005b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b24:	f380 8811 	msr	BASEPRI, r0
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f7fe fffe 	bl	8004b30 <vTaskSwitchContext>
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	bc09      	pop	{r0, r3}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b46:	f01e 0f10 	tst.w	lr, #16
 8005b4a:	bf08      	it	eq
 8005b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b50:	f380 8809 	msr	PSP, r0
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst>:
 8005b60:	20000094 	.word	0x20000094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b82:	f7fe ff3f 	bl	8004a04 <xTaskIncrementTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <SysTick_Handler+0x40>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
}
 8005b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <vPortSetupTimerInterrupt+0x38>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <vPortSetupTimerInterrupt+0x3c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	; (8005bec <vPortSetupTimerInterrupt+0x40>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	4a09      	ldr	r2, [pc, #36]	; (8005bf0 <vPortSetupTimerInterrupt+0x44>)
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bce:	4b04      	ldr	r3, [pc, #16]	; (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010
 8005be4:	e000e018 	.word	0xe000e018
 8005be8:	20000000 	.word	0x20000000
 8005bec:	10624dd3 	.word	0x10624dd3
 8005bf0:	e000e014 	.word	0xe000e014

08005bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c04 <vPortEnableVFP+0x10>
 8005bf8:	6801      	ldr	r1, [r0, #0]
 8005bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bfe:	6001      	str	r1, [r0, #0]
 8005c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c02:	bf00      	nop
 8005c04:	e000ed88 	.word	0xe000ed88

08005c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c0e:	f3ef 8305 	mrs	r3, IPSR
 8005c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d914      	bls.n	8005c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c1a:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <vPortValidateInterruptPriority+0x70>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c24:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <vPortValidateInterruptPriority+0x74>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	7afa      	ldrb	r2, [r7, #11]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20a      	bcs.n	8005c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <vPortValidateInterruptPriority+0x78>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <vPortValidateInterruptPriority+0x7c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d90a      	bls.n	8005c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	603b      	str	r3, [r7, #0]
}
 8005c66:	bf00      	nop
 8005c68:	e7fe      	b.n	8005c68 <vPortValidateInterruptPriority+0x60>
	}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000e3f0 	.word	0xe000e3f0
 8005c7c:	200001d4 	.word	0x200001d4
 8005c80:	e000ed0c 	.word	0xe000ed0c
 8005c84:	200001d8 	.word	0x200001d8

08005c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	; 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c94:	f7fe fe0a 	bl	80048ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c98:	4b58      	ldr	r3, [pc, #352]	; (8005dfc <pvPortMalloc+0x174>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca0:	f000 f910 	bl	8005ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca4:	4b56      	ldr	r3, [pc, #344]	; (8005e00 <pvPortMalloc+0x178>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 808e 	bne.w	8005dce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d01d      	beq.n	8005cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005cb8:	2208      	movs	r2, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d014      	beq.n	8005cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	617b      	str	r3, [r7, #20]
}
 8005cf0:	bf00      	nop
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d069      	beq.n	8005dce <pvPortMalloc+0x146>
 8005cfa:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <pvPortMalloc+0x17c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d864      	bhi.n	8005dce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <pvPortMalloc+0x180>)
 8005d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d08:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <pvPortMalloc+0x180>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d0e:	e004      	b.n	8005d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d903      	bls.n	8005d2c <pvPortMalloc+0xa4>
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f1      	bne.n	8005d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d2c:	4b33      	ldr	r3, [pc, #204]	; (8005dfc <pvPortMalloc+0x174>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d04b      	beq.n	8005dce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	4413      	add	r3, r2
 8005d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	2308      	movs	r3, #8
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d91f      	bls.n	8005d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <pvPortMalloc+0xf8>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	613b      	str	r3, [r7, #16]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d92:	69b8      	ldr	r0, [r7, #24]
 8005d94:	f000 f8f8 	bl	8005f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d98:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <pvPortMalloc+0x17c>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <pvPortMalloc+0x17c>)
 8005da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005da6:	4b17      	ldr	r3, [pc, #92]	; (8005e04 <pvPortMalloc+0x17c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <pvPortMalloc+0x184>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d203      	bcs.n	8005dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <pvPortMalloc+0x17c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <pvPortMalloc+0x184>)
 8005db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <pvPortMalloc+0x178>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dce:	f7fe fd7b 	bl	80048c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <pvPortMalloc+0x16a>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60fb      	str	r3, [r7, #12]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <pvPortMalloc+0x168>
	return pvReturn;
 8005df2:	69fb      	ldr	r3, [r7, #28]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	; 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	20012de4 	.word	0x20012de4
 8005e00:	20012df0 	.word	0x20012df0
 8005e04:	20012de8 	.word	0x20012de8
 8005e08:	20012ddc 	.word	0x20012ddc
 8005e0c:	20012dec 	.word	0x20012dec

08005e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d048      	beq.n	8005eb4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e22:	2308      	movs	r3, #8
 8005e24:	425b      	negs	r3, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	4b21      	ldr	r3, [pc, #132]	; (8005ebc <vPortFree+0xac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <vPortFree+0x44>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00a      	beq.n	8005e72 <vPortFree+0x62>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60bb      	str	r3, [r7, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <vPortFree+0xac>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d019      	beq.n	8005eb4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d115      	bne.n	8005eb4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	4b0b      	ldr	r3, [pc, #44]	; (8005ebc <vPortFree+0xac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	401a      	ands	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e98:	f7fe fd08 	bl	80048ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <vPortFree+0xb0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	4a06      	ldr	r2, [pc, #24]	; (8005ec0 <vPortFree+0xb0>)
 8005ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f000 f86c 	bl	8005f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005eb0:	f7fe fd0a 	bl	80048c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eb4:	bf00      	nop
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20012df0 	.word	0x20012df0
 8005ec0:	20012de8 	.word	0x20012de8

08005ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eca:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ed0:	4b27      	ldr	r3, [pc, #156]	; (8005f70 <prvHeapInit+0xac>)
 8005ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00c      	beq.n	8005ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3307      	adds	r3, #7
 8005ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a1f      	ldr	r2, [pc, #124]	; (8005f70 <prvHeapInit+0xac>)
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <prvHeapInit+0xb0>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f02:	4b1c      	ldr	r3, [pc, #112]	; (8005f74 <prvHeapInit+0xb0>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f10:	2208      	movs	r2, #8
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0307 	bic.w	r3, r3, #7
 8005f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <prvHeapInit+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f26:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <prvHeapInit+0xb4>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	; (8005f78 <prvHeapInit+0xb4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	1ad2      	subs	r2, r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f44:	4b0c      	ldr	r3, [pc, #48]	; (8005f78 <prvHeapInit+0xb4>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <prvHeapInit+0xb8>)
 8005f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	4a09      	ldr	r2, [pc, #36]	; (8005f80 <prvHeapInit+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f5c:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <prvHeapInit+0xc0>)
 8005f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f62:	601a      	str	r2, [r3, #0]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	200001dc 	.word	0x200001dc
 8005f74:	20012ddc 	.word	0x20012ddc
 8005f78:	20012de4 	.word	0x20012de4
 8005f7c:	20012dec 	.word	0x20012dec
 8005f80:	20012de8 	.word	0x20012de8
 8005f84:	20012df0 	.word	0x20012df0

08005f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f90:	4b28      	ldr	r3, [pc, #160]	; (8006034 <prvInsertBlockIntoFreeList+0xac>)
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e002      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x14>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8f7      	bhi.n	8005f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d108      	bne.n	8005fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d118      	bne.n	8006010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d00d      	beq.n	8006006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	441a      	add	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e008      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <prvInsertBlockIntoFreeList+0xb0>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e003      	b.n	8006018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d002      	beq.n	8006026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20012ddc 	.word	0x20012ddc
 8006038:	20012de4 	.word	0x20012de4

0800603c <__errno>:
 800603c:	4b01      	ldr	r3, [pc, #4]	; (8006044 <__errno+0x8>)
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4d0d      	ldr	r5, [pc, #52]	; (8006080 <__libc_init_array+0x38>)
 800604c:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	2600      	movs	r6, #0
 8006054:	42a6      	cmp	r6, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	4d0b      	ldr	r5, [pc, #44]	; (8006088 <__libc_init_array+0x40>)
 800605a:	4c0c      	ldr	r4, [pc, #48]	; (800608c <__libc_init_array+0x44>)
 800605c:	f000 fc4e 	bl	80068fc <_init>
 8006060:	1b64      	subs	r4, r4, r5
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	2600      	movs	r6, #0
 8006066:	42a6      	cmp	r6, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006070:	4798      	blx	r3
 8006072:	3601      	adds	r6, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f855 3b04 	ldr.w	r3, [r5], #4
 800607a:	4798      	blx	r3
 800607c:	3601      	adds	r6, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	080069c0 	.word	0x080069c0
 8006084:	080069c0 	.word	0x080069c0
 8006088:	080069c0 	.word	0x080069c0
 800608c:	080069c4 	.word	0x080069c4

08006090 <memcpy>:
 8006090:	440a      	add	r2, r1
 8006092:	4291      	cmp	r1, r2
 8006094:	f100 33ff 	add.w	r3, r0, #4294967295
 8006098:	d100      	bne.n	800609c <memcpy+0xc>
 800609a:	4770      	bx	lr
 800609c:	b510      	push	{r4, lr}
 800609e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a6:	4291      	cmp	r1, r2
 80060a8:	d1f9      	bne.n	800609e <memcpy+0xe>
 80060aa:	bd10      	pop	{r4, pc}

080060ac <memset>:
 80060ac:	4402      	add	r2, r0
 80060ae:	4603      	mov	r3, r0
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d100      	bne.n	80060b6 <memset+0xa>
 80060b4:	4770      	bx	lr
 80060b6:	f803 1b01 	strb.w	r1, [r3], #1
 80060ba:	e7f9      	b.n	80060b0 <memset+0x4>

080060bc <siprintf>:
 80060bc:	b40e      	push	{r1, r2, r3}
 80060be:	b500      	push	{lr}
 80060c0:	b09c      	sub	sp, #112	; 0x70
 80060c2:	ab1d      	add	r3, sp, #116	; 0x74
 80060c4:	9002      	str	r0, [sp, #8]
 80060c6:	9006      	str	r0, [sp, #24]
 80060c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060cc:	4809      	ldr	r0, [pc, #36]	; (80060f4 <siprintf+0x38>)
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	9104      	str	r1, [sp, #16]
 80060d2:	4909      	ldr	r1, [pc, #36]	; (80060f8 <siprintf+0x3c>)
 80060d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d8:	9105      	str	r1, [sp, #20]
 80060da:	6800      	ldr	r0, [r0, #0]
 80060dc:	9301      	str	r3, [sp, #4]
 80060de:	a902      	add	r1, sp, #8
 80060e0:	f000 f868 	bl	80061b4 <_svfiprintf_r>
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	b01c      	add	sp, #112	; 0x70
 80060ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f0:	b003      	add	sp, #12
 80060f2:	4770      	bx	lr
 80060f4:	20000010 	.word	0x20000010
 80060f8:	ffff0208 	.word	0xffff0208

080060fc <__ssputs_r>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	688e      	ldr	r6, [r1, #8]
 8006102:	429e      	cmp	r6, r3
 8006104:	4682      	mov	sl, r0
 8006106:	460c      	mov	r4, r1
 8006108:	4690      	mov	r8, r2
 800610a:	461f      	mov	r7, r3
 800610c:	d838      	bhi.n	8006180 <__ssputs_r+0x84>
 800610e:	898a      	ldrh	r2, [r1, #12]
 8006110:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006114:	d032      	beq.n	800617c <__ssputs_r+0x80>
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	6909      	ldr	r1, [r1, #16]
 800611a:	eba5 0901 	sub.w	r9, r5, r1
 800611e:	6965      	ldr	r5, [r4, #20]
 8006120:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006124:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006128:	3301      	adds	r3, #1
 800612a:	444b      	add	r3, r9
 800612c:	106d      	asrs	r5, r5, #1
 800612e:	429d      	cmp	r5, r3
 8006130:	bf38      	it	cc
 8006132:	461d      	movcc	r5, r3
 8006134:	0553      	lsls	r3, r2, #21
 8006136:	d531      	bpl.n	800619c <__ssputs_r+0xa0>
 8006138:	4629      	mov	r1, r5
 800613a:	f000 fb39 	bl	80067b0 <_malloc_r>
 800613e:	4606      	mov	r6, r0
 8006140:	b950      	cbnz	r0, 8006158 <__ssputs_r+0x5c>
 8006142:	230c      	movs	r3, #12
 8006144:	f8ca 3000 	str.w	r3, [sl]
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006158:	6921      	ldr	r1, [r4, #16]
 800615a:	464a      	mov	r2, r9
 800615c:	f7ff ff98 	bl	8006090 <memcpy>
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	6126      	str	r6, [r4, #16]
 800616e:	6165      	str	r5, [r4, #20]
 8006170:	444e      	add	r6, r9
 8006172:	eba5 0509 	sub.w	r5, r5, r9
 8006176:	6026      	str	r6, [r4, #0]
 8006178:	60a5      	str	r5, [r4, #8]
 800617a:	463e      	mov	r6, r7
 800617c:	42be      	cmp	r6, r7
 800617e:	d900      	bls.n	8006182 <__ssputs_r+0x86>
 8006180:	463e      	mov	r6, r7
 8006182:	4632      	mov	r2, r6
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	4641      	mov	r1, r8
 8006188:	f000 faa8 	bl	80066dc <memmove>
 800618c:	68a3      	ldr	r3, [r4, #8]
 800618e:	6822      	ldr	r2, [r4, #0]
 8006190:	1b9b      	subs	r3, r3, r6
 8006192:	4432      	add	r2, r6
 8006194:	60a3      	str	r3, [r4, #8]
 8006196:	6022      	str	r2, [r4, #0]
 8006198:	2000      	movs	r0, #0
 800619a:	e7db      	b.n	8006154 <__ssputs_r+0x58>
 800619c:	462a      	mov	r2, r5
 800619e:	f000 fb61 	bl	8006864 <_realloc_r>
 80061a2:	4606      	mov	r6, r0
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d1e1      	bne.n	800616c <__ssputs_r+0x70>
 80061a8:	6921      	ldr	r1, [r4, #16]
 80061aa:	4650      	mov	r0, sl
 80061ac:	f000 fab0 	bl	8006710 <_free_r>
 80061b0:	e7c7      	b.n	8006142 <__ssputs_r+0x46>
	...

080061b4 <_svfiprintf_r>:
 80061b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b8:	4698      	mov	r8, r3
 80061ba:	898b      	ldrh	r3, [r1, #12]
 80061bc:	061b      	lsls	r3, r3, #24
 80061be:	b09d      	sub	sp, #116	; 0x74
 80061c0:	4607      	mov	r7, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	4614      	mov	r4, r2
 80061c6:	d50e      	bpl.n	80061e6 <_svfiprintf_r+0x32>
 80061c8:	690b      	ldr	r3, [r1, #16]
 80061ca:	b963      	cbnz	r3, 80061e6 <_svfiprintf_r+0x32>
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	f000 faef 	bl	80067b0 <_malloc_r>
 80061d2:	6028      	str	r0, [r5, #0]
 80061d4:	6128      	str	r0, [r5, #16]
 80061d6:	b920      	cbnz	r0, 80061e2 <_svfiprintf_r+0x2e>
 80061d8:	230c      	movs	r3, #12
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e0d1      	b.n	8006386 <_svfiprintf_r+0x1d2>
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	616b      	str	r3, [r5, #20]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ea:	2320      	movs	r3, #32
 80061ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061f4:	2330      	movs	r3, #48	; 0x30
 80061f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063a0 <_svfiprintf_r+0x1ec>
 80061fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061fe:	f04f 0901 	mov.w	r9, #1
 8006202:	4623      	mov	r3, r4
 8006204:	469a      	mov	sl, r3
 8006206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620a:	b10a      	cbz	r2, 8006210 <_svfiprintf_r+0x5c>
 800620c:	2a25      	cmp	r2, #37	; 0x25
 800620e:	d1f9      	bne.n	8006204 <_svfiprintf_r+0x50>
 8006210:	ebba 0b04 	subs.w	fp, sl, r4
 8006214:	d00b      	beq.n	800622e <_svfiprintf_r+0x7a>
 8006216:	465b      	mov	r3, fp
 8006218:	4622      	mov	r2, r4
 800621a:	4629      	mov	r1, r5
 800621c:	4638      	mov	r0, r7
 800621e:	f7ff ff6d 	bl	80060fc <__ssputs_r>
 8006222:	3001      	adds	r0, #1
 8006224:	f000 80aa 	beq.w	800637c <_svfiprintf_r+0x1c8>
 8006228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622a:	445a      	add	r2, fp
 800622c:	9209      	str	r2, [sp, #36]	; 0x24
 800622e:	f89a 3000 	ldrb.w	r3, [sl]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80a2 	beq.w	800637c <_svfiprintf_r+0x1c8>
 8006238:	2300      	movs	r3, #0
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006242:	f10a 0a01 	add.w	sl, sl, #1
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	9307      	str	r3, [sp, #28]
 800624a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800624e:	931a      	str	r3, [sp, #104]	; 0x68
 8006250:	4654      	mov	r4, sl
 8006252:	2205      	movs	r2, #5
 8006254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006258:	4851      	ldr	r0, [pc, #324]	; (80063a0 <_svfiprintf_r+0x1ec>)
 800625a:	f7f9 ffc1 	bl	80001e0 <memchr>
 800625e:	9a04      	ldr	r2, [sp, #16]
 8006260:	b9d8      	cbnz	r0, 800629a <_svfiprintf_r+0xe6>
 8006262:	06d0      	lsls	r0, r2, #27
 8006264:	bf44      	itt	mi
 8006266:	2320      	movmi	r3, #32
 8006268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800626c:	0711      	lsls	r1, r2, #28
 800626e:	bf44      	itt	mi
 8006270:	232b      	movmi	r3, #43	; 0x2b
 8006272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006276:	f89a 3000 	ldrb.w	r3, [sl]
 800627a:	2b2a      	cmp	r3, #42	; 0x2a
 800627c:	d015      	beq.n	80062aa <_svfiprintf_r+0xf6>
 800627e:	9a07      	ldr	r2, [sp, #28]
 8006280:	4654      	mov	r4, sl
 8006282:	2000      	movs	r0, #0
 8006284:	f04f 0c0a 	mov.w	ip, #10
 8006288:	4621      	mov	r1, r4
 800628a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800628e:	3b30      	subs	r3, #48	; 0x30
 8006290:	2b09      	cmp	r3, #9
 8006292:	d94e      	bls.n	8006332 <_svfiprintf_r+0x17e>
 8006294:	b1b0      	cbz	r0, 80062c4 <_svfiprintf_r+0x110>
 8006296:	9207      	str	r2, [sp, #28]
 8006298:	e014      	b.n	80062c4 <_svfiprintf_r+0x110>
 800629a:	eba0 0308 	sub.w	r3, r0, r8
 800629e:	fa09 f303 	lsl.w	r3, r9, r3
 80062a2:	4313      	orrs	r3, r2
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	46a2      	mov	sl, r4
 80062a8:	e7d2      	b.n	8006250 <_svfiprintf_r+0x9c>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	1d19      	adds	r1, r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	9103      	str	r1, [sp, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bfbb      	ittet	lt
 80062b6:	425b      	neglt	r3, r3
 80062b8:	f042 0202 	orrlt.w	r2, r2, #2
 80062bc:	9307      	strge	r3, [sp, #28]
 80062be:	9307      	strlt	r3, [sp, #28]
 80062c0:	bfb8      	it	lt
 80062c2:	9204      	strlt	r2, [sp, #16]
 80062c4:	7823      	ldrb	r3, [r4, #0]
 80062c6:	2b2e      	cmp	r3, #46	; 0x2e
 80062c8:	d10c      	bne.n	80062e4 <_svfiprintf_r+0x130>
 80062ca:	7863      	ldrb	r3, [r4, #1]
 80062cc:	2b2a      	cmp	r3, #42	; 0x2a
 80062ce:	d135      	bne.n	800633c <_svfiprintf_r+0x188>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	1d1a      	adds	r2, r3, #4
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	9203      	str	r2, [sp, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bfb8      	it	lt
 80062dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80062e0:	3402      	adds	r4, #2
 80062e2:	9305      	str	r3, [sp, #20]
 80062e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80063b0 <_svfiprintf_r+0x1fc>
 80062e8:	7821      	ldrb	r1, [r4, #0]
 80062ea:	2203      	movs	r2, #3
 80062ec:	4650      	mov	r0, sl
 80062ee:	f7f9 ff77 	bl	80001e0 <memchr>
 80062f2:	b140      	cbz	r0, 8006306 <_svfiprintf_r+0x152>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	eba0 000a 	sub.w	r0, r0, sl
 80062fa:	fa03 f000 	lsl.w	r0, r3, r0
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	4303      	orrs	r3, r0
 8006302:	3401      	adds	r4, #1
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630a:	4826      	ldr	r0, [pc, #152]	; (80063a4 <_svfiprintf_r+0x1f0>)
 800630c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006310:	2206      	movs	r2, #6
 8006312:	f7f9 ff65 	bl	80001e0 <memchr>
 8006316:	2800      	cmp	r0, #0
 8006318:	d038      	beq.n	800638c <_svfiprintf_r+0x1d8>
 800631a:	4b23      	ldr	r3, [pc, #140]	; (80063a8 <_svfiprintf_r+0x1f4>)
 800631c:	bb1b      	cbnz	r3, 8006366 <_svfiprintf_r+0x1b2>
 800631e:	9b03      	ldr	r3, [sp, #12]
 8006320:	3307      	adds	r3, #7
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	3308      	adds	r3, #8
 8006328:	9303      	str	r3, [sp, #12]
 800632a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800632c:	4433      	add	r3, r6
 800632e:	9309      	str	r3, [sp, #36]	; 0x24
 8006330:	e767      	b.n	8006202 <_svfiprintf_r+0x4e>
 8006332:	fb0c 3202 	mla	r2, ip, r2, r3
 8006336:	460c      	mov	r4, r1
 8006338:	2001      	movs	r0, #1
 800633a:	e7a5      	b.n	8006288 <_svfiprintf_r+0xd4>
 800633c:	2300      	movs	r3, #0
 800633e:	3401      	adds	r4, #1
 8006340:	9305      	str	r3, [sp, #20]
 8006342:	4619      	mov	r1, r3
 8006344:	f04f 0c0a 	mov.w	ip, #10
 8006348:	4620      	mov	r0, r4
 800634a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800634e:	3a30      	subs	r2, #48	; 0x30
 8006350:	2a09      	cmp	r2, #9
 8006352:	d903      	bls.n	800635c <_svfiprintf_r+0x1a8>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0c5      	beq.n	80062e4 <_svfiprintf_r+0x130>
 8006358:	9105      	str	r1, [sp, #20]
 800635a:	e7c3      	b.n	80062e4 <_svfiprintf_r+0x130>
 800635c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006360:	4604      	mov	r4, r0
 8006362:	2301      	movs	r3, #1
 8006364:	e7f0      	b.n	8006348 <_svfiprintf_r+0x194>
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	462a      	mov	r2, r5
 800636c:	4b0f      	ldr	r3, [pc, #60]	; (80063ac <_svfiprintf_r+0x1f8>)
 800636e:	a904      	add	r1, sp, #16
 8006370:	4638      	mov	r0, r7
 8006372:	f3af 8000 	nop.w
 8006376:	1c42      	adds	r2, r0, #1
 8006378:	4606      	mov	r6, r0
 800637a:	d1d6      	bne.n	800632a <_svfiprintf_r+0x176>
 800637c:	89ab      	ldrh	r3, [r5, #12]
 800637e:	065b      	lsls	r3, r3, #25
 8006380:	f53f af2c 	bmi.w	80061dc <_svfiprintf_r+0x28>
 8006384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006386:	b01d      	add	sp, #116	; 0x74
 8006388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638c:	ab03      	add	r3, sp, #12
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	462a      	mov	r2, r5
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <_svfiprintf_r+0x1f8>)
 8006394:	a904      	add	r1, sp, #16
 8006396:	4638      	mov	r0, r7
 8006398:	f000 f87a 	bl	8006490 <_printf_i>
 800639c:	e7eb      	b.n	8006376 <_svfiprintf_r+0x1c2>
 800639e:	bf00      	nop
 80063a0:	08006984 	.word	0x08006984
 80063a4:	0800698e 	.word	0x0800698e
 80063a8:	00000000 	.word	0x00000000
 80063ac:	080060fd 	.word	0x080060fd
 80063b0:	0800698a 	.word	0x0800698a

080063b4 <_printf_common>:
 80063b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	4616      	mov	r6, r2
 80063ba:	4699      	mov	r9, r3
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	690b      	ldr	r3, [r1, #16]
 80063c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	bfb8      	it	lt
 80063c8:	4613      	movlt	r3, r2
 80063ca:	6033      	str	r3, [r6, #0]
 80063cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d0:	4607      	mov	r7, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	b10a      	cbz	r2, 80063da <_printf_common+0x26>
 80063d6:	3301      	adds	r3, #1
 80063d8:	6033      	str	r3, [r6, #0]
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0699      	lsls	r1, r3, #26
 80063de:	bf42      	ittt	mi
 80063e0:	6833      	ldrmi	r3, [r6, #0]
 80063e2:	3302      	addmi	r3, #2
 80063e4:	6033      	strmi	r3, [r6, #0]
 80063e6:	6825      	ldr	r5, [r4, #0]
 80063e8:	f015 0506 	ands.w	r5, r5, #6
 80063ec:	d106      	bne.n	80063fc <_printf_common+0x48>
 80063ee:	f104 0a19 	add.w	sl, r4, #25
 80063f2:	68e3      	ldr	r3, [r4, #12]
 80063f4:	6832      	ldr	r2, [r6, #0]
 80063f6:	1a9b      	subs	r3, r3, r2
 80063f8:	42ab      	cmp	r3, r5
 80063fa:	dc26      	bgt.n	800644a <_printf_common+0x96>
 80063fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006400:	1e13      	subs	r3, r2, #0
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	2301      	movne	r3, #1
 8006408:	0692      	lsls	r2, r2, #26
 800640a:	d42b      	bmi.n	8006464 <_printf_common+0xb0>
 800640c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006410:	4649      	mov	r1, r9
 8006412:	4638      	mov	r0, r7
 8006414:	47c0      	blx	r8
 8006416:	3001      	adds	r0, #1
 8006418:	d01e      	beq.n	8006458 <_printf_common+0xa4>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	68e5      	ldr	r5, [r4, #12]
 800641e:	6832      	ldr	r2, [r6, #0]
 8006420:	f003 0306 	and.w	r3, r3, #6
 8006424:	2b04      	cmp	r3, #4
 8006426:	bf08      	it	eq
 8006428:	1aad      	subeq	r5, r5, r2
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	6922      	ldr	r2, [r4, #16]
 800642e:	bf0c      	ite	eq
 8006430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006434:	2500      	movne	r5, #0
 8006436:	4293      	cmp	r3, r2
 8006438:	bfc4      	itt	gt
 800643a:	1a9b      	subgt	r3, r3, r2
 800643c:	18ed      	addgt	r5, r5, r3
 800643e:	2600      	movs	r6, #0
 8006440:	341a      	adds	r4, #26
 8006442:	42b5      	cmp	r5, r6
 8006444:	d11a      	bne.n	800647c <_printf_common+0xc8>
 8006446:	2000      	movs	r0, #0
 8006448:	e008      	b.n	800645c <_printf_common+0xa8>
 800644a:	2301      	movs	r3, #1
 800644c:	4652      	mov	r2, sl
 800644e:	4649      	mov	r1, r9
 8006450:	4638      	mov	r0, r7
 8006452:	47c0      	blx	r8
 8006454:	3001      	adds	r0, #1
 8006456:	d103      	bne.n	8006460 <_printf_common+0xac>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006460:	3501      	adds	r5, #1
 8006462:	e7c6      	b.n	80063f2 <_printf_common+0x3e>
 8006464:	18e1      	adds	r1, r4, r3
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	2030      	movs	r0, #48	; 0x30
 800646a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800646e:	4422      	add	r2, r4
 8006470:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006474:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006478:	3302      	adds	r3, #2
 800647a:	e7c7      	b.n	800640c <_printf_common+0x58>
 800647c:	2301      	movs	r3, #1
 800647e:	4622      	mov	r2, r4
 8006480:	4649      	mov	r1, r9
 8006482:	4638      	mov	r0, r7
 8006484:	47c0      	blx	r8
 8006486:	3001      	adds	r0, #1
 8006488:	d0e6      	beq.n	8006458 <_printf_common+0xa4>
 800648a:	3601      	adds	r6, #1
 800648c:	e7d9      	b.n	8006442 <_printf_common+0x8e>
	...

08006490 <_printf_i>:
 8006490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	4691      	mov	r9, r2
 8006498:	7e27      	ldrb	r7, [r4, #24]
 800649a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800649c:	2f78      	cmp	r7, #120	; 0x78
 800649e:	4680      	mov	r8, r0
 80064a0:	469a      	mov	sl, r3
 80064a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064a6:	d807      	bhi.n	80064b8 <_printf_i+0x28>
 80064a8:	2f62      	cmp	r7, #98	; 0x62
 80064aa:	d80a      	bhi.n	80064c2 <_printf_i+0x32>
 80064ac:	2f00      	cmp	r7, #0
 80064ae:	f000 80d8 	beq.w	8006662 <_printf_i+0x1d2>
 80064b2:	2f58      	cmp	r7, #88	; 0x58
 80064b4:	f000 80a3 	beq.w	80065fe <_printf_i+0x16e>
 80064b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c0:	e03a      	b.n	8006538 <_printf_i+0xa8>
 80064c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064c6:	2b15      	cmp	r3, #21
 80064c8:	d8f6      	bhi.n	80064b8 <_printf_i+0x28>
 80064ca:	a001      	add	r0, pc, #4	; (adr r0, 80064d0 <_printf_i+0x40>)
 80064cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80064d0:	08006529 	.word	0x08006529
 80064d4:	0800653d 	.word	0x0800653d
 80064d8:	080064b9 	.word	0x080064b9
 80064dc:	080064b9 	.word	0x080064b9
 80064e0:	080064b9 	.word	0x080064b9
 80064e4:	080064b9 	.word	0x080064b9
 80064e8:	0800653d 	.word	0x0800653d
 80064ec:	080064b9 	.word	0x080064b9
 80064f0:	080064b9 	.word	0x080064b9
 80064f4:	080064b9 	.word	0x080064b9
 80064f8:	080064b9 	.word	0x080064b9
 80064fc:	08006649 	.word	0x08006649
 8006500:	0800656d 	.word	0x0800656d
 8006504:	0800662b 	.word	0x0800662b
 8006508:	080064b9 	.word	0x080064b9
 800650c:	080064b9 	.word	0x080064b9
 8006510:	0800666b 	.word	0x0800666b
 8006514:	080064b9 	.word	0x080064b9
 8006518:	0800656d 	.word	0x0800656d
 800651c:	080064b9 	.word	0x080064b9
 8006520:	080064b9 	.word	0x080064b9
 8006524:	08006633 	.word	0x08006633
 8006528:	680b      	ldr	r3, [r1, #0]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	600a      	str	r2, [r1, #0]
 8006530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006538:	2301      	movs	r3, #1
 800653a:	e0a3      	b.n	8006684 <_printf_i+0x1f4>
 800653c:	6825      	ldr	r5, [r4, #0]
 800653e:	6808      	ldr	r0, [r1, #0]
 8006540:	062e      	lsls	r6, r5, #24
 8006542:	f100 0304 	add.w	r3, r0, #4
 8006546:	d50a      	bpl.n	800655e <_printf_i+0xce>
 8006548:	6805      	ldr	r5, [r0, #0]
 800654a:	600b      	str	r3, [r1, #0]
 800654c:	2d00      	cmp	r5, #0
 800654e:	da03      	bge.n	8006558 <_printf_i+0xc8>
 8006550:	232d      	movs	r3, #45	; 0x2d
 8006552:	426d      	negs	r5, r5
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006558:	485e      	ldr	r0, [pc, #376]	; (80066d4 <_printf_i+0x244>)
 800655a:	230a      	movs	r3, #10
 800655c:	e019      	b.n	8006592 <_printf_i+0x102>
 800655e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006562:	6805      	ldr	r5, [r0, #0]
 8006564:	600b      	str	r3, [r1, #0]
 8006566:	bf18      	it	ne
 8006568:	b22d      	sxthne	r5, r5
 800656a:	e7ef      	b.n	800654c <_printf_i+0xbc>
 800656c:	680b      	ldr	r3, [r1, #0]
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	1d18      	adds	r0, r3, #4
 8006572:	6008      	str	r0, [r1, #0]
 8006574:	0628      	lsls	r0, r5, #24
 8006576:	d501      	bpl.n	800657c <_printf_i+0xec>
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	e002      	b.n	8006582 <_printf_i+0xf2>
 800657c:	0669      	lsls	r1, r5, #25
 800657e:	d5fb      	bpl.n	8006578 <_printf_i+0xe8>
 8006580:	881d      	ldrh	r5, [r3, #0]
 8006582:	4854      	ldr	r0, [pc, #336]	; (80066d4 <_printf_i+0x244>)
 8006584:	2f6f      	cmp	r7, #111	; 0x6f
 8006586:	bf0c      	ite	eq
 8006588:	2308      	moveq	r3, #8
 800658a:	230a      	movne	r3, #10
 800658c:	2100      	movs	r1, #0
 800658e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006592:	6866      	ldr	r6, [r4, #4]
 8006594:	60a6      	str	r6, [r4, #8]
 8006596:	2e00      	cmp	r6, #0
 8006598:	bfa2      	ittt	ge
 800659a:	6821      	ldrge	r1, [r4, #0]
 800659c:	f021 0104 	bicge.w	r1, r1, #4
 80065a0:	6021      	strge	r1, [r4, #0]
 80065a2:	b90d      	cbnz	r5, 80065a8 <_printf_i+0x118>
 80065a4:	2e00      	cmp	r6, #0
 80065a6:	d04d      	beq.n	8006644 <_printf_i+0x1b4>
 80065a8:	4616      	mov	r6, r2
 80065aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80065ae:	fb03 5711 	mls	r7, r3, r1, r5
 80065b2:	5dc7      	ldrb	r7, [r0, r7]
 80065b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065b8:	462f      	mov	r7, r5
 80065ba:	42bb      	cmp	r3, r7
 80065bc:	460d      	mov	r5, r1
 80065be:	d9f4      	bls.n	80065aa <_printf_i+0x11a>
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d10b      	bne.n	80065dc <_printf_i+0x14c>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	07df      	lsls	r7, r3, #31
 80065c8:	d508      	bpl.n	80065dc <_printf_i+0x14c>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6861      	ldr	r1, [r4, #4]
 80065ce:	4299      	cmp	r1, r3
 80065d0:	bfde      	ittt	le
 80065d2:	2330      	movle	r3, #48	; 0x30
 80065d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065dc:	1b92      	subs	r2, r2, r6
 80065de:	6122      	str	r2, [r4, #16]
 80065e0:	f8cd a000 	str.w	sl, [sp]
 80065e4:	464b      	mov	r3, r9
 80065e6:	aa03      	add	r2, sp, #12
 80065e8:	4621      	mov	r1, r4
 80065ea:	4640      	mov	r0, r8
 80065ec:	f7ff fee2 	bl	80063b4 <_printf_common>
 80065f0:	3001      	adds	r0, #1
 80065f2:	d14c      	bne.n	800668e <_printf_i+0x1fe>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	b004      	add	sp, #16
 80065fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fe:	4835      	ldr	r0, [pc, #212]	; (80066d4 <_printf_i+0x244>)
 8006600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	680e      	ldr	r6, [r1, #0]
 8006608:	061f      	lsls	r7, r3, #24
 800660a:	f856 5b04 	ldr.w	r5, [r6], #4
 800660e:	600e      	str	r6, [r1, #0]
 8006610:	d514      	bpl.n	800663c <_printf_i+0x1ac>
 8006612:	07d9      	lsls	r1, r3, #31
 8006614:	bf44      	itt	mi
 8006616:	f043 0320 	orrmi.w	r3, r3, #32
 800661a:	6023      	strmi	r3, [r4, #0]
 800661c:	b91d      	cbnz	r5, 8006626 <_printf_i+0x196>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	f023 0320 	bic.w	r3, r3, #32
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	2310      	movs	r3, #16
 8006628:	e7b0      	b.n	800658c <_printf_i+0xfc>
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	f043 0320 	orr.w	r3, r3, #32
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	2378      	movs	r3, #120	; 0x78
 8006634:	4828      	ldr	r0, [pc, #160]	; (80066d8 <_printf_i+0x248>)
 8006636:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800663a:	e7e3      	b.n	8006604 <_printf_i+0x174>
 800663c:	065e      	lsls	r6, r3, #25
 800663e:	bf48      	it	mi
 8006640:	b2ad      	uxthmi	r5, r5
 8006642:	e7e6      	b.n	8006612 <_printf_i+0x182>
 8006644:	4616      	mov	r6, r2
 8006646:	e7bb      	b.n	80065c0 <_printf_i+0x130>
 8006648:	680b      	ldr	r3, [r1, #0]
 800664a:	6826      	ldr	r6, [r4, #0]
 800664c:	6960      	ldr	r0, [r4, #20]
 800664e:	1d1d      	adds	r5, r3, #4
 8006650:	600d      	str	r5, [r1, #0]
 8006652:	0635      	lsls	r5, r6, #24
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	d501      	bpl.n	800665c <_printf_i+0x1cc>
 8006658:	6018      	str	r0, [r3, #0]
 800665a:	e002      	b.n	8006662 <_printf_i+0x1d2>
 800665c:	0671      	lsls	r1, r6, #25
 800665e:	d5fb      	bpl.n	8006658 <_printf_i+0x1c8>
 8006660:	8018      	strh	r0, [r3, #0]
 8006662:	2300      	movs	r3, #0
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	4616      	mov	r6, r2
 8006668:	e7ba      	b.n	80065e0 <_printf_i+0x150>
 800666a:	680b      	ldr	r3, [r1, #0]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	600a      	str	r2, [r1, #0]
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	2100      	movs	r1, #0
 8006676:	4630      	mov	r0, r6
 8006678:	f7f9 fdb2 	bl	80001e0 <memchr>
 800667c:	b108      	cbz	r0, 8006682 <_printf_i+0x1f2>
 800667e:	1b80      	subs	r0, r0, r6
 8006680:	6060      	str	r0, [r4, #4]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	2300      	movs	r3, #0
 8006688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800668c:	e7a8      	b.n	80065e0 <_printf_i+0x150>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d0ab      	beq.n	80065f4 <_printf_i+0x164>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	079b      	lsls	r3, r3, #30
 80066a0:	d413      	bmi.n	80066ca <_printf_i+0x23a>
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	4298      	cmp	r0, r3
 80066a8:	bfb8      	it	lt
 80066aa:	4618      	movlt	r0, r3
 80066ac:	e7a4      	b.n	80065f8 <_printf_i+0x168>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4632      	mov	r2, r6
 80066b2:	4649      	mov	r1, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	47d0      	blx	sl
 80066b8:	3001      	adds	r0, #1
 80066ba:	d09b      	beq.n	80065f4 <_printf_i+0x164>
 80066bc:	3501      	adds	r5, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	9903      	ldr	r1, [sp, #12]
 80066c2:	1a5b      	subs	r3, r3, r1
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dcf2      	bgt.n	80066ae <_printf_i+0x21e>
 80066c8:	e7eb      	b.n	80066a2 <_printf_i+0x212>
 80066ca:	2500      	movs	r5, #0
 80066cc:	f104 0619 	add.w	r6, r4, #25
 80066d0:	e7f5      	b.n	80066be <_printf_i+0x22e>
 80066d2:	bf00      	nop
 80066d4:	08006995 	.word	0x08006995
 80066d8:	080069a6 	.word	0x080069a6

080066dc <memmove>:
 80066dc:	4288      	cmp	r0, r1
 80066de:	b510      	push	{r4, lr}
 80066e0:	eb01 0402 	add.w	r4, r1, r2
 80066e4:	d902      	bls.n	80066ec <memmove+0x10>
 80066e6:	4284      	cmp	r4, r0
 80066e8:	4623      	mov	r3, r4
 80066ea:	d807      	bhi.n	80066fc <memmove+0x20>
 80066ec:	1e43      	subs	r3, r0, #1
 80066ee:	42a1      	cmp	r1, r4
 80066f0:	d008      	beq.n	8006704 <memmove+0x28>
 80066f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066fa:	e7f8      	b.n	80066ee <memmove+0x12>
 80066fc:	4402      	add	r2, r0
 80066fe:	4601      	mov	r1, r0
 8006700:	428a      	cmp	r2, r1
 8006702:	d100      	bne.n	8006706 <memmove+0x2a>
 8006704:	bd10      	pop	{r4, pc}
 8006706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800670a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670e:	e7f7      	b.n	8006700 <memmove+0x24>

08006710 <_free_r>:
 8006710:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006712:	2900      	cmp	r1, #0
 8006714:	d048      	beq.n	80067a8 <_free_r+0x98>
 8006716:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800671a:	9001      	str	r0, [sp, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f1a1 0404 	sub.w	r4, r1, #4
 8006722:	bfb8      	it	lt
 8006724:	18e4      	addlt	r4, r4, r3
 8006726:	f000 f8d3 	bl	80068d0 <__malloc_lock>
 800672a:	4a20      	ldr	r2, [pc, #128]	; (80067ac <_free_r+0x9c>)
 800672c:	9801      	ldr	r0, [sp, #4]
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	4615      	mov	r5, r2
 8006732:	b933      	cbnz	r3, 8006742 <_free_r+0x32>
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6014      	str	r4, [r2, #0]
 8006738:	b003      	add	sp, #12
 800673a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800673e:	f000 b8cd 	b.w	80068dc <__malloc_unlock>
 8006742:	42a3      	cmp	r3, r4
 8006744:	d90b      	bls.n	800675e <_free_r+0x4e>
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	1862      	adds	r2, r4, r1
 800674a:	4293      	cmp	r3, r2
 800674c:	bf04      	itt	eq
 800674e:	681a      	ldreq	r2, [r3, #0]
 8006750:	685b      	ldreq	r3, [r3, #4]
 8006752:	6063      	str	r3, [r4, #4]
 8006754:	bf04      	itt	eq
 8006756:	1852      	addeq	r2, r2, r1
 8006758:	6022      	streq	r2, [r4, #0]
 800675a:	602c      	str	r4, [r5, #0]
 800675c:	e7ec      	b.n	8006738 <_free_r+0x28>
 800675e:	461a      	mov	r2, r3
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b10b      	cbz	r3, 8006768 <_free_r+0x58>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d9fa      	bls.n	800675e <_free_r+0x4e>
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	1855      	adds	r5, r2, r1
 800676c:	42a5      	cmp	r5, r4
 800676e:	d10b      	bne.n	8006788 <_free_r+0x78>
 8006770:	6824      	ldr	r4, [r4, #0]
 8006772:	4421      	add	r1, r4
 8006774:	1854      	adds	r4, r2, r1
 8006776:	42a3      	cmp	r3, r4
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	d1dd      	bne.n	8006738 <_free_r+0x28>
 800677c:	681c      	ldr	r4, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	4421      	add	r1, r4
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	e7d7      	b.n	8006738 <_free_r+0x28>
 8006788:	d902      	bls.n	8006790 <_free_r+0x80>
 800678a:	230c      	movs	r3, #12
 800678c:	6003      	str	r3, [r0, #0]
 800678e:	e7d3      	b.n	8006738 <_free_r+0x28>
 8006790:	6825      	ldr	r5, [r4, #0]
 8006792:	1961      	adds	r1, r4, r5
 8006794:	428b      	cmp	r3, r1
 8006796:	bf04      	itt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	bf04      	itt	eq
 80067a0:	1949      	addeq	r1, r1, r5
 80067a2:	6021      	streq	r1, [r4, #0]
 80067a4:	6054      	str	r4, [r2, #4]
 80067a6:	e7c7      	b.n	8006738 <_free_r+0x28>
 80067a8:	b003      	add	sp, #12
 80067aa:	bd30      	pop	{r4, r5, pc}
 80067ac:	20012df4 	.word	0x20012df4

080067b0 <_malloc_r>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	1ccd      	adds	r5, r1, #3
 80067b4:	f025 0503 	bic.w	r5, r5, #3
 80067b8:	3508      	adds	r5, #8
 80067ba:	2d0c      	cmp	r5, #12
 80067bc:	bf38      	it	cc
 80067be:	250c      	movcc	r5, #12
 80067c0:	2d00      	cmp	r5, #0
 80067c2:	4606      	mov	r6, r0
 80067c4:	db01      	blt.n	80067ca <_malloc_r+0x1a>
 80067c6:	42a9      	cmp	r1, r5
 80067c8:	d903      	bls.n	80067d2 <_malloc_r+0x22>
 80067ca:	230c      	movs	r3, #12
 80067cc:	6033      	str	r3, [r6, #0]
 80067ce:	2000      	movs	r0, #0
 80067d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d2:	f000 f87d 	bl	80068d0 <__malloc_lock>
 80067d6:	4921      	ldr	r1, [pc, #132]	; (800685c <_malloc_r+0xac>)
 80067d8:	680a      	ldr	r2, [r1, #0]
 80067da:	4614      	mov	r4, r2
 80067dc:	b99c      	cbnz	r4, 8006806 <_malloc_r+0x56>
 80067de:	4f20      	ldr	r7, [pc, #128]	; (8006860 <_malloc_r+0xb0>)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	b923      	cbnz	r3, 80067ee <_malloc_r+0x3e>
 80067e4:	4621      	mov	r1, r4
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 f862 	bl	80068b0 <_sbrk_r>
 80067ec:	6038      	str	r0, [r7, #0]
 80067ee:	4629      	mov	r1, r5
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f85d 	bl	80068b0 <_sbrk_r>
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	d123      	bne.n	8006842 <_malloc_r+0x92>
 80067fa:	230c      	movs	r3, #12
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	4630      	mov	r0, r6
 8006800:	f000 f86c 	bl	80068dc <__malloc_unlock>
 8006804:	e7e3      	b.n	80067ce <_malloc_r+0x1e>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	1b5b      	subs	r3, r3, r5
 800680a:	d417      	bmi.n	800683c <_malloc_r+0x8c>
 800680c:	2b0b      	cmp	r3, #11
 800680e:	d903      	bls.n	8006818 <_malloc_r+0x68>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	441c      	add	r4, r3
 8006814:	6025      	str	r5, [r4, #0]
 8006816:	e004      	b.n	8006822 <_malloc_r+0x72>
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	42a2      	cmp	r2, r4
 800681c:	bf0c      	ite	eq
 800681e:	600b      	streq	r3, [r1, #0]
 8006820:	6053      	strne	r3, [r2, #4]
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f85a 	bl	80068dc <__malloc_unlock>
 8006828:	f104 000b 	add.w	r0, r4, #11
 800682c:	1d23      	adds	r3, r4, #4
 800682e:	f020 0007 	bic.w	r0, r0, #7
 8006832:	1ac2      	subs	r2, r0, r3
 8006834:	d0cc      	beq.n	80067d0 <_malloc_r+0x20>
 8006836:	1a1b      	subs	r3, r3, r0
 8006838:	50a3      	str	r3, [r4, r2]
 800683a:	e7c9      	b.n	80067d0 <_malloc_r+0x20>
 800683c:	4622      	mov	r2, r4
 800683e:	6864      	ldr	r4, [r4, #4]
 8006840:	e7cc      	b.n	80067dc <_malloc_r+0x2c>
 8006842:	1cc4      	adds	r4, r0, #3
 8006844:	f024 0403 	bic.w	r4, r4, #3
 8006848:	42a0      	cmp	r0, r4
 800684a:	d0e3      	beq.n	8006814 <_malloc_r+0x64>
 800684c:	1a21      	subs	r1, r4, r0
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f82e 	bl	80068b0 <_sbrk_r>
 8006854:	3001      	adds	r0, #1
 8006856:	d1dd      	bne.n	8006814 <_malloc_r+0x64>
 8006858:	e7cf      	b.n	80067fa <_malloc_r+0x4a>
 800685a:	bf00      	nop
 800685c:	20012df4 	.word	0x20012df4
 8006860:	20012df8 	.word	0x20012df8

08006864 <_realloc_r>:
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006866:	4607      	mov	r7, r0
 8006868:	4614      	mov	r4, r2
 800686a:	460e      	mov	r6, r1
 800686c:	b921      	cbnz	r1, 8006878 <_realloc_r+0x14>
 800686e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006872:	4611      	mov	r1, r2
 8006874:	f7ff bf9c 	b.w	80067b0 <_malloc_r>
 8006878:	b922      	cbnz	r2, 8006884 <_realloc_r+0x20>
 800687a:	f7ff ff49 	bl	8006710 <_free_r>
 800687e:	4625      	mov	r5, r4
 8006880:	4628      	mov	r0, r5
 8006882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006884:	f000 f830 	bl	80068e8 <_malloc_usable_size_r>
 8006888:	42a0      	cmp	r0, r4
 800688a:	d20f      	bcs.n	80068ac <_realloc_r+0x48>
 800688c:	4621      	mov	r1, r4
 800688e:	4638      	mov	r0, r7
 8006890:	f7ff ff8e 	bl	80067b0 <_malloc_r>
 8006894:	4605      	mov	r5, r0
 8006896:	2800      	cmp	r0, #0
 8006898:	d0f2      	beq.n	8006880 <_realloc_r+0x1c>
 800689a:	4631      	mov	r1, r6
 800689c:	4622      	mov	r2, r4
 800689e:	f7ff fbf7 	bl	8006090 <memcpy>
 80068a2:	4631      	mov	r1, r6
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ff33 	bl	8006710 <_free_r>
 80068aa:	e7e9      	b.n	8006880 <_realloc_r+0x1c>
 80068ac:	4635      	mov	r5, r6
 80068ae:	e7e7      	b.n	8006880 <_realloc_r+0x1c>

080068b0 <_sbrk_r>:
 80068b0:	b538      	push	{r3, r4, r5, lr}
 80068b2:	4d06      	ldr	r5, [pc, #24]	; (80068cc <_sbrk_r+0x1c>)
 80068b4:	2300      	movs	r3, #0
 80068b6:	4604      	mov	r4, r0
 80068b8:	4608      	mov	r0, r1
 80068ba:	602b      	str	r3, [r5, #0]
 80068bc:	f7fa fbf2 	bl	80010a4 <_sbrk>
 80068c0:	1c43      	adds	r3, r0, #1
 80068c2:	d102      	bne.n	80068ca <_sbrk_r+0x1a>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	b103      	cbz	r3, 80068ca <_sbrk_r+0x1a>
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	bd38      	pop	{r3, r4, r5, pc}
 80068cc:	20012f74 	.word	0x20012f74

080068d0 <__malloc_lock>:
 80068d0:	4801      	ldr	r0, [pc, #4]	; (80068d8 <__malloc_lock+0x8>)
 80068d2:	f000 b811 	b.w	80068f8 <__retarget_lock_acquire_recursive>
 80068d6:	bf00      	nop
 80068d8:	20012f7c 	.word	0x20012f7c

080068dc <__malloc_unlock>:
 80068dc:	4801      	ldr	r0, [pc, #4]	; (80068e4 <__malloc_unlock+0x8>)
 80068de:	f000 b80c 	b.w	80068fa <__retarget_lock_release_recursive>
 80068e2:	bf00      	nop
 80068e4:	20012f7c 	.word	0x20012f7c

080068e8 <_malloc_usable_size_r>:
 80068e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ec:	1f18      	subs	r0, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfbc      	itt	lt
 80068f2:	580b      	ldrlt	r3, [r1, r0]
 80068f4:	18c0      	addlt	r0, r0, r3
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_acquire_recursive>:
 80068f8:	4770      	bx	lr

080068fa <__retarget_lock_release_recursive>:
 80068fa:	4770      	bx	lr

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
