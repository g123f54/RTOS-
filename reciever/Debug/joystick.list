
joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed4  0800aed4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aed4  0800aed4  0001aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aedc  0800aedc  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aedc  0800aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aee0  0800aee0  0001aee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800aee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          000137fc  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200139c8  200139c8  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023bc7  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a0f  00000000  00000000  00043dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  000487d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001698  00000000  00000000  0004a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000271b3  00000000  00000000  0004b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d99d  00000000  00000000  00072873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3cbd  00000000  00000000  00090210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00173ecd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006974  00000000  00000000  00173f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adfc 	.word	0x0800adfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800adfc 	.word	0x0800adfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <User_Init>:
#define KEY5_Press	(1 << 5)

tyMouse_buff tMouse_buff;

void User_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	tMouse_buff.mouse_abs_left = 0;
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <User_Init+0x48>)
 800057e:	7813      	ldrb	r3, [r2, #0]
 8000580:	f36f 0300 	bfc	r3, #0, #1
 8000584:	7013      	strb	r3, [r2, #0]
	tMouse_buff.mouse_abs_right = 0;
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <User_Init+0x48>)
 8000588:	7813      	ldrb	r3, [r2, #0]
 800058a:	f36f 0341 	bfc	r3, #1, #1
 800058e:	7013      	strb	r3, [r2, #0]
	tMouse_buff.mouse_abs_wheel = 0;
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <User_Init+0x48>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f36f 0382 	bfc	r3, #2, #1
 8000598:	7013      	strb	r3, [r2, #0]
	tMouse_buff.reserve = 0;
 800059a:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <User_Init+0x48>)
 800059c:	7813      	ldrb	r3, [r2, #0]
 800059e:	f36f 03c7 	bfc	r3, #3, #5
 80005a2:	7013      	strb	r3, [r2, #0]
	tMouse_buff.mouse_rel_x = 0;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <User_Init+0x48>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	705a      	strb	r2, [r3, #1]
	tMouse_buff.mouse_rel_y = 0;
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <User_Init+0x48>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	709a      	strb	r2, [r3, #2]
	tMouse_buff.mouse_rel_wheel = 0;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <User_Init+0x48>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	70da      	strb	r2, [r3, #3]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20012fc0 	.word	0x20012fc0

080005c4 <Get_Key_State>:
//
//	return keyState;
//}

unsigned char Get_Key_State(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	unsigned char keyState = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]

	//HAL_ADC_Start_DMA(&hadc1, joy, 2);

	 if (Rx_data[0]=='a'||Rx_data[1]=='a'||Rx_data[2]=='a'){  //up
 80005ce:	4b33      	ldr	r3, [pc, #204]	; (800069c <Get_Key_State+0xd8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b61      	cmp	r3, #97	; 0x61
 80005d4:	d007      	beq.n	80005e6 <Get_Key_State+0x22>
 80005d6:	4b31      	ldr	r3, [pc, #196]	; (800069c <Get_Key_State+0xd8>)
 80005d8:	785b      	ldrb	r3, [r3, #1]
 80005da:	2b61      	cmp	r3, #97	; 0x61
 80005dc:	d003      	beq.n	80005e6 <Get_Key_State+0x22>
 80005de:	4b2f      	ldr	r3, [pc, #188]	; (800069c <Get_Key_State+0xd8>)
 80005e0:	789b      	ldrb	r3, [r3, #2]
 80005e2:	2b61      	cmp	r3, #97	; 0x61
 80005e4:	d103      	bne.n	80005ee <Get_Key_State+0x2a>
		 keyState |= KEY2_Press;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	71fb      	strb	r3, [r7, #7]
	 }

	  if (Rx_data[0]=='b'||Rx_data[1]=='b'||Rx_data[2]=='b'){  //down
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <Get_Key_State+0xd8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b62      	cmp	r3, #98	; 0x62
 80005f4:	d007      	beq.n	8000606 <Get_Key_State+0x42>
 80005f6:	4b29      	ldr	r3, [pc, #164]	; (800069c <Get_Key_State+0xd8>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	2b62      	cmp	r3, #98	; 0x62
 80005fc:	d003      	beq.n	8000606 <Get_Key_State+0x42>
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <Get_Key_State+0xd8>)
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	2b62      	cmp	r3, #98	; 0x62
 8000604:	d103      	bne.n	800060e <Get_Key_State+0x4a>
		  keyState |= KEY0_Press;
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	71fb      	strb	r3, [r7, #7]
	  }
	  if (Rx_data[0]=='c'||Rx_data[1]=='c'||Rx_data[2]=='c'){  //right
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <Get_Key_State+0xd8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b63      	cmp	r3, #99	; 0x63
 8000614:	d007      	beq.n	8000626 <Get_Key_State+0x62>
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <Get_Key_State+0xd8>)
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	2b63      	cmp	r3, #99	; 0x63
 800061c:	d003      	beq.n	8000626 <Get_Key_State+0x62>
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <Get_Key_State+0xd8>)
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	2b63      	cmp	r3, #99	; 0x63
 8000624:	d103      	bne.n	800062e <Get_Key_State+0x6a>
		  keyState |= KEY1_Press;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	71fb      	strb	r3, [r7, #7]
	  }
	  if (Rx_data[0]=='d'||Rx_data[1]=='d'||Rx_data[2]=='d'){  //left
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <Get_Key_State+0xd8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b64      	cmp	r3, #100	; 0x64
 8000634:	d007      	beq.n	8000646 <Get_Key_State+0x82>
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <Get_Key_State+0xd8>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	2b64      	cmp	r3, #100	; 0x64
 800063c:	d003      	beq.n	8000646 <Get_Key_State+0x82>
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <Get_Key_State+0xd8>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	2b64      	cmp	r3, #100	; 0x64
 8000644:	d103      	bne.n	800064e <Get_Key_State+0x8a>
		  keyState |= KEY3_Press;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	71fb      	strb	r3, [r7, #7]
	  }
	  if (Rx_data[0]=='e'||Rx_data[1]=='e'||Rx_data[2]=='e'){  //left button
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <Get_Key_State+0xd8>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b65      	cmp	r3, #101	; 0x65
 8000654:	d007      	beq.n	8000666 <Get_Key_State+0xa2>
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <Get_Key_State+0xd8>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	2b65      	cmp	r3, #101	; 0x65
 800065c:	d003      	beq.n	8000666 <Get_Key_State+0xa2>
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <Get_Key_State+0xd8>)
 8000660:	789b      	ldrb	r3, [r3, #2]
 8000662:	2b65      	cmp	r3, #101	; 0x65
 8000664:	d103      	bne.n	800066e <Get_Key_State+0xaa>
		  keyState |= KEY4_Press;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	71fb      	strb	r3, [r7, #7]
	  }
	  if (Rx_data[0]=='f'||Rx_data[1]=='f'||Rx_data[2]=='f'){  //right button
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <Get_Key_State+0xd8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b66      	cmp	r3, #102	; 0x66
 8000674:	d007      	beq.n	8000686 <Get_Key_State+0xc2>
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <Get_Key_State+0xd8>)
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	2b66      	cmp	r3, #102	; 0x66
 800067c:	d003      	beq.n	8000686 <Get_Key_State+0xc2>
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <Get_Key_State+0xd8>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b66      	cmp	r3, #102	; 0x66
 8000684:	d103      	bne.n	800068e <Get_Key_State+0xca>
	 	  	keyState |= KEY5_Press;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f043 0320 	orr.w	r3, r3, #32
 800068c:	71fb      	strb	r3, [r7, #7]
	 }

	return keyState;
 800068e:	79fb      	ldrb	r3, [r7, #7]
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20012fbc 	.word	0x20012fbc

080006a0 <Send_mouse_msg>:
//
//	return keyState;
//}

void Send_mouse_msg(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&tMouse_buff, sizeof(tMouse_buff));
 80006a4:	2204      	movs	r2, #4
 80006a6:	4903      	ldr	r1, [pc, #12]	; (80006b4 <Send_mouse_msg+0x14>)
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <Send_mouse_msg+0x18>)
 80006aa:	f008 f93b 	bl	8008924 <USBD_HID_SendReport>
//	char MonitorTset[30];
//	memset(MonitorTset,'\0',sizeof(MonitorTset));
//	sprintf(MonitorTset,"hi\n\r");
	//HAL_UART_Transmit(&huart2,(uint8_t *)&tMouse_buff,sizeof(tMouse_buff),0xffff);
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20012fc0 	.word	0x20012fc0
 80006b8:	200130e0 	.word	0x200130e0

080006bc <mouse>:

void mouse(void *pvParameters){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if ( xSemaphoreTake(xSemaphore, 0xffff) == pdTRUE ){
 80006c4:	4b52      	ldr	r3, [pc, #328]	; (8000810 <mouse+0x154>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 fe4f 	bl	8006370 <xQueueSemaphoreTake>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	f040 808f 	bne.w	80007f8 <mouse+0x13c>
			User_Init();
 80006da:	f7ff ff4d 	bl	8000578 <User_Init>
			while ((keyState = Get_Key_State()) != 0)
 80006de:	e06f      	b.n	80007c0 <mouse+0x104>
			{
				keyStateLast = keyState;
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <mouse+0x158>)
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b4c      	ldr	r3, [pc, #304]	; (8000818 <mouse+0x15c>)
 80006e6:	701a      	strb	r2, [r3, #0]
				if (keyState & KEY0_Press)
 80006e8:	4b4a      	ldr	r3, [pc, #296]	; (8000814 <mouse+0x158>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <mouse+0x40>
				{
					tMouse_buff.mouse_rel_y = -3;
 80006f4:	4b49      	ldr	r3, [pc, #292]	; (800081c <mouse+0x160>)
 80006f6:	22fd      	movs	r2, #253	; 0xfd
 80006f8:	709a      	strb	r2, [r3, #2]
 80006fa:	e00c      	b.n	8000716 <mouse+0x5a>
				}
				else if (keyState & KEY2_Press)
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <mouse+0x158>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <mouse+0x54>
				{
					tMouse_buff.mouse_rel_y = 3;
 8000708:	4b44      	ldr	r3, [pc, #272]	; (800081c <mouse+0x160>)
 800070a:	2203      	movs	r2, #3
 800070c:	709a      	strb	r2, [r3, #2]
 800070e:	e002      	b.n	8000716 <mouse+0x5a>
				}
				else
				{
					tMouse_buff.mouse_rel_y = 0;
 8000710:	4b42      	ldr	r3, [pc, #264]	; (800081c <mouse+0x160>)
 8000712:	2200      	movs	r2, #0
 8000714:	709a      	strb	r2, [r3, #2]
				}

				if (keyState & KEY1_Press)
 8000716:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <mouse+0x158>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	2b00      	cmp	r3, #0
 8000720:	d003      	beq.n	800072a <mouse+0x6e>
				{
					tMouse_buff.mouse_rel_x = -3;
 8000722:	4b3e      	ldr	r3, [pc, #248]	; (800081c <mouse+0x160>)
 8000724:	22fd      	movs	r2, #253	; 0xfd
 8000726:	705a      	strb	r2, [r3, #1]
 8000728:	e00c      	b.n	8000744 <mouse+0x88>
				}
				else if (keyState & KEY3_Press)
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <mouse+0x158>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	2b00      	cmp	r3, #0
 8000734:	d003      	beq.n	800073e <mouse+0x82>
				{
					tMouse_buff.mouse_rel_x = 3;
 8000736:	4b39      	ldr	r3, [pc, #228]	; (800081c <mouse+0x160>)
 8000738:	2203      	movs	r2, #3
 800073a:	705a      	strb	r2, [r3, #1]
 800073c:	e002      	b.n	8000744 <mouse+0x88>
				}
				else
				{
					tMouse_buff.mouse_rel_x = 0;
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <mouse+0x160>)
 8000740:	2200      	movs	r2, #0
 8000742:	705a      	strb	r2, [r3, #1]
				}

				if (keyState & KEY4_Press)
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <mouse+0x158>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <mouse+0xa0>
				{
					tMouse_buff.mouse_abs_left = -1;
 8000750:	4a32      	ldr	r2, [pc, #200]	; (800081c <mouse+0x160>)
 8000752:	7813      	ldrb	r3, [r2, #0]
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	7013      	strb	r3, [r2, #0]
 800075a:	e004      	b.n	8000766 <mouse+0xaa>
				}
				else
				{
					tMouse_buff.mouse_abs_left = 0;
 800075c:	4a2f      	ldr	r2, [pc, #188]	; (800081c <mouse+0x160>)
 800075e:	7813      	ldrb	r3, [r2, #0]
 8000760:	f36f 0300 	bfc	r3, #0, #1
 8000764:	7013      	strb	r3, [r2, #0]
				}
				if (keyState & KEY5_Press)
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <mouse+0x158>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f003 0320 	and.w	r3, r3, #32
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <mouse+0xc2>
				{
					tMouse_buff.mouse_abs_right = 1;
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <mouse+0x160>)
 8000774:	7813      	ldrb	r3, [r2, #0]
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	7013      	strb	r3, [r2, #0]
 800077c:	e004      	b.n	8000788 <mouse+0xcc>
				}
				else
				{
					tMouse_buff.mouse_abs_right = 0;
 800077e:	4a27      	ldr	r2, [pc, #156]	; (800081c <mouse+0x160>)
 8000780:	7813      	ldrb	r3, [r2, #0]
 8000782:	f36f 0341 	bfc	r3, #1, #1
 8000786:	7013      	strb	r3, [r2, #0]
				}
				Send_mouse_msg();
 8000788:	f7ff ff8a 	bl	80006a0 <Send_mouse_msg>
				memset(Rx_data,'\0',sizeof(Rx_data));
 800078c:	2204      	movs	r2, #4
 800078e:	2100      	movs	r1, #0
 8000790:	4823      	ldr	r0, [pc, #140]	; (8000820 <mouse+0x164>)
 8000792:	f009 ff0b 	bl	800a5ac <memset>
				vTaskDelay(1);
 8000796:	2001      	movs	r0, #1
 8000798:	f006 f9ba 	bl	8006b10 <vTaskDelay>
				tMouse_buff.mouse_rel_x = 0;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <mouse+0x160>)
 800079e:	2200      	movs	r2, #0
 80007a0:	705a      	strb	r2, [r3, #1]
				tMouse_buff.mouse_rel_y = 0;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <mouse+0x160>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	709a      	strb	r2, [r3, #2]
				tMouse_buff.mouse_abs_left = 0;
 80007a8:	4a1c      	ldr	r2, [pc, #112]	; (800081c <mouse+0x160>)
 80007aa:	7813      	ldrb	r3, [r2, #0]
 80007ac:	f36f 0300 	bfc	r3, #0, #1
 80007b0:	7013      	strb	r3, [r2, #0]
				tMouse_buff.mouse_abs_right = 0;
 80007b2:	4a1a      	ldr	r2, [pc, #104]	; (800081c <mouse+0x160>)
 80007b4:	7813      	ldrb	r3, [r2, #0]
 80007b6:	f36f 0341 	bfc	r3, #1, #1
 80007ba:	7013      	strb	r3, [r2, #0]
				Send_mouse_msg();
 80007bc:	f7ff ff70 	bl	80006a0 <Send_mouse_msg>
			while ((keyState = Get_Key_State()) != 0)
 80007c0:	f7ff ff00 	bl	80005c4 <Get_Key_State>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <mouse+0x158>)
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <mouse+0x158>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d185      	bne.n	80006e0 <mouse+0x24>


			}
			tMouse_buff.mouse_rel_x = 0;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <mouse+0x160>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	705a      	strb	r2, [r3, #1]
			tMouse_buff.mouse_rel_y = 0;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <mouse+0x160>)
 80007dc:	2200      	movs	r2, #0
 80007de:	709a      	strb	r2, [r3, #2]
			tMouse_buff.mouse_abs_left = 0;
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <mouse+0x160>)
 80007e2:	7813      	ldrb	r3, [r2, #0]
 80007e4:	f36f 0300 	bfc	r3, #0, #1
 80007e8:	7013      	strb	r3, [r2, #0]
			tMouse_buff.mouse_abs_right = 0;
 80007ea:	4a0c      	ldr	r2, [pc, #48]	; (800081c <mouse+0x160>)
 80007ec:	7813      	ldrb	r3, [r2, #0]
 80007ee:	f36f 0341 	bfc	r3, #1, #1
 80007f2:	7013      	strb	r3, [r2, #0]
			Send_mouse_msg();
 80007f4:	f7ff ff54 	bl	80006a0 <Send_mouse_msg>
		}
		xSemaphoreGive(xSemaphore);
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <mouse+0x154>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	2300      	movs	r3, #0
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	f005 fb3f 	bl	8005e84 <xQueueGenericSend>
		vTaskDelay(1);
 8000806:	2001      	movs	r0, #1
 8000808:	f006 f982 	bl	8006b10 <vTaskDelay>
		if ( xSemaphoreTake(xSemaphore, 0xffff) == pdTRUE ){
 800080c:	e75a      	b.n	80006c4 <mouse+0x8>
 800080e:	bf00      	nop
 8000810:	200001e8 	.word	0x200001e8
 8000814:	20012fc4 	.word	0x20012fc4
 8000818:	20012f70 	.word	0x20012f70
 800081c:	20012fc0 	.word	0x20012fc0
 8000820:	20012fbc 	.word	0x20012fbc

08000824 <blerec>:

		//taskYIELD();
	}
}

void blerec(void *pvParameters){
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	while(1){
		if ( xSemaphoreTake(xSemaphore, 0xffff) == pdTRUE ) {
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <blerec+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000834:	4618      	mov	r0, r3
 8000836:	f005 fd9b 	bl	8006370 <xQueueSemaphoreTake>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d11a      	bne.n	8000876 <blerec+0x52>
			int num =0;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
			User_Init();
 8000844:	f7ff fe98 	bl	8000578 <User_Init>
			memset(Rx_data,'\0',sizeof(Rx_data));
 8000848:	2204      	movs	r2, #4
 800084a:	2100      	movs	r1, #0
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <blerec+0x6c>)
 800084e:	f009 fead 	bl	800a5ac <memset>
			sprintf(Rx_data,"T\r\n");
 8000852:	4910      	ldr	r1, [pc, #64]	; (8000894 <blerec+0x70>)
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <blerec+0x6c>)
 8000856:	f009 feb1 	bl	800a5bc <siprintf>

			HAL_UART_Receive(&huart2, (uint8_t *)Rx_data, strlen(Rx_data),0xffff);
 800085a:	480d      	ldr	r0, [pc, #52]	; (8000890 <blerec+0x6c>)
 800085c:	f7ff fcb8 	bl	80001d0 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29a      	uxth	r2, r3
 8000864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000868:	4909      	ldr	r1, [pc, #36]	; (8000890 <blerec+0x6c>)
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <blerec+0x74>)
 800086c:	f003 fb3b 	bl	8003ee6 <HAL_UART_Receive>
			//vTaskDelay(10);
			//HAL_UART_Transmit(&huart3,(uint8_t *)Rx_data,strlen(Rx_data),0xffff);

//			vTaskDelay(100);
			num += 1;
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	60fb      	str	r3, [r7, #12]
//			}else{
//				Rx_data[0] = 'e';
//			}
			//taskYIELD();
		}
		xSemaphoreGive(xSemaphore);
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <blerec+0x68>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	2300      	movs	r3, #0
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	f005 fb00 	bl	8005e84 <xQueueGenericSend>
		vTaskDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f006 f943 	bl	8006b10 <vTaskDelay>
		if ( xSemaphoreTake(xSemaphore, 0xffff) == pdTRUE ) {
 800088a:	e7cf      	b.n	800082c <blerec+0x8>
 800088c:	200001e8 	.word	0x200001e8
 8000890:	20012fbc 	.word	0x20012fbc
 8000894:	0800ae14 	.word	0x0800ae14
 8000898:	20013010 	.word	0x20013010

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 fcb5 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f83d 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 f957 	bl	8000b5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008ae:	f000 f901 	bl	8000ab4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008b2:	f000 f89f 	bl	80009f4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80008b6:	f009 f9fb 	bl	8009cb0 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80008ba:	f000 f925 	bl	8000b08 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  xSemaphore=xSemaphoreCreateBinary();
 80008be:	2203      	movs	r2, #3
 80008c0:	2100      	movs	r1, #0
 80008c2:	2001      	movs	r0, #1
 80008c4:	f005 fa7e 	bl	8005dc4 <xQueueGenericCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <main+0x74>)
 80008cc:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(xSemaphore);
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x74>)
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	2300      	movs	r3, #0
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	f005 fad4 	bl	8005e84 <xQueueGenericSend>
  xTaskCreate(mouse,"mouse",4096,NULL,1,NULL);
 80008dc:	2300      	movs	r3, #0
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	2301      	movs	r3, #1
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2300      	movs	r3, #0
 80008e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008ea:	490a      	ldr	r1, [pc, #40]	; (8000914 <main+0x78>)
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <main+0x7c>)
 80008ee:	f005 ffd1 	bl	8006894 <xTaskCreate>
  xTaskCreate(blerec,"blerec",4096,NULL,1,NULL);
 80008f2:	2300      	movs	r3, #0
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2301      	movs	r3, #1
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000900:	4906      	ldr	r1, [pc, #24]	; (800091c <main+0x80>)
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <main+0x84>)
 8000904:	f005 ffc6 	bl	8006894 <xTaskCreate>

  vTaskStartScheduler();
 8000908:	f006 f936 	bl	8006b78 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x70>
 800090e:	bf00      	nop
 8000910:	200001e8 	.word	0x200001e8
 8000914:	0800ae18 	.word	0x0800ae18
 8000918:	080006bd 	.word	0x080006bd
 800091c:	0800ae20 	.word	0x0800ae20
 8000920:	08000825 	.word	0x08000825

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f009 fe3a 	bl	800a5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <SystemClock_Config+0xc8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <SystemClock_Config+0xc8>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemClock_Config+0xc8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <SystemClock_Config+0xcc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <SystemClock_Config+0xcc>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <SystemClock_Config+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000994:	2304      	movs	r3, #4
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000998:	2348      	movs	r3, #72	; 0x48
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fafb 	bl	8002fa4 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b4:	f000 fa24 	bl	8000e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2102      	movs	r1, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f002 fd5d 	bl	8003494 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e0:	f000 fa0e 	bl	8000e00 <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3750      	adds	r7, #80	; 0x50
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a08:	4a28      	ldr	r2, [pc, #160]	; (8000aac <MX_ADC1_Init+0xb8>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a34:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_ADC1_Init+0xbc>)
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a54:	f000 fc42 	bl	80012dc <HAL_ADC_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f9cf 	bl	8000e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a62:	2308      	movs	r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a74:	f000 fc76 	bl	8001364 <HAL_ADC_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a7e:	f000 f9bf 	bl	8000e00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a82:	2309      	movs	r3, #9
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_ADC1_Init+0xb4>)
 8000a90:	f000 fc68 	bl	8001364 <HAL_ADC_ConfigChannel>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a9a:	f000 f9b1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20012fc8 	.word	0x20012fc8
 8000aac:	40012000 	.word	0x40012000
 8000ab0:	0f000001 	.word	0x0f000001

08000ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <MX_USART2_UART_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USART2_UART_Init+0x4c>)
 8000aec:	f003 f9ae 	bl	8003e4c <HAL_UART_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af6:	f000 f983 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20013010 	.word	0x20013010
 8000b04:	40004400 	.word	0x40004400

08000b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_USART3_UART_Init+0x50>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_USART3_UART_Init+0x4c>)
 8000b40:	f003 f984 	bl	8003e4c <HAL_UART_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b4a:	f000 f959 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20012f74 	.word	0x20012f74
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	4b93      	ldr	r3, [pc, #588]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a92      	ldr	r2, [pc, #584]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b90      	ldr	r3, [pc, #576]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	4b8c      	ldr	r3, [pc, #560]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a8b      	ldr	r2, [pc, #556]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b89      	ldr	r3, [pc, #548]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b85      	ldr	r3, [pc, #532]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a84      	ldr	r2, [pc, #528]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b82      	ldr	r3, [pc, #520]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b7e      	ldr	r3, [pc, #504]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a7d      	ldr	r2, [pc, #500]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b77      	ldr	r3, [pc, #476]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a76      	ldr	r2, [pc, #472]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b74      	ldr	r3, [pc, #464]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b70      	ldr	r3, [pc, #448]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a6f      	ldr	r2, [pc, #444]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b6d      	ldr	r3, [pc, #436]	; (8000dc4 <MX_GPIO_Init+0x268>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	486a      	ldr	r0, [pc, #424]	; (8000dc8 <MX_GPIO_Init+0x26c>)
 8000c20:	f001 f83c 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2101      	movs	r1, #1
 8000c28:	4868      	ldr	r0, [pc, #416]	; (8000dcc <MX_GPIO_Init+0x270>)
 8000c2a:	f001 f837 	bl	8001c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c34:	4866      	ldr	r0, [pc, #408]	; (8000dd0 <MX_GPIO_Init+0x274>)
 8000c36:	f001 f831 	bl	8001c9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	485d      	ldr	r0, [pc, #372]	; (8000dc8 <MX_GPIO_Init+0x26c>)
 8000c52:	f000 fe87 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c56:	2301      	movs	r3, #1
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4857      	ldr	r0, [pc, #348]	; (8000dcc <MX_GPIO_Init+0x270>)
 8000c6e:	f000 fe79 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c72:	2308      	movs	r3, #8
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c82:	2305      	movs	r3, #5
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	484f      	ldr	r0, [pc, #316]	; (8000dcc <MX_GPIO_Init+0x270>)
 8000c8e:	f000 fe69 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_blue_Pin */
  GPIO_InitStruct.Pin = btn_blue_Pin;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(btn_blue_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	484b      	ldr	r0, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x278>)
 8000ca8:	f000 fe5c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cac:	2310      	movs	r3, #16
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4843      	ldr	r0, [pc, #268]	; (8000dd4 <MX_GPIO_Init+0x278>)
 8000cc8:	f000 fe4c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ccc:	23e0      	movs	r3, #224	; 0xe0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	483b      	ldr	r0, [pc, #236]	; (8000dd4 <MX_GPIO_Init+0x278>)
 8000ce8:	f000 fe3c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cec:	2304      	movs	r3, #4
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4836      	ldr	r0, [pc, #216]	; (8000dd8 <MX_GPIO_Init+0x27c>)
 8000d00:	f000 fe30 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d16:	2305      	movs	r3, #5
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <MX_GPIO_Init+0x27c>)
 8000d22:	f000 fe1f 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin Blue_LED_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin|Blue_LED_Pin
 8000d26:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d2a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0x274>)
 8000d40:	f000 fe10 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d56:	2306      	movs	r3, #6
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481a      	ldr	r0, [pc, #104]	; (8000dcc <MX_GPIO_Init+0x270>)
 8000d62:	f000 fdff 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d66:	2320      	movs	r3, #32
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <MX_GPIO_Init+0x274>)
 8000d7a:	f000 fdf3 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d90:	2304      	movs	r3, #4
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480f      	ldr	r0, [pc, #60]	; (8000dd8 <MX_GPIO_Init+0x27c>)
 8000d9c:	f000 fde2 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000da4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000da8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_GPIO_Init+0x26c>)
 8000db6:	f000 fdd5 	bl	8001964 <HAL_GPIO_Init>

}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	; 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dee:	f000 fa31 	bl	8001254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40001400 	.word	0x40001400

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	; 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_ADC_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d127      	bne.n	8000ece <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	4a15      	ldr	r2, [pc, #84]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_ADC_MspInit+0x80>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_ADC_MspInit+0x84>)
 8000eca:	f000 fd4b 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40012000 	.word	0x40012000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a42      	ldr	r2, [pc, #264]	; (800100c <HAL_UART_MspInit+0x128>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b3a      	ldr	r3, [pc, #232]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a39      	ldr	r2, [pc, #228]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	482e      	ldr	r0, [pc, #184]	; (8001014 <HAL_UART_MspInit+0x130>)
 8000f5a:	f000 fd03 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f5e:	e050      	b.n	8001002 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2c      	ldr	r2, [pc, #176]	; (8001018 <HAL_UART_MspInit+0x134>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14b      	bne.n	8001002 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x12c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4810      	ldr	r0, [pc, #64]	; (800101c <HAL_UART_MspInit+0x138>)
 8000fdc:	f000 fcc2 	bl	8001964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4808      	ldr	r0, [pc, #32]	; (8001020 <HAL_UART_MspInit+0x13c>)
 8000ffe:	f000 fcb1 	bl	8001964 <HAL_GPIO_Init>
}
 8001002:	bf00      	nop
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40004400 	.word	0x40004400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40004800 	.word	0x40004800
 800101c:	40020400 	.word	0x40020400
 8001020:	40020c00 	.word	0x40020c00

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	2037      	movs	r0, #55	; 0x37
 800103a:	f000 fc69 	bl	8001910 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800103e:	2037      	movs	r0, #55	; 0x37
 8001040:	f000 fc82 	bl	8001948 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_InitTick+0xa4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_InitTick+0xa4>)
 800104e:	f043 0320 	orr.w	r3, r3, #32
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_InitTick+0xa4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 0320 	and.w	r3, r3, #32
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001060:	f107 0210 	add.w	r2, r7, #16
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fc0e 	bl	800388c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001070:	f002 fbe4 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8001074:	4603      	mov	r3, r0
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	4a13      	ldr	r2, [pc, #76]	; (80010cc <HAL_InitTick+0xa8>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_InitTick+0xac>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_InitTick+0xb0>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_InitTick+0xac>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_InitTick+0xac>)
 8001098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_InitTick+0xac>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_InitTick+0xac>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <HAL_InitTick+0xac>)
 80010aa:	f002 fc21 	bl	80038f0 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <HAL_InitTick+0xac>)
 80010b6:	f002 fc75 	bl	80039a4 <HAL_TIM_Base_Start_IT>
 80010ba:	4603      	mov	r3, r0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	20013054 	.word	0x20013054
 80010d4:	40001400 	.word	0x40001400

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM7_IRQHandler+0x10>)
 800110a:	f002 fcbb 	bl	8003a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20013054 	.word	0x20013054

08001118 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <OTG_FS_IRQHandler+0x10>)
 800111e:	f000 ff26 	bl	8001f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200135b0 	.word	0x200135b0

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f009 f9ee 	bl	800a53c <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20020000 	.word	0x20020000
 800118c:	00000400 	.word	0x00000400
 8001190:	200001ec 	.word	0x200001ec
 8001194:	200139c8 	.word	0x200139c8

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f009 f9ad 	bl	800a548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fb55 	bl	800089c <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001200:	0800aee4 	.word	0x0800aee4
  ldr r2, =_sbss
 8001204:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001208:	200139c8 	.word	0x200139c8

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 fb5e 	bl	80018fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fef0 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fde2 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	2001309c 	.word	0x2001309c

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2001309c 	.word	0x2001309c

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e033      	b.n	800135a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fdae 	bl	8000e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001322:	f023 0302 	bic.w	r3, r3, #2
 8001326:	f043 0202 	orr.w	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f93a 	bl	80015a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	f043 0201 	orr.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
 800134a:	e001      	b.n	8001350 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x1c>
 800137c:	2302      	movs	r3, #2
 800137e:	e105      	b.n	800158c <HAL_ADC_ConfigChannel+0x228>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b09      	cmp	r3, #9
 800138e:	d925      	bls.n	80013dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68d9      	ldr	r1, [r3, #12]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	3b1e      	subs	r3, #30
 80013a6:	2207      	movs	r2, #7
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43da      	mvns	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	400a      	ands	r2, r1
 80013b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68d9      	ldr	r1, [r3, #12]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	4603      	mov	r3, r0
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4403      	add	r3, r0
 80013ce:	3b1e      	subs	r3, #30
 80013d0:	409a      	lsls	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	e022      	b.n	8001422 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6919      	ldr	r1, [r3, #16]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	2207      	movs	r2, #7
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6919      	ldr	r1, [r3, #16]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	4603      	mov	r3, r0
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4403      	add	r3, r0
 8001418:	409a      	lsls	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b06      	cmp	r3, #6
 8001428:	d824      	bhi.n	8001474 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b05      	subs	r3, #5
 800143c:	221f      	movs	r2, #31
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b05      	subs	r3, #5
 8001466:	fa00 f203 	lsl.w	r2, r0, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
 8001472:	e04c      	b.n	800150e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b0c      	cmp	r3, #12
 800147a:	d824      	bhi.n	80014c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b23      	subs	r3, #35	; 0x23
 800148e:	221f      	movs	r2, #31
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43da      	mvns	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	400a      	ands	r2, r1
 800149c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	3b23      	subs	r3, #35	; 0x23
 80014b8:	fa00 f203 	lsl.w	r2, r0, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	430a      	orrs	r2, r1
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	e023      	b.n	800150e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b41      	subs	r3, #65	; 0x41
 80014d8:	221f      	movs	r2, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	400a      	ands	r2, r1
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b41      	subs	r3, #65	; 0x41
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <HAL_ADC_ConfigChannel+0x234>)
 8001510:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <HAL_ADC_ConfigChannel+0x238>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d109      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1cc>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b12      	cmp	r3, #18
 8001522:	d105      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_ADC_ConfigChannel+0x238>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d123      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x21e>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b10      	cmp	r3, #16
 8001540:	d003      	beq.n	800154a <HAL_ADC_ConfigChannel+0x1e6>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b11      	cmp	r3, #17
 8001548:	d11b      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b10      	cmp	r3, #16
 800155c:	d111      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_ADC_ConfigChannel+0x240>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9a      	lsrs	r2, r3, #18
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40012300 	.word	0x40012300
 800159c:	40012000 	.word	0x40012000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b0:	4b79      	ldr	r3, [pc, #484]	; (8001798 <ADC_Init+0x1f0>)
 80015b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	431a      	orrs	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6899      	ldr	r1, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	4a58      	ldr	r2, [pc, #352]	; (800179c <ADC_Init+0x1f4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d022      	beq.n	8001686 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800164e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6899      	ldr	r1, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e00f      	b.n	80016a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0202 	bic.w	r2, r2, #2
 80016b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6899      	ldr	r1, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	005a      	lsls	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01b      	beq.n	800170c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	3b01      	subs	r3, #1
 8001700:	035a      	lsls	r2, r3, #13
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	e007      	b.n	800171c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	3b01      	subs	r3, #1
 8001738:	051a      	lsls	r2, r3, #20
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800175e:	025a      	lsls	r2, r3, #9
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	029a      	lsls	r2, r3, #10
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	609a      	str	r2, [r3, #8]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40012300 	.word	0x40012300
 800179c:	0f000001 	.word	0x0f000001

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ff4c 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001922:	f7ff ff61 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff ffb1 	bl	8001894 <NVIC_EncodePriority>
 8001932:	4602      	mov	r2, r0
 8001934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff80 	bl	8001840 <__NVIC_SetPriority>
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff54 	bl	8001804 <__NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e16b      	b.n	8001c58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001980:	2201      	movs	r2, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 815a 	bne.w	8001c52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d005      	beq.n	80019b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d130      	bne.n	8001a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2203      	movs	r2, #3
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ec:	2201      	movs	r2, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d017      	beq.n	8001a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d123      	bne.n	8001aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	08da      	lsrs	r2, r3, #3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3208      	adds	r2, #8
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	220f      	movs	r2, #15
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	69b9      	ldr	r1, [r7, #24]
 8001aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0203 	and.w	r2, r3, #3
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80b4 	beq.w	8001c52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b60      	ldr	r3, [pc, #384]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b06:	4a5b      	ldr	r2, [pc, #364]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_GPIO_Init+0x314>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d02b      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <HAL_GPIO_Init+0x318>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d025      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a50      	ldr	r2, [pc, #320]	; (8001c80 <HAL_GPIO_Init+0x31c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01f      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4f      	ldr	r2, [pc, #316]	; (8001c84 <HAL_GPIO_Init+0x320>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d019      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4d      	ldr	r2, [pc, #308]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x20a>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e00e      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b6e:	2308      	movs	r3, #8
 8001b70:	e00c      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e00a      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e008      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x228>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bce:	4a32      	ldr	r2, [pc, #200]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bd4:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c4c:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3301      	adds	r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b0f      	cmp	r3, #15
 8001c5c:	f67f ae90 	bls.w	8001980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3724      	adds	r7, #36	; 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40020000 	.word	0x40020000
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40021400 	.word	0x40021400
 8001c90:	40021800 	.word	0x40021800
 8001c94:	40021c00 	.word	0x40021c00
 8001c98:	40013c00 	.word	0x40013c00

08001c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb2:	887a      	ldrh	r2, [r7, #2]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb8:	e003      	b.n	8001cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	041a      	lsls	r2, r3, #16
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd0:	b08f      	sub	sp, #60	; 0x3c
 8001cd2:	af0a      	add	r7, sp, #40	; 0x28
 8001cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e10f      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f008 f90e 	bl	8009f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 fccf 	bl	80046c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	687e      	ldr	r6, [r7, #4]
 8001d2c:	466d      	mov	r5, sp
 8001d2e:	f106 0410 	add.w	r4, r6, #16
 8001d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d42:	1d33      	adds	r3, r6, #4
 8001d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f002 fba6 	bl	8004498 <USB_CoreInit>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e0d0      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f002 fcbd 	bl	80046e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e04a      	b.n	8001e06 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333d      	adds	r3, #61	; 0x3d
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	333c      	adds	r3, #60	; 0x3c
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3342      	adds	r3, #66	; 0x42
 8001dac:	4602      	mov	r2, r0
 8001dae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	333f      	adds	r3, #63	; 0x3f
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3344      	adds	r3, #68	; 0x44
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3348      	adds	r3, #72	; 0x48
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3350      	adds	r3, #80	; 0x50
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3af      	bcc.n	8001d70 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e044      	b.n	8001ea0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d3b5      	bcc.n	8001e16 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	687e      	ldr	r6, [r7, #4]
 8001eb2:	466d      	mov	r5, sp
 8001eb4:	f106 0410 	add.w	r4, r6, #16
 8001eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec8:	1d33      	adds	r3, r6, #4
 8001eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f002 fc55 	bl	800477c <USB_DevInit>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e00d      	b.n	8001f00 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 fcd1 	bl	80058a0 <USB_DevDisconnect>

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_PCD_Start+0x1c>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e020      	b.n	8001f66 <HAL_PCD_Start+0x5e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d109      	bne.n	8001f48 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fba7 	bl	80046a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fc81 	bl	800585e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f6e:	b590      	push	{r4, r7, lr}
 8001f70:	b08d      	sub	sp, #52	; 0x34
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 fd3f 	bl	8005a08 <USB_GetMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 839d 	bne.w	80026cc <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fca3 	bl	80058e2 <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8393 	beq.w	80026ca <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fc9a 	bl	80058e2 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d107      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f002 0202 	and.w	r2, r2, #2
 8001fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fc88 	bl	80058e2 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d161      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0210 	bic.w	r2, r2, #16
 8001fea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	0c5b      	lsrs	r3, r3, #17
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	2b02      	cmp	r3, #2
 8002016:	d124      	bne.n	8002062 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d035      	beq.n	8002090 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6a38      	ldr	r0, [r7, #32]
 8002038:	f003 fabf 	bl	80055ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002048:	441a      	add	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205a:	441a      	add	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	619a      	str	r2, [r3, #24]
 8002060:	e016      	b.n	8002090 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	0c5b      	lsrs	r3, r3, #17
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	2b06      	cmp	r3, #6
 800206c:	d110      	bne.n	8002090 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002074:	2208      	movs	r2, #8
 8002076:	4619      	mov	r1, r3
 8002078:	6a38      	ldr	r0, [r7, #32]
 800207a:	f003 fa9e 	bl	80055ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208a:	441a      	add	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0210 	orr.w	r2, r2, #16
 800209e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fc1c 	bl	80058e2 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b4:	d16e      	bne.n	8002194 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fc22 	bl	8005908 <USB_ReadDevAllOutEpInterrupt>
 80020c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020c6:	e062      	b.n	800218e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d057      	beq.n	8002182 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fc47 	bl	8005970 <USB_ReadDevOutEPInterrupt>
 80020e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	461a      	mov	r2, r3
 80020fc:	2301      	movs	r3, #1
 80020fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fd98 	bl	8002c38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	2308      	movs	r3, #8
 8002122:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fe92 	bl	8002e50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	461a      	mov	r2, r3
 8002144:	2310      	movs	r3, #16
 8002146:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	461a      	mov	r2, r3
 8002160:	2320      	movs	r3, #32
 8002162:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	3301      	adds	r3, #1
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	d199      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f003 fba2 	bl	80058e2 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021a8:	f040 80c0 	bne.w	800232c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fbc3 	bl	800593c <USB_ReadDevAllInEpInterrupt>
 80021b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021bc:	e0b2      	b.n	8002324 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a7 	beq.w	8002318 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f003 fbe9 	bl	80059ac <USB_ReadDevInEPInterrupt>
 80021da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d057      	beq.n	8002296 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2201      	movs	r2, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	69f9      	ldr	r1, [r7, #28]
 8002202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002206:	4013      	ands	r3, r2
 8002208:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	461a      	mov	r2, r3
 8002218:	2301      	movs	r3, #1
 800221a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d132      	bne.n	800228a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3348      	adds	r3, #72	; 0x48
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4403      	add	r3, r0
 8002244:	3344      	adds	r3, #68	; 0x44
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4419      	add	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4403      	add	r3, r0
 8002258:	3348      	adds	r3, #72	; 0x48
 800225a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <HAL_PCD_IRQHandler+0x31c>
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3350      	adds	r3, #80	; 0x50
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d108      	bne.n	800228a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002282:	461a      	mov	r2, r3
 8002284:	2101      	movs	r1, #1
 8002286:	f003 fbf1 	bl	8005a6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f007 fed2 	bl	800a03a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022ac:	461a      	mov	r2, r3
 80022ae:	2308      	movs	r3, #8
 80022b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c8:	461a      	mov	r2, r3
 80022ca:	2310      	movs	r3, #16
 80022cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2340      	movs	r3, #64	; 0x40
 80022e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002300:	461a      	mov	r2, r3
 8002302:	2302      	movs	r3, #2
 8002304:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fc03 	bl	8002b1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	3301      	adds	r3, #1
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	f47f af49 	bne.w	80021be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f003 fad6 	bl	80058e2 <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800233c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002340:	d122      	bne.n	8002388 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800235c:	2b01      	cmp	r3, #1
 800235e:	d108      	bne.n	8002372 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002368:	2100      	movs	r1, #0
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fe0e 	bl	8002f8c <HAL_PCDEx_LPM_Callback>
 8002370:	e002      	b.n	8002378 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f007 fed8 	bl	800a128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 faa8 	bl	80058e2 <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800239c:	d112      	bne.n	80023c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d102      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f007 fe94 	bl	800a0dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023c2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fa8a 	bl	80058e2 <USB_ReadInterrupts>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	f040 80c7 	bne.w	800256a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2110      	movs	r1, #16
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fb24 	bl	8004a44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002400:	e056      	b.n	80024b0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800240e:	461a      	mov	r2, r3
 8002410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002414:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4413      	add	r3, r2
 800241e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002426:	0151      	lsls	r1, r2, #5
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	440a      	add	r2, r1
 800242c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002434:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002446:	0151      	lsls	r1, r2, #5
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	440a      	add	r2, r1
 800244c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002454:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002462:	461a      	mov	r2, r3
 8002464:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002468:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247a:	0151      	lsls	r1, r2, #5
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	440a      	add	r2, r1
 8002480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002484:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002488:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	0151      	lsls	r1, r2, #5
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	440a      	add	r2, r1
 80024a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	3301      	adds	r3, #1
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3a3      	bcc.n	8002402 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	69fa      	ldr	r2, [r7, #28]
 80024c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e6:	f043 030b 	orr.w	r3, r3, #11
 80024ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fc:	f043 030b 	orr.w	r3, r3, #11
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	e015      	b.n	8002530 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002512:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002516:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800251a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252a:	f043 030b 	orr.w	r3, r3, #11
 800252e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800253e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002542:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002554:	461a      	mov	r2, r3
 8002556:	f003 fa89 	bl	8005a6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 f9b7 	bl	80058e2 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257e:	d124      	bne.n	80025ca <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f003 fa4d 	bl	8005a24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fab5 	bl	8004afe <USB_GetDevSpeed>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681c      	ldr	r4, [r3, #0]
 80025a0:	f001 f940 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 80025a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4620      	mov	r0, r4
 80025b0:	f001 ffd4 	bl	800455c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f007 fd68 	bl	800a08a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f987 	bl	80058e2 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d10a      	bne.n	80025f4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f007 fd45 	bl	800a06e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f002 0208 	and.w	r2, r2, #8
 80025f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 f972 	bl	80058e2 <USB_ReadInterrupts>
 80025fe:	4603      	mov	r3, r0
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002608:	d10f      	bne.n	800262a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f007 fda7 	bl	800a168 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002628:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 f957 	bl	80058e2 <USB_ReadInterrupts>
 8002634:	4603      	mov	r3, r0
 8002636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800263e:	d10f      	bne.n	8002660 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	b2db      	uxtb	r3, r3
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f007 fd7a 	bl	800a144 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f003 f93c 	bl	80058e2 <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d10a      	bne.n	800268c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f007 fd88 	bl	800a18c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800268a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 f926 	bl	80058e2 <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b04      	cmp	r3, #4
 800269e:	d115      	bne.n	80026cc <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f007 fd78 	bl	800a1a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e000      	b.n	80026cc <HAL_PCD_IRQHandler+0x75e>
      return;
 80026ca:	bf00      	nop
    }
  }
}
 80026cc:	3734      	adds	r7, #52	; 0x34
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_PCD_SetAddress+0x1a>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e013      	b.n	8002714 <HAL_PCD_SetAddress+0x42>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 f884 	bl	8005812 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4603      	mov	r3, r0
 800272c:	70fb      	strb	r3, [r7, #3]
 800272e:	460b      	mov	r3, r1
 8002730:	803b      	strh	r3, [r7, #0]
 8002732:	4613      	mov	r3, r2
 8002734:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800273a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800273e:	2b00      	cmp	r3, #0
 8002740:	da0f      	bge.n	8002762 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	3338      	adds	r3, #56	; 0x38
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	3304      	adds	r3, #4
 8002758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	705a      	strb	r2, [r3, #1]
 8002760:	e00f      	b.n	8002782 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	b2da      	uxtb	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800278e:	883a      	ldrh	r2, [r7, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	78ba      	ldrb	r2, [r7, #2]
 8002798:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027ac:	78bb      	ldrb	r3, [r7, #2]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d102      	bne.n	80027b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_PCD_EP_Open+0xaa>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e00e      	b.n	80027e4 <HAL_PCD_EP_Open+0xc8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68f9      	ldr	r1, [r7, #12]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 f9b7 	bl	8004b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80027e2:	7afb      	ldrb	r3, [r7, #11]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da0f      	bge.n	8002820 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	f003 020f 	and.w	r2, r3, #15
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	3338      	adds	r3, #56	; 0x38
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	3304      	adds	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2201      	movs	r2, #1
 800281c:	705a      	strb	r2, [r3, #1]
 800281e:	e00f      	b.n	8002840 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	3304      	adds	r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_PCD_EP_Close+0x6e>
 8002856:	2302      	movs	r3, #2
 8002858:	e00e      	b.n	8002878 <HAL_PCD_EP_Close+0x8c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f002 f9f5 	bl	8004c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6979      	ldr	r1, [r7, #20]
 80028f4:	f002 fcd0 	bl	8005298 <USB_EP0StartXfer>
 80028f8:	e008      	b.n	800290c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	6979      	ldr	r1, [r7, #20]
 8002908:	f002 fa82 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	460b      	mov	r3, r1
 8002924:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2201      	movs	r2, #1
 8002954:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	b2da      	uxtb	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d102      	bne.n	8002970 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002970:	7afb      	ldrb	r3, [r7, #11]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	f002 fc86 	bl	8005298 <USB_EP0StartXfer>
 800298c:	e008      	b.n	80029a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	f002 fa38 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	460b      	mov	r3, r1
 80029b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	f003 020f 	and.w	r2, r3, #15
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d901      	bls.n	80029c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e050      	b.n	8002a6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da0f      	bge.n	80029f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f003 020f 	and.w	r2, r3, #15
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3338      	adds	r3, #56	; 0x38
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	705a      	strb	r2, [r3, #1]
 80029ee:	e00d      	b.n	8002a0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_PCD_EP_SetStall+0x82>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e01e      	b.n	8002a6a <HAL_PCD_EP_SetStall+0xc0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68f9      	ldr	r1, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f002 fe15 	bl	800566a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	b2d9      	uxtb	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f003 f806 	bl	8005a6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d901      	bls.n	8002a90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e042      	b.n	8002b16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00f      	b.n	8002ad8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 020f 	and.w	r2, r3, #15
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_PCD_EP_ClrStall+0x86>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e00e      	b.n	8002b16 <HAL_PCD_EP_ClrStall+0xa4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68f9      	ldr	r1, [r7, #12]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fe1d 	bl	8005746 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	3338      	adds	r3, #56	; 0x38
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d901      	bls.n	8002b56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06c      	b.n	8002c30 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d902      	bls.n	8002b72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3303      	adds	r3, #3
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b7a:	e02b      	b.n	8002bd4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d902      	bls.n	8002b98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68d9      	ldr	r1, [r3, #12]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	6978      	ldr	r0, [r7, #20]
 8002bb8:	f002 fcc1 	bl	800553e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	441a      	add	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d809      	bhi.n	8002bfe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d203      	bcs.n	8002bfe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1be      	bne.n	8002b7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d811      	bhi.n	8002c2e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	2201      	movs	r2, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	6939      	ldr	r1, [r7, #16]
 8002c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	333c      	adds	r3, #60	; 0x3c
 8002c50:	3304      	adds	r3, #4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 80a0 	bne.w	8002db0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a72      	ldr	r2, [pc, #456]	; (8002e48 <PCD_EP_OutXfrComplete_int+0x210>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f240 80dd 	bls.w	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80d7 	beq.w	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca2:	6093      	str	r3, [r2, #8]
 8002ca4:	e0cb      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2320      	movs	r3, #32
 8002cc0:	6093      	str	r3, [r2, #8]
 8002cc2:	e0bc      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80b7 	bne.w	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <PCD_EP_OutXfrComplete_int+0x210>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d90f      	bls.n	8002cf8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cf4:	6093      	str	r3, [r2, #8]
 8002cf6:	e0a2      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002d1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d46:	6819      	ldr	r1, [r3, #0]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4403      	add	r3, r0
 8002d56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4419      	add	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4403      	add	r3, r0
 8002d6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d114      	bne.n	8002da2 <PCD_EP_OutXfrComplete_int+0x16a>
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	f002 fe65 	bl	8005a6c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4619      	mov	r1, r3
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f007 f92b 	bl	800a004 <HAL_PCD_DataOutStageCallback>
 8002dae:	e046      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <PCD_EP_OutXfrComplete_int+0x214>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d124      	bne.n	8002e02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd4:	6093      	str	r3, [r2, #8]
 8002dd6:	e032      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	2320      	movs	r3, #32
 8002df2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f007 f902 	bl	800a004 <HAL_PCD_DataOutStageCallback>
 8002e00:	e01d      	b.n	8002e3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d114      	bne.n	8002e32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f002 fe1d 	bl	8005a6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f007 f8e3 	bl	800a004 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	4f54300a 	.word	0x4f54300a
 8002e4c:	4f54310a 	.word	0x4f54310a

08002e50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	333c      	adds	r3, #60	; 0x3c
 8002e68:	3304      	adds	r3, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d90e      	bls.n	8002ea4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f007 f89b 	bl	8009fe0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d90c      	bls.n	8002ecc <PCD_EP_OutSetupPacket_int+0x7c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d108      	bne.n	8002ecc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	f002 fdd0 	bl	8005a6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	4f54300a 	.word	0x4f54300a

08002edc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	70fb      	strb	r3, [r7, #3]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002efa:	883b      	ldrh	r3, [r7, #0]
 8002efc:	0419      	lsls	r1, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
 8002f08:	e028      	b.n	8002f5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e00d      	b.n	8002f3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3340      	adds	r3, #64	; 0x40
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	4413      	add	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	3301      	adds	r3, #1
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d3ec      	bcc.n	8002f1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f44:	883b      	ldrh	r3, [r7, #0]
 8002f46:	0418      	lsls	r0, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4302      	orrs	r2, r0
 8002f54:	3340      	adds	r3, #64	; 0x40
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	887a      	ldrh	r2, [r7, #2]
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e264      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d075      	beq.n	80030ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d112      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05b      	beq.n	80030ac <HAL_RCC_OscConfig+0x108>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d157      	bne.n	80030ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e23f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x74>
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a8a      	ldr	r2, [pc, #552]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a87      	ldr	r2, [pc, #540]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe f90e 	bl	800127c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe f90a 	bl	800127c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e204      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xc0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe f8fa 	bl	800127c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe f8f6 	bl	800127c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1f0      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0xe8>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1c4      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe f8af 	bl	800127c <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe f8ab 	bl	800127c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1a5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe f88e 	bl	800127c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe f88a 	bl	800127c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e184      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d030      	beq.n	80031f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe f86e 	bl	800127c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe f86a 	bl	800127c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e164      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x200>
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe f857 	bl	800127c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe f853 	bl	800127c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e14d      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a0 	beq.w	800333e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d121      	bne.n	800327e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe f819 	bl	800127c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e011      	b.n	8003272 <HAL_RCC_OscConfig+0x2ce>
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	42470000 	.word	0x42470000
 8003258:	42470e80 	.word	0x42470e80
 800325c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe f80c 	bl	800127c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e106      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x2f0>
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x312>
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 80032b6:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fd ffd1 	bl	800127c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fd ffcd 	bl	800127c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0c5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x33a>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fd ffbb 	bl	800127c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fd ffb7 	bl	800127c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0af      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a55      	ldr	r2, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 809b 	beq.w	800347e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d05c      	beq.n	800340e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d141      	bne.n	80033e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fd ff8b 	bl	800127c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fd ff87 	bl	800127c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e081      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	019b      	lsls	r3, r3, #6
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd ff60 	bl	800127c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd ff5c 	bl	800127c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e056      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 80033de:	e04e      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fd ff49 	bl	800127c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fd ff45 	bl	800127c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e03f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x44a>
 800340c:	e037      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e032      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d028      	beq.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d121      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d11a      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003450:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d107      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40007000 	.word	0x40007000
 800348c:	40023800 	.word	0x40023800
 8003490:	42470060 	.word	0x42470060

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cc      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90c      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b8      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800350a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	494d      	ldr	r1, [pc, #308]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d044      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d119      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d003      	beq.n	8003552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e067      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fd fe7a 	bl	800127c <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fd fe76 	bl	800127c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d20c      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e032      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361a:	f000 f821 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fcf2 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	0800ae88 	.word	0x0800ae88
 8003658:	20000000 	.word	0x20000000
 800365c:	20000004 	.word	0x20000004

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	2300      	movs	r3, #0
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	2300      	movs	r3, #0
 8003672:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003678:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b08      	cmp	r3, #8
 8003682:	d00d      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003684:	2b08      	cmp	r3, #8
 8003686:	f200 80bd 	bhi.w	8003804 <HAL_RCC_GetSysClockFreq+0x1a4>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x34>
 800368e:	2b04      	cmp	r3, #4
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x3a>
 8003692:	e0b7      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003696:	60bb      	str	r3, [r7, #8]
       break;
 8003698:	e0b7      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800369a:	4b61      	ldr	r3, [pc, #388]	; (8003820 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800369c:	60bb      	str	r3, [r7, #8]
      break;
 800369e:	e0b4      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a0:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036aa:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d04d      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b6:	4b58      	ldr	r3, [pc, #352]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	099b      	lsrs	r3, r3, #6
 80036bc:	461a      	mov	r2, r3
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036c6:	f04f 0100 	mov.w	r1, #0
 80036ca:	ea02 0800 	and.w	r8, r2, r0
 80036ce:	ea03 0901 	and.w	r9, r3, r1
 80036d2:	4640      	mov	r0, r8
 80036d4:	4649      	mov	r1, r9
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	014b      	lsls	r3, r1, #5
 80036e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036e4:	0142      	lsls	r2, r0, #5
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	ebb0 0008 	subs.w	r0, r0, r8
 80036ee:	eb61 0109 	sbc.w	r1, r1, r9
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	018b      	lsls	r3, r1, #6
 80036fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003700:	0182      	lsls	r2, r0, #6
 8003702:	1a12      	subs	r2, r2, r0
 8003704:	eb63 0301 	sbc.w	r3, r3, r1
 8003708:	f04f 0000 	mov.w	r0, #0
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	00d9      	lsls	r1, r3, #3
 8003712:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003716:	00d0      	lsls	r0, r2, #3
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	eb12 0208 	adds.w	r2, r2, r8
 8003720:	eb43 0309 	adc.w	r3, r3, r9
 8003724:	f04f 0000 	mov.w	r0, #0
 8003728:	f04f 0100 	mov.w	r1, #0
 800372c:	0259      	lsls	r1, r3, #9
 800372e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003732:	0250      	lsls	r0, r2, #9
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	f7fc fd9c 	bl	8000280 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e04a      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	461a      	mov	r2, r3
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	ea02 0400 	and.w	r4, r2, r0
 800376a:	ea03 0501 	and.w	r5, r3, r1
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	014b      	lsls	r3, r1, #5
 800377c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003780:	0142      	lsls	r2, r0, #5
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	1b00      	subs	r0, r0, r4
 8003788:	eb61 0105 	sbc.w	r1, r1, r5
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	018b      	lsls	r3, r1, #6
 8003796:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800379a:	0182      	lsls	r2, r0, #6
 800379c:	1a12      	subs	r2, r2, r0
 800379e:	eb63 0301 	sbc.w	r3, r3, r1
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	00d9      	lsls	r1, r3, #3
 80037ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037b0:	00d0      	lsls	r0, r2, #3
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	1912      	adds	r2, r2, r4
 80037b8:	eb45 0303 	adc.w	r3, r5, r3
 80037bc:	f04f 0000 	mov.w	r0, #0
 80037c0:	f04f 0100 	mov.w	r1, #0
 80037c4:	0299      	lsls	r1, r3, #10
 80037c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037ca:	0290      	lsls	r0, r2, #10
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f7fc fd50 	bl	8000280 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	3301      	adds	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	60bb      	str	r3, [r7, #8]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003806:	60bb      	str	r3, [r7, #8]
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	68bb      	ldr	r3, [r7, #8]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	00f42400 	.word	0x00f42400
 8003820:	007a1200 	.word	0x007a1200

08003824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003828:	4b03      	ldr	r3, [pc, #12]	; (8003838 <HAL_RCC_GetHCLKFreq+0x14>)
 800382a:	681b      	ldr	r3, [r3, #0]
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000

0800383c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003840:	f7ff fff0 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0a9b      	lsrs	r3, r3, #10
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	0800ae98 	.word	0x0800ae98

08003864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003868:	f7ff ffdc 	bl	8003824 <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0b5b      	lsrs	r3, r3, #13
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	0800ae98 	.word	0x0800ae98

0800388c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	220f      	movs	r2, #15
 800389a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0203 	and.w	r2, r3, #3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038c0:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_GetClockConfig+0x5c>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	08db      	lsrs	r3, r3, #3
 80038c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <HAL_RCC_GetClockConfig+0x60>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0207 	and.w	r2, r3, #7
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	601a      	str	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40023c00 	.word	0x40023c00

080038f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e041      	b.n	8003986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f839 	bl	800398e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 f9d8 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d001      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e04e      	b.n	8003a5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d022      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d01d      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1f      	ldr	r2, [pc, #124]	; (8003a6c <HAL_TIM_Base_Start_IT+0xc8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d018      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <HAL_TIM_Base_Start_IT+0xcc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d013      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00e      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d009      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_TIM_Base_Start_IT+0xd8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x80>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d111      	bne.n	8003a48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b06      	cmp	r3, #6
 8003a34:	d010      	beq.n	8003a58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a46:	e007      	b.n	8003a58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	40010400 	.word	0x40010400
 8003a7c:	40014000 	.word	0x40014000
 8003a80:	40001800 	.word	0x40001800

08003a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8ee 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8e0 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8f1 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0204 	mvn.w	r2, #4
 8003b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8c4 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8b6 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8c7 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0208 	mvn.w	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f89a 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f88c 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f89d 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b10      	cmp	r3, #16
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0210 	mvn.w	r2, #16
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f870 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f862 	bl	8003c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f873 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0201 	mvn.w	r2, #1
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd f8ea 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f902 	bl	8003e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f838 	bl	8003cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b20      	cmp	r3, #32
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0220 	mvn.w	r2, #32
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8cc 	bl	8003e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a40      	ldr	r2, [pc, #256]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3c      	ldr	r2, [pc, #240]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d44:	d027      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <TIM_Base_SetConfig+0x118>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d023      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2b      	ldr	r2, [pc, #172]	; (8003e00 <TIM_Base_SetConfig+0x11c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <TIM_Base_SetConfig+0x120>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a29      	ldr	r2, [pc, #164]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a28      	ldr	r2, [pc, #160]	; (8003e0c <TIM_Base_SetConfig+0x128>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a23      	ldr	r2, [pc, #140]	; (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <TIM_Base_SetConfig+0x114>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <TIM_Base_SetConfig+0x124>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40001800 	.word	0x40001800
 8003e1c:	40001c00 	.word	0x40001c00
 8003e20:	40002000 	.word	0x40002000

08003e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e03f      	b.n	8003ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd f836 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2224      	movs	r2, #36	; 0x24
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f939 	bl	8004108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b08a      	sub	sp, #40	; 0x28
 8003eea:	af02      	add	r7, sp, #8
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	f040 808c 	bne.w	8004020 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_UART_Receive+0x2e>
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e084      	b.n	8004022 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Receive+0x40>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e07d      	b.n	8004022 <HAL_UART_Receive+0x13c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2222      	movs	r2, #34	; 0x22
 8003f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fd f99b 	bl	800127c <HAL_GetTick>
 8003f46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5c:	d108      	bne.n	8003f70 <HAL_UART_Receive+0x8a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	e003      	b.n	8003f78 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f80:	e043      	b.n	800400a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2120      	movs	r1, #32
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f84c 	bl	800402a <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e042      	b.n	8004022 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10c      	bne.n	8003fbc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	3302      	adds	r3, #2
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e01f      	b.n	8003ffc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d007      	beq.n	8003fd6 <HAL_UART_Receive+0xf0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <HAL_UART_Receive+0xfe>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	e008      	b.n	8003ff6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1b6      	bne.n	8003f82 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b090      	sub	sp, #64	; 0x40
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403a:	e050      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d04c      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004046:	2b00      	cmp	r3, #0
 8004048:	d007      	beq.n	800405a <UART_WaitOnFlagUntilTimeout+0x30>
 800404a:	f7fd f917 	bl	800127c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004056:	429a      	cmp	r2, r3
 8004058:	d241      	bcs.n	80040de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800407a:	637a      	str	r2, [r7, #52]	; 0x34
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3314      	adds	r3, #20
 8004094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	613b      	str	r3, [r7, #16]
   return(result);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ae:	623a      	str	r2, [r7, #32]
 80040b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	69f9      	ldr	r1, [r7, #28]
 80040b4:	6a3a      	ldr	r2, [r7, #32]
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e5      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e00f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d09f      	beq.n	800403c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3740      	adds	r7, #64	; 0x40
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	b09f      	sub	sp, #124	; 0x7c
 800410e:	af00      	add	r7, sp, #0
 8004110:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800411c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	ea40 0301 	orr.w	r3, r0, r1
 8004128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	431a      	orrs	r2, r3
 8004134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	431a      	orrs	r2, r3
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
 8004140:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800414c:	f021 010c 	bic.w	r1, r1, #12
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004156:	430b      	orrs	r3, r1
 8004158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004166:	6999      	ldr	r1, [r3, #24]
 8004168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	ea40 0301 	orr.w	r3, r0, r1
 8004170:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4bc5      	ldr	r3, [pc, #788]	; (800448c <UART_SetConfig+0x384>)
 8004178:	429a      	cmp	r2, r3
 800417a:	d004      	beq.n	8004186 <UART_SetConfig+0x7e>
 800417c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4bc3      	ldr	r3, [pc, #780]	; (8004490 <UART_SetConfig+0x388>)
 8004182:	429a      	cmp	r2, r3
 8004184:	d103      	bne.n	800418e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004186:	f7ff fb6d 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
 800418a:	6778      	str	r0, [r7, #116]	; 0x74
 800418c:	e002      	b.n	8004194 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800418e:	f7ff fb55 	bl	800383c <HAL_RCC_GetPCLK1Freq>
 8004192:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	f040 80b6 	bne.w	800430c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a2:	461c      	mov	r4, r3
 80041a4:	f04f 0500 	mov.w	r5, #0
 80041a8:	4622      	mov	r2, r4
 80041aa:	462b      	mov	r3, r5
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	6439      	str	r1, [r7, #64]	; 0x40
 80041b0:	415b      	adcs	r3, r3
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
 80041b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041b8:	1912      	adds	r2, r2, r4
 80041ba:	eb45 0303 	adc.w	r3, r5, r3
 80041be:	f04f 0000 	mov.w	r0, #0
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	00d9      	lsls	r1, r3, #3
 80041c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041cc:	00d0      	lsls	r0, r2, #3
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	1911      	adds	r1, r2, r4
 80041d4:	6639      	str	r1, [r7, #96]	; 0x60
 80041d6:	416b      	adcs	r3, r5
 80041d8:	667b      	str	r3, [r7, #100]	; 0x64
 80041da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	461a      	mov	r2, r3
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041e8:	415b      	adcs	r3, r3
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80041f4:	f7fc f844 	bl	8000280 <__aeabi_uldivmod>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4ba5      	ldr	r3, [pc, #660]	; (8004494 <UART_SetConfig+0x38c>)
 80041fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	011e      	lsls	r6, r3, #4
 8004206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004208:	461c      	mov	r4, r3
 800420a:	f04f 0500 	mov.w	r5, #0
 800420e:	4622      	mov	r2, r4
 8004210:	462b      	mov	r3, r5
 8004212:	1891      	adds	r1, r2, r2
 8004214:	6339      	str	r1, [r7, #48]	; 0x30
 8004216:	415b      	adcs	r3, r3
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800421e:	1912      	adds	r2, r2, r4
 8004220:	eb45 0303 	adc.w	r3, r5, r3
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f04f 0100 	mov.w	r1, #0
 800422c:	00d9      	lsls	r1, r3, #3
 800422e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004232:	00d0      	lsls	r0, r2, #3
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	1911      	adds	r1, r2, r4
 800423a:	65b9      	str	r1, [r7, #88]	; 0x58
 800423c:	416b      	adcs	r3, r5
 800423e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	461a      	mov	r2, r3
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	1891      	adds	r1, r2, r2
 800424c:	62b9      	str	r1, [r7, #40]	; 0x28
 800424e:	415b      	adcs	r3, r3
 8004250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004256:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800425a:	f7fc f811 	bl	8000280 <__aeabi_uldivmod>
 800425e:	4602      	mov	r2, r0
 8004260:	460b      	mov	r3, r1
 8004262:	4b8c      	ldr	r3, [pc, #560]	; (8004494 <UART_SetConfig+0x38c>)
 8004264:	fba3 1302 	umull	r1, r3, r3, r2
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	2164      	movs	r1, #100	; 0x64
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	3332      	adds	r3, #50	; 0x32
 8004276:	4a87      	ldr	r2, [pc, #540]	; (8004494 <UART_SetConfig+0x38c>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004284:	441e      	add	r6, r3
 8004286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004288:	4618      	mov	r0, r3
 800428a:	f04f 0100 	mov.w	r1, #0
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	1894      	adds	r4, r2, r2
 8004294:	623c      	str	r4, [r7, #32]
 8004296:	415b      	adcs	r3, r3
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800429e:	1812      	adds	r2, r2, r0
 80042a0:	eb41 0303 	adc.w	r3, r1, r3
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	f04f 0500 	mov.w	r5, #0
 80042ac:	00dd      	lsls	r5, r3, #3
 80042ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042b2:	00d4      	lsls	r4, r2, #3
 80042b4:	4622      	mov	r2, r4
 80042b6:	462b      	mov	r3, r5
 80042b8:	1814      	adds	r4, r2, r0
 80042ba:	653c      	str	r4, [r7, #80]	; 0x50
 80042bc:	414b      	adcs	r3, r1
 80042be:	657b      	str	r3, [r7, #84]	; 0x54
 80042c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	461a      	mov	r2, r3
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	61b9      	str	r1, [r7, #24]
 80042ce:	415b      	adcs	r3, r3
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80042da:	f7fb ffd1 	bl	8000280 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <UART_SetConfig+0x38c>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a67      	ldr	r2, [pc, #412]	; (8004494 <UART_SetConfig+0x38c>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4432      	add	r2, r6
 8004308:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800430a:	e0b9      	b.n	8004480 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800430c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800430e:	461c      	mov	r4, r3
 8004310:	f04f 0500 	mov.w	r5, #0
 8004314:	4622      	mov	r2, r4
 8004316:	462b      	mov	r3, r5
 8004318:	1891      	adds	r1, r2, r2
 800431a:	6139      	str	r1, [r7, #16]
 800431c:	415b      	adcs	r3, r3
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004324:	1912      	adds	r2, r2, r4
 8004326:	eb45 0303 	adc.w	r3, r5, r3
 800432a:	f04f 0000 	mov.w	r0, #0
 800432e:	f04f 0100 	mov.w	r1, #0
 8004332:	00d9      	lsls	r1, r3, #3
 8004334:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004338:	00d0      	lsls	r0, r2, #3
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	eb12 0804 	adds.w	r8, r2, r4
 8004342:	eb43 0905 	adc.w	r9, r3, r5
 8004346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4618      	mov	r0, r3
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	008b      	lsls	r3, r1, #2
 800435a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800435e:	0082      	lsls	r2, r0, #2
 8004360:	4640      	mov	r0, r8
 8004362:	4649      	mov	r1, r9
 8004364:	f7fb ff8c 	bl	8000280 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b49      	ldr	r3, [pc, #292]	; (8004494 <UART_SetConfig+0x38c>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011e      	lsls	r6, r3, #4
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	4618      	mov	r0, r3
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	1894      	adds	r4, r2, r2
 8004384:	60bc      	str	r4, [r7, #8]
 8004386:	415b      	adcs	r3, r3
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438e:	1812      	adds	r2, r2, r0
 8004390:	eb41 0303 	adc.w	r3, r1, r3
 8004394:	f04f 0400 	mov.w	r4, #0
 8004398:	f04f 0500 	mov.w	r5, #0
 800439c:	00dd      	lsls	r5, r3, #3
 800439e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043a2:	00d4      	lsls	r4, r2, #3
 80043a4:	4622      	mov	r2, r4
 80043a6:	462b      	mov	r3, r5
 80043a8:	1814      	adds	r4, r2, r0
 80043aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80043ac:	414b      	adcs	r3, r1
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	008b      	lsls	r3, r1, #2
 80043c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043c8:	0082      	lsls	r2, r0, #2
 80043ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80043ce:	f7fb ff57 	bl	8000280 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <UART_SetConfig+0x38c>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <UART_SetConfig+0x38c>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f6:	441e      	add	r6, r3
 80043f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fa:	4618      	mov	r0, r3
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	1894      	adds	r4, r2, r2
 8004406:	603c      	str	r4, [r7, #0]
 8004408:	415b      	adcs	r3, r3
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004410:	1812      	adds	r2, r2, r0
 8004412:	eb41 0303 	adc.w	r3, r1, r3
 8004416:	f04f 0400 	mov.w	r4, #0
 800441a:	f04f 0500 	mov.w	r5, #0
 800441e:	00dd      	lsls	r5, r3, #3
 8004420:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004424:	00d4      	lsls	r4, r2, #3
 8004426:	4622      	mov	r2, r4
 8004428:	462b      	mov	r3, r5
 800442a:	eb12 0a00 	adds.w	sl, r2, r0
 800442e:	eb43 0b01 	adc.w	fp, r3, r1
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	f04f 0100 	mov.w	r1, #0
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	008b      	lsls	r3, r1, #2
 8004446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800444a:	0082      	lsls	r2, r0, #2
 800444c:	4650      	mov	r0, sl
 800444e:	4659      	mov	r1, fp
 8004450:	f7fb ff16 	bl	8000280 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <UART_SetConfig+0x38c>)
 800445a:	fba3 1302 	umull	r1, r3, r3, r2
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2164      	movs	r1, #100	; 0x64
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	3332      	adds	r3, #50	; 0x32
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <UART_SetConfig+0x38c>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4432      	add	r2, r6
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	377c      	adds	r7, #124	; 0x7c
 8004484:	46bd      	mov	sp, r7
 8004486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448a:	bf00      	nop
 800448c:	40011000 	.word	0x40011000
 8004490:	40011400 	.word	0x40011400
 8004494:	51eb851f 	.word	0x51eb851f

08004498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004498:	b084      	sub	sp, #16
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	f107 001c 	add.w	r0, r7, #28
 80044a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d122      	bne.n	80044f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 fb1c 	bl	8005b28 <USB_CoreReset>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e01a      	b.n	800452c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f001 fb10 	bl	8005b28 <USB_CoreReset>
 8004508:	4603      	mov	r3, r0
 800450a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	; 0x38
 800451e:	e005      	b.n	800452c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b01      	cmp	r3, #1
 8004530:	d10b      	bne.n	800454a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f043 0206 	orr.w	r2, r3, #6
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800454a:	7bfb      	ldrb	r3, [r7, #15]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004556:	b004      	add	sp, #16
 8004558:	4770      	bx	lr
	...

0800455c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d165      	bne.n	800463c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a41      	ldr	r2, [pc, #260]	; (8004678 <USB_SetTurnaroundTime+0x11c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d906      	bls.n	8004586 <USB_SetTurnaroundTime+0x2a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a40      	ldr	r2, [pc, #256]	; (800467c <USB_SetTurnaroundTime+0x120>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d202      	bcs.n	8004586 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004580:	230f      	movs	r3, #15
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e062      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a3c      	ldr	r2, [pc, #240]	; (800467c <USB_SetTurnaroundTime+0x120>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d306      	bcc.n	800459c <USB_SetTurnaroundTime+0x40>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4a3b      	ldr	r2, [pc, #236]	; (8004680 <USB_SetTurnaroundTime+0x124>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d202      	bcs.n	800459c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004596:	230e      	movs	r3, #14
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e057      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4a38      	ldr	r2, [pc, #224]	; (8004680 <USB_SetTurnaroundTime+0x124>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d306      	bcc.n	80045b2 <USB_SetTurnaroundTime+0x56>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a37      	ldr	r2, [pc, #220]	; (8004684 <USB_SetTurnaroundTime+0x128>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d202      	bcs.n	80045b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045ac:	230d      	movs	r3, #13
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e04c      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4a33      	ldr	r2, [pc, #204]	; (8004684 <USB_SetTurnaroundTime+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d306      	bcc.n	80045c8 <USB_SetTurnaroundTime+0x6c>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a32      	ldr	r2, [pc, #200]	; (8004688 <USB_SetTurnaroundTime+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045c2:	230c      	movs	r3, #12
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e041      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <USB_SetTurnaroundTime+0x12c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d906      	bls.n	80045de <USB_SetTurnaroundTime+0x82>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a2e      	ldr	r2, [pc, #184]	; (800468c <USB_SetTurnaroundTime+0x130>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d802      	bhi.n	80045de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045d8:	230b      	movs	r3, #11
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e036      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <USB_SetTurnaroundTime+0x130>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d906      	bls.n	80045f4 <USB_SetTurnaroundTime+0x98>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4a29      	ldr	r2, [pc, #164]	; (8004690 <USB_SetTurnaroundTime+0x134>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d802      	bhi.n	80045f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045ee:	230a      	movs	r3, #10
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e02b      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a26      	ldr	r2, [pc, #152]	; (8004690 <USB_SetTurnaroundTime+0x134>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d906      	bls.n	800460a <USB_SetTurnaroundTime+0xae>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a25      	ldr	r2, [pc, #148]	; (8004694 <USB_SetTurnaroundTime+0x138>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d202      	bcs.n	800460a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004604:	2309      	movs	r3, #9
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e020      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <USB_SetTurnaroundTime+0x138>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d306      	bcc.n	8004620 <USB_SetTurnaroundTime+0xc4>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a20      	ldr	r2, [pc, #128]	; (8004698 <USB_SetTurnaroundTime+0x13c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d802      	bhi.n	8004620 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800461a:	2308      	movs	r3, #8
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e015      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <USB_SetTurnaroundTime+0x13c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d906      	bls.n	8004636 <USB_SetTurnaroundTime+0xda>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <USB_SetTurnaroundTime+0x140>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d202      	bcs.n	8004636 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004630:	2307      	movs	r3, #7
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e00a      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004636:	2306      	movs	r3, #6
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e007      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004642:	2309      	movs	r3, #9
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e001      	b.n	800464c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004648:	2309      	movs	r3, #9
 800464a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	029b      	lsls	r3, r3, #10
 8004660:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	00d8acbf 	.word	0x00d8acbf
 800467c:	00e4e1c0 	.word	0x00e4e1c0
 8004680:	00f42400 	.word	0x00f42400
 8004684:	01067380 	.word	0x01067380
 8004688:	011a499f 	.word	0x011a499f
 800468c:	01312cff 	.word	0x01312cff
 8004690:	014ca43f 	.word	0x014ca43f
 8004694:	016e3600 	.word	0x016e3600
 8004698:	01a6ab1f 	.word	0x01a6ab1f
 800469c:	01e84800 	.word	0x01e84800

080046a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 0201 	orr.w	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0201 	bic.w	r2, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d115      	bne.n	8004732 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004712:	2001      	movs	r0, #1
 8004714:	f7fc fdbe 	bl	8001294 <HAL_Delay>
      ms++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f001 f972 	bl	8005a08 <USB_GetMode>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d01e      	beq.n	8004768 <USB_SetCurrentMode+0x84>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b31      	cmp	r3, #49	; 0x31
 800472e:	d9f0      	bls.n	8004712 <USB_SetCurrentMode+0x2e>
 8004730:	e01a      	b.n	8004768 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d115      	bne.n	8004764 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004744:	2001      	movs	r0, #1
 8004746:	f7fc fda5 	bl	8001294 <HAL_Delay>
      ms++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 f959 	bl	8005a08 <USB_GetMode>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <USB_SetCurrentMode+0x84>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b31      	cmp	r3, #49	; 0x31
 8004760:	d9f0      	bls.n	8004744 <USB_SetCurrentMode+0x60>
 8004762:	e001      	b.n	8004768 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e005      	b.n	8004774 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b32      	cmp	r3, #50	; 0x32
 800476c:	d101      	bne.n	8004772 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800477c:	b084      	sub	sp, #16
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800478a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004796:	2300      	movs	r3, #0
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	e009      	b.n	80047b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	3340      	adds	r3, #64	; 0x40
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	2200      	movs	r2, #0
 80047a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3301      	adds	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b0e      	cmp	r3, #14
 80047b4:	d9f2      	bls.n	800479c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11c      	bne.n	80047f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ca:	f043 0302 	orr.w	r3, r3, #2
 80047ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
 80047f4:	e00b      	b.n	800480e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	4619      	mov	r1, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	461a      	mov	r2, r3
 800482a:	680b      	ldr	r3, [r1, #0]
 800482c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	2b01      	cmp	r3, #1
 8004832:	d10c      	bne.n	800484e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800483a:	2100      	movs	r1, #0
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f945 	bl	8004acc <USB_SetDevSpeed>
 8004842:	e008      	b.n	8004856 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004844:	2101      	movs	r1, #1
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f940 	bl	8004acc <USB_SetDevSpeed>
 800484c:	e003      	b.n	8004856 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800484e:	2103      	movs	r1, #3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f93b 	bl	8004acc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004856:	2110      	movs	r1, #16
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f8f3 	bl	8004a44 <USB_FlushTxFifo>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f90f 	bl	8004a8c <USB_FlushRxFifo>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487e:	461a      	mov	r2, r3
 8004880:	2300      	movs	r3, #0
 8004882:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488a:	461a      	mov	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	461a      	mov	r2, r3
 8004898:	2300      	movs	r3, #0
 800489a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	e043      	b.n	800492a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b8:	d118      	bne.n	80048ec <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10a      	bne.n	80048d6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048cc:	461a      	mov	r2, r3
 80048ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	e013      	b.n	80048fe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	461a      	mov	r2, r3
 80048e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e008      	b.n	80048fe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	461a      	mov	r2, r3
 800491e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004922:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	3301      	adds	r3, #1
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3b7      	bcc.n	80048a2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	e043      	b.n	80049c0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494e:	d118      	bne.n	8004982 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e013      	b.n	8004994 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	461a      	mov	r2, r3
 800497a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e008      	b.n	8004994 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a0:	461a      	mov	r2, r3
 80049a2:	2300      	movs	r3, #0
 80049a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d3b7      	bcc.n	8004938 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	f043 0210 	orr.w	r2, r3, #16
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699a      	ldr	r2, [r3, #24]
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <USB_DevInit+0x2c4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	f043 0208 	orr.w	r2, r3, #8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d107      	bne.n	8004a30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a28:	f043 0304 	orr.w	r3, r3, #4
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a3c:	b004      	add	sp, #16
 8004a3e:	4770      	bx	lr
 8004a40:	803c3800 	.word	0x803c3800

08004a44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	019b      	lsls	r3, r3, #6
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <USB_FlushTxFifo+0x44>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d901      	bls.n	8004a6e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e006      	b.n	8004a7c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d0f1      	beq.n	8004a5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	00030d40 	.word	0x00030d40

08004a8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2210      	movs	r2, #16
 8004a9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <USB_FlushRxFifo+0x3c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e006      	b.n	8004abc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d0f1      	beq.n	8004a9e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]
 8004b22:	e00a      	b.n	8004b3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d002      	beq.n	8004b30 <USB_GetDevSpeed+0x32>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d102      	bne.n	8004b36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b30:	2302      	movs	r3, #2
 8004b32:	75fb      	strb	r3, [r7, #23]
 8004b34:	e001      	b.n	8004b3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b36:	230f      	movs	r3, #15
 8004b38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d13a      	bne.n	8004bda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	68f9      	ldr	r1, [r7, #12]
 8004b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d155      	bne.n	8004c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	059b      	lsls	r3, r3, #22
 8004bbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e036      	b.n	8004c48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11a      	bne.n	8004c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	78db      	ldrb	r3, [r3, #3]
 8004c2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d161      	bne.n	8004d38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8a:	d11f      	bne.n	8004ccc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004caa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	2101      	movs	r1, #1
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cec:	4013      	ands	r3, r2
 8004cee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d10:	4013      	ands	r3, r2
 8004d12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0159      	lsls	r1, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	440b      	add	r3, r1
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <USB_DeactivateEndpoint+0x1b0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]
 8004d36:	e060      	b.n	8004dfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4e:	d11f      	bne.n	8004d90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	43db      	mvns	r3, r3
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4013      	ands	r3, r2
 8004db2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0159      	lsls	r1, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	4619      	mov	r1, r3
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <USB_DeactivateEndpoint+0x1b4>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	ec337800 	.word	0xec337800
 8004e0c:	eff37800 	.word	0xeff37800

08004e10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 815c 	bne.w	80050ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d132      	bne.n	8004ea0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	04db      	lsls	r3, r3, #19
 8004e9c:	6113      	str	r3, [r2, #16]
 8004e9e:	e074      	b.n	8004f8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	0cdb      	lsrs	r3, r3, #19
 8004ebc:	04db      	lsls	r3, r3, #19
 8004ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6959      	ldr	r1, [r3, #20]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	440b      	add	r3, r1
 8004efc:	1e59      	subs	r1, r3, #1
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f08:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <USB_EPStartXfer+0x370>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	0148      	lsls	r0, r1, #5
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	4401      	add	r1, r0
 8004f14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	0148      	lsls	r0, r1, #5
 8004f36:	69f9      	ldr	r1, [r7, #28]
 8004f38:	4401      	add	r1, r0
 8004f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	78db      	ldrb	r3, [r3, #3]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d11f      	bne.n	8004f8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d14b      	bne.n	8005028 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d128      	bne.n	8005006 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e00f      	b.n	8005006 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e12f      	b.n	8005288 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005046:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d015      	beq.n	800507c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8117 	beq.w	8005288 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005076:	4313      	orrs	r3, r2
 8005078:	634b      	str	r3, [r1, #52]	; 0x34
 800507a:	e105      	b.n	8005288 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e00f      	b.n	80050ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	68d9      	ldr	r1, [r3, #12]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	b298      	uxth	r0, r3
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa2b 	bl	800553e <USB_WritePacket>
 80050e8:	e0ce      	b.n	8005288 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	0cdb      	lsrs	r3, r3, #19
 8005106:	04db      	lsls	r3, r3, #19
 8005108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d126      	bne.n	8005184 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517a:	6113      	str	r3, [r2, #16]
 800517c:	e036      	b.n	80051ec <USB_EPStartXfer+0x3dc>
 800517e:	bf00      	nop
 8005180:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4413      	add	r3, r2
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	8afb      	ldrh	r3, [r7, #22]
 80051aa:	04d9      	lsls	r1, r3, #19
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <USB_EPStartXfer+0x484>)
 80051ae:	400b      	ands	r3, r1
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	0148      	lsls	r0, r1, #5
 80051b4:	69f9      	ldr	r1, [r7, #28]
 80051b6:	4401      	add	r1, r0
 80051b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	8af9      	ldrh	r1, [r7, #22]
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	0148      	lsls	r0, r1, #5
 80051e0:	69f9      	ldr	r1, [r7, #28]
 80051e2:	4401      	add	r1, r0
 80051e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e8:	4313      	orrs	r3, r2
 80051ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10d      	bne.n	800520e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	68d9      	ldr	r1, [r3, #12]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	460a      	mov	r2, r1
 800520c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	78db      	ldrb	r3, [r3, #3]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d128      	bne.n	8005268 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d110      	bne.n	8005248 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e00f      	b.n	8005268 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005266:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005286:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	1ff80000 	.word	0x1ff80000

08005298 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 80cd 	bne.w	8005454 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d132      	bne.n	8005328 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	0151      	lsls	r1, r2, #5
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	440a      	add	r2, r1
 80052fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	0cdb      	lsrs	r3, r3, #19
 8005322:	04db      	lsls	r3, r3, #19
 8005324:	6113      	str	r3, [r2, #16]
 8005326:	e04e      	b.n	80053c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	0151      	lsls	r1, r2, #5
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	440a      	add	r2, r1
 800533e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005342:	0cdb      	lsrs	r3, r3, #19
 8005344:	04db      	lsls	r3, r3, #19
 8005346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005366:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800536a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d903      	bls.n	8005380 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800539e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	0148      	lsls	r0, r1, #5
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	4401      	add	r1, r0
 80053be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11e      	bne.n	800540a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e092      	b.n	8005530 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005428:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d07e      	beq.n	8005530 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544e:	4313      	orrs	r3, r2
 8005450:	634b      	str	r3, [r1, #52]	; 0x34
 8005452:	e06d      	b.n	8005530 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	0cdb      	lsrs	r3, r3, #19
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005492:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005496:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	68d9      	ldr	r1, [r3, #12]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	460a      	mov	r2, r1
 800550e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800552e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800553e:	b480      	push	{r7}
 8005540:	b089      	sub	sp, #36	; 0x24
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	4611      	mov	r1, r2
 800554a:	461a      	mov	r2, r3
 800554c:	460b      	mov	r3, r1
 800554e:	71fb      	strb	r3, [r7, #7]
 8005550:	4613      	mov	r3, r2
 8005552:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800555c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d123      	bne.n	80055ac <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005564:	88bb      	ldrh	r3, [r7, #4]
 8005566:	3303      	adds	r3, #3
 8005568:	089b      	lsrs	r3, r3, #2
 800556a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e018      	b.n	80055a4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	031a      	lsls	r2, r3, #12
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	4413      	add	r3, r2
 800557a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557e:	461a      	mov	r2, r3
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3301      	adds	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61bb      	str	r3, [r7, #24]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d3e2      	bcc.n	8005572 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	; 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b08b      	sub	sp, #44	; 0x2c
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	4613      	mov	r3, r2
 80055c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	e014      	b.n	8005610 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	601a      	str	r2, [r3, #0]
    pDest++;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	3301      	adds	r3, #1
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	3301      	adds	r3, #1
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	3301      	adds	r3, #1
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	3301      	adds	r3, #1
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	429a      	cmp	r2, r3
 8005616:	d3e6      	bcc.n	80055e6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005618:	8bfb      	ldrh	r3, [r7, #30]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01e      	beq.n	800565c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005628:	461a      	mov	r2, r3
 800562a:	f107 0310 	add.w	r3, r7, #16
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	b2da      	uxtb	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	701a      	strb	r2, [r3, #0]
      i++;
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	3301      	adds	r3, #1
 8005648:	623b      	str	r3, [r7, #32]
      pDest++;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	3301      	adds	r3, #1
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005650:	8bfb      	ldrh	r3, [r7, #30]
 8005652:	3b01      	subs	r3, #1
 8005654:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005656:	8bfb      	ldrh	r3, [r7, #30]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ea      	bne.n	8005632 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800565e:	4618      	mov	r0, r3
 8005660:	372c      	adds	r7, #44	; 0x2c
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	785b      	ldrb	r3, [r3, #1]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d12c      	bne.n	80056e0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	db12      	blt.n	80056be <USB_EPSetStall+0x54>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00f      	beq.n	80056be <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056bc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e02b      	b.n	8005738 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	db12      	blt.n	8005718 <USB_EPSetStall+0xae>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00f      	beq.n	8005718 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005716:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d128      	bne.n	80057b4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005780:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d003      	beq.n	8005792 <USB_EPClearStall+0x4c>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d138      	bne.n	8005804 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	0151      	lsls	r1, r2, #5
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	440a      	add	r2, r1
 80057a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e027      	b.n	8005804 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d003      	beq.n	80057e4 <USB_EPClearStall+0x9e>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	78db      	ldrb	r3, [r3, #3]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d10f      	bne.n	8005804 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005830:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005834:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005846:	68f9      	ldr	r1, [r7, #12]
 8005848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005878:	f023 0303 	bic.w	r3, r3, #3
 800587c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800588c:	f023 0302 	bic.w	r3, r3, #2
 8005890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ce:	f043 0302 	orr.w	r3, r3, #2
 80058d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b085      	sub	sp, #20
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4013      	ands	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058fa:	68fb      	ldr	r3, [r7, #12]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	0c1b      	lsrs	r3, r3, #16
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	b29b      	uxth	r3, r3
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800599e:	68bb      	ldr	r3, [r7, #8]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ce:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059d0:	78fb      	ldrb	r3, [r7, #3]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	fa22 f303 	lsr.w	r3, r2, r3
 80059dc:	01db      	lsls	r3, r3, #7
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4013      	ands	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059fa:	68bb      	ldr	r3, [r7, #8]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0301 	and.w	r3, r3, #1
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	460b      	mov	r3, r1
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	333c      	adds	r3, #60	; 0x3c
 8005a82:	3304      	adds	r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <USB_EP0_OutStart+0xb8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d90a      	bls.n	8005aa6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa0:	d101      	bne.n	8005aa6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e037      	b.n	8005b16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aac:	461a      	mov	r2, r3
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f043 0318 	orr.w	r3, r3, #24
 8005ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005aec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d10f      	bne.n	8005b14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	461a      	mov	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	4f54300a 	.word	0x4f54300a

08005b28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3301      	adds	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <USB_CoreReset+0x60>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e01a      	b.n	8005b7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	daf3      	bge.n	8005b34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f043 0201 	orr.w	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <USB_CoreReset+0x60>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e006      	b.n	8005b7a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d0f1      	beq.n	8005b5c <USB_CoreReset+0x34>

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	00030d40 	.word	0x00030d40

08005b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f103 0208 	add.w	r2, r3, #8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f103 0208 	add.w	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f103 0208 	add.w	r2, r3, #8
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d103      	bne.n	8005c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	e00c      	b.n	8005c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3308      	adds	r3, #8
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e002      	b.n	8005c5c <vListInsert+0x2e>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d2f6      	bcs.n	8005c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6892      	ldr	r2, [r2, #8]
 8005cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6852      	ldr	r2, [r2, #4]
 8005cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d103      	bne.n	8005cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	1e5a      	subs	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d1a:	bf00      	nop
 8005d1c:	e7fe      	b.n	8005d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d1e:	f002 f9a9 	bl	8008074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d2e:	fb01 f303 	mul.w	r3, r1, r3
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	441a      	add	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d114      	bne.n	8005d9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01a      	beq.n	8005db2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3310      	adds	r3, #16
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 f965 	bl	8007050 <xTaskRemoveFromEventList>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d012      	beq.n	8005db2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d8c:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <xQueueGenericReset+0xcc>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	e009      	b.n	8005db2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3310      	adds	r3, #16
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fef2 	bl	8005b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3324      	adds	r3, #36	; 0x24
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff feed 	bl	8005b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005db2:	f002 f98f 	bl	80080d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005db6:	2301      	movs	r3, #1
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <xQueueGenericCreate+0x2a>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	613b      	str	r3, [r7, #16]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e004      	b.n	8005e04 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	fb02 f303 	mul.w	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	3350      	adds	r3, #80	; 0x50
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f002 fa55 	bl	80082b8 <pvPortMalloc>
 8005e0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	3350      	adds	r3, #80	; 0x50
 8005e1e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e20:	79fa      	ldrb	r2, [r7, #7]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4613      	mov	r3, r2
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f805 	bl	8005e3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e32:	69bb      	ldr	r3, [r7, #24]
	}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d103      	bne.n	8005e58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e002      	b.n	8005e5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f7ff ff41 	bl	8005cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	; 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e92:	2300      	movs	r3, #0
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueGenericSend+0x32>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d103      	bne.n	8005ec4 <xQueueGenericSend+0x40>
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <xQueueGenericSend+0x44>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <xQueueGenericSend+0x46>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <xQueueGenericSend+0x60>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d103      	bne.n	8005ef2 <xQueueGenericSend+0x6e>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <xQueueGenericSend+0x72>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueGenericSend+0x74>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xQueueGenericSend+0x8e>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f12:	f001 fa39 	bl	8007388 <xTaskGetSchedulerState>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <xQueueGenericSend+0x9e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <xQueueGenericSend+0xa2>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <xQueueGenericSend+0xa4>
 8005f26:	2300      	movs	r3, #0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xQueueGenericSend+0xbe>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	61fb      	str	r3, [r7, #28]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f42:	f002 f897 	bl	8008074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <xQueueGenericSend+0xd4>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d129      	bne.n	8005fac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f5e:	f000 fb2b 	bl	80065b8 <prvCopyDataToQueue>
 8005f62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d010      	beq.n	8005f8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f86d 	bl	8007050 <xTaskRemoveFromEventList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	; (800607c <xQueueGenericSend+0x1f8>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	e00a      	b.n	8005fa4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f94:	4b39      	ldr	r3, [pc, #228]	; (800607c <xQueueGenericSend+0x1f8>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fa4:	f002 f896 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e063      	b.n	8006074 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fb2:	f002 f88f 	bl	80080d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e05c      	b.n	8006074 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f8a5 	bl	8007114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fce:	f002 f881 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fd2:	f000 fe1f 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fd6:	f002 f84d 	bl	8008074 <vPortEnterCritical>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fe0:	b25b      	sxtb	r3, r3
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d103      	bne.n	8005ff0 <xQueueGenericSend+0x16c>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ff6:	b25b      	sxtb	r3, r3
 8005ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffc:	d103      	bne.n	8006006 <xQueueGenericSend+0x182>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006006:	f002 f865 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800600a:	1d3a      	adds	r2, r7, #4
 800600c:	f107 0314 	add.w	r3, r7, #20
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f001 f894 	bl	8007140 <xTaskCheckForTimeOut>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d124      	bne.n	8006068 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800601e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006020:	f000 fbc2 	bl	80067a8 <prvIsQueueFull>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	3310      	adds	r3, #16
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	4611      	mov	r1, r2
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ffbc 	bl	8006fb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800603a:	f000 fb4d 	bl	80066d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800603e:	f000 fdf7 	bl	8006c30 <xTaskResumeAll>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f47f af7c 	bne.w	8005f42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <xQueueGenericSend+0x1f8>)
 800604c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	f3bf 8f6f 	isb	sy
 800605a:	e772      	b.n	8005f42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f000 fb3b 	bl	80066d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006062:	f000 fde5 	bl	8006c30 <xTaskResumeAll>
 8006066:	e76c      	b.n	8005f42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800606a:	f000 fb35 	bl	80066d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800606e:	f000 fddf 	bl	8006c30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006072:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006074:	4618      	mov	r0, r3
 8006076:	3738      	adds	r7, #56	; 0x38
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSendFromISR+0x3c>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <xQueueGenericSendFromISR+0x40>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <xQueueGenericSendFromISR+0x42>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	623b      	str	r3, [r7, #32]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSendFromISR+0x6a>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSendFromISR+0x6e>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSendFromISR+0x70>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61fb      	str	r3, [r7, #28]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800610a:	f002 f895 	bl	8008238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800610e:	f3ef 8211 	mrs	r2, BASEPRI
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61ba      	str	r2, [r7, #24]
 8006124:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006126:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <xQueueGenericSendFromISR+0xbc>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d12c      	bne.n	8006196 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800614c:	f000 fa34 	bl	80065b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006150:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d112      	bne.n	8006180 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d016      	beq.n	8006190 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	3324      	adds	r3, #36	; 0x24
 8006166:	4618      	mov	r0, r3
 8006168:	f000 ff72 	bl	8007050 <xTaskRemoveFromEventList>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00e      	beq.n	8006190 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	e007      	b.n	8006190 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006180:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006184:	3301      	adds	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	b25a      	sxtb	r2, r3
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006190:	2301      	movs	r3, #1
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006194:	e001      	b.n	800619a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3738      	adds	r7, #56	; 0x38
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	; 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061bc:	2300      	movs	r3, #0
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <xQueueReceive+0x30>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	623b      	str	r3, [r7, #32]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d103      	bne.n	80061ee <xQueueReceive+0x3e>
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xQueueReceive+0x42>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xQueueReceive+0x44>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueReceive+0x5e>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61fb      	str	r3, [r7, #28]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800620e:	f001 f8bb 	bl	8007388 <xTaskGetSchedulerState>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <xQueueReceive+0x6e>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <xQueueReceive+0x72>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <xQueueReceive+0x74>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10a      	bne.n	800623e <xQueueReceive+0x8e>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	61bb      	str	r3, [r7, #24]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800623e:	f001 ff19 	bl	8008074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d01f      	beq.n	800628e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006252:	f000 fa1b 	bl	800668c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	1e5a      	subs	r2, r3, #1
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00f      	beq.n	8006286 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	3310      	adds	r3, #16
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fef0 	bl	8007050 <xTaskRemoveFromEventList>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006276:	4b3d      	ldr	r3, [pc, #244]	; (800636c <xQueueReceive+0x1bc>)
 8006278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006286:	f001 ff25 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 800628a:	2301      	movs	r3, #1
 800628c:	e069      	b.n	8006362 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d103      	bne.n	800629c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006294:	f001 ff1e 	bl	80080d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006298:	2300      	movs	r3, #0
 800629a:	e062      	b.n	8006362 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062a2:	f107 0310 	add.w	r3, r7, #16
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 ff34 	bl	8007114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062b0:	f001 ff10 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062b4:	f000 fcae 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b8:	f001 fedc 	bl	8008074 <vPortEnterCritical>
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d103      	bne.n	80062d2 <xQueueReceive+0x122>
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d103      	bne.n	80062e8 <xQueueReceive+0x138>
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e8:	f001 fef4 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062ec:	1d3a      	adds	r2, r7, #4
 80062ee:	f107 0310 	add.w	r3, r7, #16
 80062f2:	4611      	mov	r1, r2
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ff23 	bl	8007140 <xTaskCheckForTimeOut>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d123      	bne.n	8006348 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006302:	f000 fa3b 	bl	800677c <prvIsQueueEmpty>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	3324      	adds	r3, #36	; 0x24
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fe4b 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800631a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631c:	f000 f9dc 	bl	80066d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006320:	f000 fc86 	bl	8006c30 <xTaskResumeAll>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d189      	bne.n	800623e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800632a:	4b10      	ldr	r3, [pc, #64]	; (800636c <xQueueReceive+0x1bc>)
 800632c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	e780      	b.n	800623e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800633c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633e:	f000 f9cb 	bl	80066d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006342:	f000 fc75 	bl	8006c30 <xTaskResumeAll>
 8006346:	e77a      	b.n	800623e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634a:	f000 f9c5 	bl	80066d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800634e:	f000 fc6f 	bl	8006c30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006354:	f000 fa12 	bl	800677c <prvIsQueueEmpty>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	f43f af6f 	beq.w	800623e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006360:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006362:	4618      	mov	r0, r3
 8006364:	3730      	adds	r7, #48	; 0x30
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08e      	sub	sp, #56	; 0x38
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006382:	2300      	movs	r3, #0
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	623b      	str	r3, [r7, #32]
}
 800639e:	bf00      	nop
 80063a0:	e7fe      	b.n	80063a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	61fb      	str	r3, [r7, #28]
}
 80063bc:	bf00      	nop
 80063be:	e7fe      	b.n	80063be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063c0:	f000 ffe2 	bl	8007388 <xTaskGetSchedulerState>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <xQueueSemaphoreTake+0x60>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <xQueueSemaphoreTake+0x64>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <xQueueSemaphoreTake+0x66>
 80063d4:	2300      	movs	r3, #0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	61bb      	str	r3, [r7, #24]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063f0:	f001 fe40 	bl	8008074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d024      	beq.n	800644a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	1e5a      	subs	r2, r3, #1
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006410:	f001 f978 	bl	8007704 <pvTaskIncrementMutexHeldCount>
 8006414:	4602      	mov	r2, r0
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00f      	beq.n	8006442 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	3310      	adds	r3, #16
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fe12 	bl	8007050 <xTaskRemoveFromEventList>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d007      	beq.n	8006442 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006432:	4b54      	ldr	r3, [pc, #336]	; (8006584 <xQueueSemaphoreTake+0x214>)
 8006434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006442:	f001 fe47 	bl	80080d4 <vPortExitCritical>
				return pdPASS;
 8006446:	2301      	movs	r3, #1
 8006448:	e097      	b.n	800657a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d111      	bne.n	8006474 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	617b      	str	r3, [r7, #20]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800646c:	f001 fe32 	bl	80080d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006470:	2300      	movs	r3, #0
 8006472:	e082      	b.n	800657a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fe48 	bl	8007114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006488:	f001 fe24 	bl	80080d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800648c:	f000 fbc2 	bl	8006c14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006490:	f001 fdf0 	bl	8008074 <vPortEnterCritical>
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d103      	bne.n	80064aa <xQueueSemaphoreTake+0x13a>
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d103      	bne.n	80064c0 <xQueueSemaphoreTake+0x150>
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c0:	f001 fe08 	bl	80080d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c4:	463a      	mov	r2, r7
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fe37 	bl	8007140 <xTaskCheckForTimeOut>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d132      	bne.n	800653e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064da:	f000 f94f 	bl	800677c <prvIsQueueEmpty>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d026      	beq.n	8006532 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064ec:	f001 fdc2 	bl	8008074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 ff65 	bl	80073c4 <xTaskPriorityInherit>
 80064fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064fc:	f001 fdea 	bl	80080d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd51 	bl	8006fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800650e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006510:	f000 f8e2 	bl	80066d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006514:	f000 fb8c 	bl	8006c30 <xTaskResumeAll>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	f47f af68 	bne.w	80063f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <xQueueSemaphoreTake+0x214>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	e75e      	b.n	80063f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006534:	f000 f8d0 	bl	80066d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006538:	f000 fb7a 	bl	8006c30 <xTaskResumeAll>
 800653c:	e758      	b.n	80063f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800653e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006540:	f000 f8ca 	bl	80066d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006544:	f000 fb74 	bl	8006c30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654a:	f000 f917 	bl	800677c <prvIsQueueEmpty>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f43f af4d 	beq.w	80063f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800655c:	f001 fd8a 	bl	8008074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006562:	f000 f811 	bl	8006588 <prvGetDisinheritPriorityAfterTimeout>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f82e 	bl	80075d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006574:	f001 fdae 	bl	80080d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800657a:	4618      	mov	r0, r3
 800657c:	3738      	adds	r7, #56	; 0x38
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d006      	beq.n	80065a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1c3 0305 	rsb	r3, r3, #5
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e001      	b.n	80065aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065aa:	68fb      	ldr	r3, [r7, #12]
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d14d      	bne.n	800667a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 ff6e 	bl	80074c4 <xTaskPriorityDisinherit>
 80065e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	609a      	str	r2, [r3, #8]
 80065f0:	e043      	b.n	800667a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d119      	bne.n	800662c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6858      	ldr	r0, [r3, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	461a      	mov	r2, r3
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	f003 ffc4 	bl	800a590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	441a      	add	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d32b      	bcc.n	800667a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	e026      	b.n	800667a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68d8      	ldr	r0, [r3, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	461a      	mov	r2, r3
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	f003 ffaa 	bl	800a590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	425b      	negs	r3, r3
 8006646:	441a      	add	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d207      	bcs.n	8006668 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	425b      	negs	r3, r3
 8006662:	441a      	add	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d105      	bne.n	800667a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	3b01      	subs	r3, #1
 8006678:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006682:	697b      	ldr	r3, [r7, #20]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d018      	beq.n	80066d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	441a      	add	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d303      	bcc.n	80066c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68d9      	ldr	r1, [r3, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	461a      	mov	r2, r3
 80066ca:	6838      	ldr	r0, [r7, #0]
 80066cc:	f003 ff60 	bl	800a590 <memcpy>
	}
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066e0:	f001 fcc8 	bl	8008074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066ec:	e011      	b.n	8006712 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d012      	beq.n	800671c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	3324      	adds	r3, #36	; 0x24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fca8 	bl	8007050 <xTaskRemoveFromEventList>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006706:	f000 fd7d 	bl	8007204 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	3b01      	subs	r3, #1
 800670e:	b2db      	uxtb	r3, r3
 8006710:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006716:	2b00      	cmp	r3, #0
 8006718:	dce9      	bgt.n	80066ee <prvUnlockQueue+0x16>
 800671a:	e000      	b.n	800671e <prvUnlockQueue+0x46>
					break;
 800671c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	22ff      	movs	r2, #255	; 0xff
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006726:	f001 fcd5 	bl	80080d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800672a:	f001 fca3 	bl	8008074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006734:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006736:	e011      	b.n	800675c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d012      	beq.n	8006766 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3310      	adds	r3, #16
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fc83 	bl	8007050 <xTaskRemoveFromEventList>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006750:	f000 fd58 	bl	8007204 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	3b01      	subs	r3, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800675c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	dce9      	bgt.n	8006738 <prvUnlockQueue+0x60>
 8006764:	e000      	b.n	8006768 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006766:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	22ff      	movs	r2, #255	; 0xff
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006770:	f001 fcb0 	bl	80080d4 <vPortExitCritical>
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006784:	f001 fc76 	bl	8008074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006790:	2301      	movs	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e001      	b.n	800679a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800679a:	f001 fc9b 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067b0:	f001 fc60 	bl	8008074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	429a      	cmp	r2, r3
 80067be:	d102      	bne.n	80067c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e001      	b.n	80067ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ca:	f001 fc83 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 80067ce:	68fb      	ldr	r3, [r7, #12]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	e014      	b.n	8006812 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067e8:	4a0f      	ldr	r2, [pc, #60]	; (8006828 <vQueueAddToRegistry+0x50>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10b      	bne.n	800680c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067f4:	490c      	ldr	r1, [pc, #48]	; (8006828 <vQueueAddToRegistry+0x50>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067fe:	4a0a      	ldr	r2, [pc, #40]	; (8006828 <vQueueAddToRegistry+0x50>)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800680a:	e006      	b.n	800681a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b07      	cmp	r3, #7
 8006816:	d9e7      	bls.n	80067e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006818:	bf00      	nop
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	200130a0 	.word	0x200130a0

0800682c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800683c:	f001 fc1a 	bl	8008074 <vPortEnterCritical>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006846:	b25b      	sxtb	r3, r3
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d103      	bne.n	8006856 <vQueueWaitForMessageRestricted+0x2a>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800685c:	b25b      	sxtb	r3, r3
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d103      	bne.n	800686c <vQueueWaitForMessageRestricted+0x40>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686c:	f001 fc32 	bl	80080d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fbb9 	bl	8006ff8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f7ff ff26 	bl	80066d8 <prvUnlockQueue>
	}
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af04      	add	r7, sp, #16
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 fd05 	bl	80082b8 <pvPortMalloc>
 80068ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00e      	beq.n	80068d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068b6:	2058      	movs	r0, #88	; 0x58
 80068b8:	f001 fcfe 	bl	80082b8 <pvPortMalloc>
 80068bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
 80068ca:	e005      	b.n	80068d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068cc:	6978      	ldr	r0, [r7, #20]
 80068ce:	f001 fdb7 	bl	8008440 <vPortFree>
 80068d2:	e001      	b.n	80068d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d013      	beq.n	8006906 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	2300      	movs	r3, #0
 80068e2:	9303      	str	r3, [sp, #12]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f80e 	bl	8006916 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068fa:	69f8      	ldr	r0, [r7, #28]
 80068fc:	f000 f89a 	bl	8006a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006900:	2301      	movs	r3, #1
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e002      	b.n	800690c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006906:	f04f 33ff 	mov.w	r3, #4294967295
 800690a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800690c:	69bb      	ldr	r3, [r7, #24]
	}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b088      	sub	sp, #32
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	461a      	mov	r2, r3
 800692e:	21a5      	movs	r1, #165	; 0xa5
 8006930:	f003 fe3c 	bl	800a5ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800693e:	3b01      	subs	r3, #1
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	f023 0307 	bic.w	r3, r3, #7
 800694c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	f003 0307 	and.w	r3, r3, #7
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <prvInitialiseNewTask+0x58>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	617b      	str	r3, [r7, #20]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01f      	beq.n	80069b4 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	e012      	b.n	80069a0 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	3334      	adds	r3, #52	; 0x34
 800698a:	460a      	mov	r2, r1
 800698c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	3301      	adds	r3, #1
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2b09      	cmp	r3, #9
 80069a4:	d9e9      	bls.n	800697a <prvInitialiseNewTask+0x64>
 80069a6:	e000      	b.n	80069aa <prvInitialiseNewTask+0x94>
			{
				break;
 80069a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069b2:	e003      	b.n	80069bc <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d901      	bls.n	80069c6 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069c2:	2304      	movs	r3, #4
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2200      	movs	r2, #0
 80069d6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	3304      	adds	r3, #4
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff f8f5 	bl	8005bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	3318      	adds	r3, #24
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff f8f0 	bl	8005bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f1c3 0205 	rsb	r2, r3, #5
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a00:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	2200      	movs	r2, #0
 8006a06:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	69b8      	ldr	r0, [r7, #24]
 8006a16:	f001 fa01 	bl	8007e1c <pxPortInitialiseStack>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a2c:	bf00      	nop
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a3c:	f001 fb1a 	bl	8008074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <prvAddNewTaskToReadyList+0xc0>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	4a2b      	ldr	r2, [pc, #172]	; (8006af4 <prvAddNewTaskToReadyList+0xc0>)
 8006a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a4a:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <prvAddNewTaskToReadyList+0xc4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d109      	bne.n	8006a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a52:	4a29      	ldr	r2, [pc, #164]	; (8006af8 <prvAddNewTaskToReadyList+0xc4>)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a58:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <prvAddNewTaskToReadyList+0xc0>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d110      	bne.n	8006a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a60:	f000 fbf4 	bl	800724c <prvInitialiseTaskLists>
 8006a64:	e00d      	b.n	8006a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a66:	4b25      	ldr	r3, [pc, #148]	; (8006afc <prvAddNewTaskToReadyList+0xc8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <prvAddNewTaskToReadyList+0xc4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d802      	bhi.n	8006a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <prvAddNewTaskToReadyList+0xc4>)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a82:	4b1f      	ldr	r3, [pc, #124]	; (8006b00 <prvAddNewTaskToReadyList+0xcc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	4a1d      	ldr	r2, [pc, #116]	; (8006b00 <prvAddNewTaskToReadyList+0xcc>)
 8006a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a8c:	4b1c      	ldr	r3, [pc, #112]	; (8006b00 <prvAddNewTaskToReadyList+0xcc>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	2201      	movs	r2, #1
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <prvAddNewTaskToReadyList+0xd0>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <prvAddNewTaskToReadyList+0xd0>)
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvAddNewTaskToReadyList+0xd4>)
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4619      	mov	r1, r3
 8006abc:	4610      	mov	r0, r2
 8006abe:	f7ff f892 	bl	8005be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ac2:	f001 fb07 	bl	80080d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <prvAddNewTaskToReadyList+0xc8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00e      	beq.n	8006aec <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <prvAddNewTaskToReadyList+0xc4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d207      	bcs.n	8006aec <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <prvAddNewTaskToReadyList+0xd8>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	200002c8 	.word	0x200002c8
 8006af8:	200001f0 	.word	0x200001f0
 8006afc:	200002d4 	.word	0x200002d4
 8006b00:	200002e4 	.word	0x200002e4
 8006b04:	200002d0 	.word	0x200002d0
 8006b08:	200001f4 	.word	0x200001f4
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d017      	beq.n	8006b52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <vTaskDelay+0x60>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <vTaskDelay+0x30>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	60bb      	str	r3, [r7, #8]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b40:	f000 f868 	bl	8006c14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b44:	2100      	movs	r1, #0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fdf0 	bl	800772c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b4c:	f000 f870 	bl	8006c30 <xTaskResumeAll>
 8006b50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d107      	bne.n	8006b68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <vTaskDelay+0x64>)
 8006b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200002f0 	.word	0x200002f0
 8006b74:	e000ed04 	.word	0xe000ed04

08006b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006b7e:	4b1f      	ldr	r3, [pc, #124]	; (8006bfc <vTaskStartScheduler+0x84>)
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	2300      	movs	r3, #0
 8006b88:	2282      	movs	r2, #130	; 0x82
 8006b8a:	491d      	ldr	r1, [pc, #116]	; (8006c00 <vTaskStartScheduler+0x88>)
 8006b8c:	481d      	ldr	r0, [pc, #116]	; (8006c04 <vTaskStartScheduler+0x8c>)
 8006b8e:	f7ff fe81 	bl	8006894 <xTaskCreate>
 8006b92:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d102      	bne.n	8006ba0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8006b9a:	f000 fe2d 	bl	80077f8 <xTimerCreateTimerTask>
 8006b9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d116      	bne.n	8006bd4 <vTaskStartScheduler+0x5c>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	60bb      	str	r3, [r7, #8]
}
 8006bb8:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bba:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <vTaskStartScheduler+0x90>)
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <vTaskStartScheduler+0x94>)
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <vTaskStartScheduler+0x98>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bce:	f001 f9af 	bl	8007f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bd2:	e00e      	b.n	8006bf2 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d10a      	bne.n	8006bf2 <vTaskStartScheduler+0x7a>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	607b      	str	r3, [r7, #4]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <vTaskStartScheduler+0x78>
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	200002ec 	.word	0x200002ec
 8006c00:	0800ae28 	.word	0x0800ae28
 8006c04:	0800721d 	.word	0x0800721d
 8006c08:	200002e8 	.word	0x200002e8
 8006c0c:	200002d4 	.word	0x200002d4
 8006c10:	200002cc 	.word	0x200002cc

08006c14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <vTaskSuspendAll+0x18>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	4a03      	ldr	r2, [pc, #12]	; (8006c2c <vTaskSuspendAll+0x18>)
 8006c20:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c22:	bf00      	nop
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	200002f0 	.word	0x200002f0

08006c30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c3e:	4b41      	ldr	r3, [pc, #260]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <xTaskResumeAll+0x2c>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	603b      	str	r3, [r7, #0]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c5c:	f001 fa0a 	bl	8008074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c60:	4b38      	ldr	r3, [pc, #224]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	4a37      	ldr	r2, [pc, #220]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c6a:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <xTaskResumeAll+0x114>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d161      	bne.n	8006d36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c72:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <xTaskResumeAll+0x118>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d05d      	beq.n	8006d36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c7a:	e02e      	b.n	8006cda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c7c:	4b33      	ldr	r3, [pc, #204]	; (8006d4c <xTaskResumeAll+0x11c>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3318      	adds	r3, #24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff f809 	bl	8005ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f804 	bl	8005ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	4b2b      	ldr	r3, [pc, #172]	; (8006d50 <xTaskResumeAll+0x120>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <xTaskResumeAll+0x120>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <xTaskResumeAll+0x124>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fe ff90 	bl	8005be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cca:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <xTaskResumeAll+0x128>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006cd4:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cda:	4b1c      	ldr	r3, [pc, #112]	; (8006d4c <xTaskResumeAll+0x11c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cc      	bne.n	8006c7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ce8:	f000 fb2e 	bl	8007348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cec:	4b1c      	ldr	r3, [pc, #112]	; (8006d60 <xTaskResumeAll+0x130>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cf8:	f000 f846 	bl	8006d88 <xTaskIncrementTick>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d02:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f1      	bne.n	8006cf8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006d14:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <xTaskResumeAll+0x130>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <xTaskResumeAll+0x12c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d22:	2301      	movs	r3, #1
 8006d24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d26:	4b0f      	ldr	r3, [pc, #60]	; (8006d64 <xTaskResumeAll+0x134>)
 8006d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d36:	f001 f9cd 	bl	80080d4 <vPortExitCritical>

	return xAlreadyYielded;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	200002f0 	.word	0x200002f0
 8006d48:	200002c8 	.word	0x200002c8
 8006d4c:	20000288 	.word	0x20000288
 8006d50:	200002d0 	.word	0x200002d0
 8006d54:	200001f4 	.word	0x200001f4
 8006d58:	200001f0 	.word	0x200001f0
 8006d5c:	200002dc 	.word	0x200002dc
 8006d60:	200002d8 	.word	0x200002d8
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <xTaskGetTickCount+0x1c>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d74:	687b      	ldr	r3, [r7, #4]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	200002cc 	.word	0x200002cc

08006d88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d92:	4b4e      	ldr	r3, [pc, #312]	; (8006ecc <xTaskIncrementTick+0x144>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 8088 	bne.w	8006eac <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d9c:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <xTaskIncrementTick+0x148>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006da4:	4a4a      	ldr	r2, [pc, #296]	; (8006ed0 <xTaskIncrementTick+0x148>)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d120      	bne.n	8006df2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006db0:	4b48      	ldr	r3, [pc, #288]	; (8006ed4 <xTaskIncrementTick+0x14c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	603b      	str	r3, [r7, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	e7fe      	b.n	8006dce <xTaskIncrementTick+0x46>
 8006dd0:	4b40      	ldr	r3, [pc, #256]	; (8006ed4 <xTaskIncrementTick+0x14c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	4b40      	ldr	r3, [pc, #256]	; (8006ed8 <xTaskIncrementTick+0x150>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3e      	ldr	r2, [pc, #248]	; (8006ed4 <xTaskIncrementTick+0x14c>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4a3e      	ldr	r2, [pc, #248]	; (8006ed8 <xTaskIncrementTick+0x150>)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	4b3d      	ldr	r3, [pc, #244]	; (8006edc <xTaskIncrementTick+0x154>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	4a3c      	ldr	r2, [pc, #240]	; (8006edc <xTaskIncrementTick+0x154>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	f000 faab 	bl	8007348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006df2:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d348      	bcc.n	8006e8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dfc:	4b35      	ldr	r3, [pc, #212]	; (8006ed4 <xTaskIncrementTick+0x14c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e06:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	601a      	str	r2, [r3, #0]
					break;
 8006e0e:	e03e      	b.n	8006e8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e10:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <xTaskIncrementTick+0x14c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d203      	bcs.n	8006e30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e28:	4a2d      	ldr	r2, [pc, #180]	; (8006ee0 <xTaskIncrementTick+0x158>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e2e:	e02e      	b.n	8006e8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe ff33 	bl	8005ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	3318      	adds	r3, #24
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe ff2a 	bl	8005ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	2201      	movs	r2, #1
 8006e52:	409a      	lsls	r2, r3
 8006e54:	4b23      	ldr	r3, [pc, #140]	; (8006ee4 <xTaskIncrementTick+0x15c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <xTaskIncrementTick+0x15c>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <xTaskIncrementTick+0x160>)
 8006e6c:	441a      	add	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f7fe feb6 	bl	8005be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7e:	4b1b      	ldr	r3, [pc, #108]	; (8006eec <xTaskIncrementTick+0x164>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d3b9      	bcc.n	8006dfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8c:	e7b6      	b.n	8006dfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e8e:	4b17      	ldr	r3, [pc, #92]	; (8006eec <xTaskIncrementTick+0x164>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4914      	ldr	r1, [pc, #80]	; (8006ee8 <xTaskIncrementTick+0x160>)
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d907      	bls.n	8006eb6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	e004      	b.n	8006eb6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006eac:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <xTaskIncrementTick+0x168>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <xTaskIncrementTick+0x168>)
 8006eb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006eb6:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <xTaskIncrementTick+0x16c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ec2:	697b      	ldr	r3, [r7, #20]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	200002f0 	.word	0x200002f0
 8006ed0:	200002cc 	.word	0x200002cc
 8006ed4:	20000280 	.word	0x20000280
 8006ed8:	20000284 	.word	0x20000284
 8006edc:	200002e0 	.word	0x200002e0
 8006ee0:	200002e8 	.word	0x200002e8
 8006ee4:	200002d0 	.word	0x200002d0
 8006ee8:	200001f4 	.word	0x200001f4
 8006eec:	200001f0 	.word	0x200001f0
 8006ef0:	200002d8 	.word	0x200002d8
 8006ef4:	200002dc 	.word	0x200002dc

08006ef8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006efe:	4b27      	ldr	r3, [pc, #156]	; (8006f9c <vTaskSwitchContext+0xa4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f06:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <vTaskSwitchContext+0xa8>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f0c:	e03f      	b.n	8006f8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f0e:	4b24      	ldr	r3, [pc, #144]	; (8006fa0 <vTaskSwitchContext+0xa8>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f14:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <vTaskSwitchContext+0xac>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	fab3 f383 	clz	r3, r3
 8006f20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	f1c3 031f 	rsb	r3, r3, #31
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	491f      	ldr	r1, [pc, #124]	; (8006fa8 <vTaskSwitchContext+0xb0>)
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	607b      	str	r3, [r7, #4]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <vTaskSwitchContext+0x5a>
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <vTaskSwitchContext+0xb0>)
 8006f60:	4413      	add	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	605a      	str	r2, [r3, #4]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3308      	adds	r3, #8
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d104      	bne.n	8006f84 <vTaskSwitchContext+0x8c>
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	605a      	str	r2, [r3, #4]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	4a08      	ldr	r2, [pc, #32]	; (8006fac <vTaskSwitchContext+0xb4>)
 8006f8c:	6013      	str	r3, [r2, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	200002f0 	.word	0x200002f0
 8006fa0:	200002dc 	.word	0x200002dc
 8006fa4:	200002d0 	.word	0x200002d0
 8006fa8:	200001f4 	.word	0x200001f4
 8006fac:	200001f0 	.word	0x200001f0

08006fb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10a      	bne.n	8006fd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	f383 8811 	msr	BASEPRI, r3
 8006fc8:	f3bf 8f6f 	isb	sy
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	60fb      	str	r3, [r7, #12]
}
 8006fd2:	bf00      	nop
 8006fd4:	e7fe      	b.n	8006fd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <vTaskPlaceOnEventList+0x44>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3318      	adds	r3, #24
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe fe25 	bl	8005c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f000 fba0 	bl	800772c <prvAddCurrentTaskToDelayedList>
}
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	200001f0 	.word	0x200001f0

08006ff8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	617b      	str	r3, [r7, #20]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007020:	4b0a      	ldr	r3, [pc, #40]	; (800704c <vTaskPlaceOnEventListRestricted+0x54>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3318      	adds	r3, #24
 8007026:	4619      	mov	r1, r3
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7fe fddc 	bl	8005be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007034:	f04f 33ff 	mov.w	r3, #4294967295
 8007038:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	68b8      	ldr	r0, [r7, #8]
 800703e:	f000 fb75 	bl	800772c <prvAddCurrentTaskToDelayedList>
	}
 8007042:	bf00      	nop
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	200001f0 	.word	0x200001f0

08007050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60fb      	str	r3, [r7, #12]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	3318      	adds	r3, #24
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fe0d 	bl	8005ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007086:	4b1d      	ldr	r3, [pc, #116]	; (80070fc <xTaskRemoveFromEventList+0xac>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d11c      	bne.n	80070c8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	3304      	adds	r3, #4
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fe04 	bl	8005ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	2201      	movs	r2, #1
 800709e:	409a      	lsls	r2, r3
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <xTaskRemoveFromEventList+0xb0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	4a16      	ldr	r2, [pc, #88]	; (8007100 <xTaskRemoveFromEventList+0xb0>)
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <xTaskRemoveFromEventList+0xb4>)
 80070b8:	441a      	add	r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3304      	adds	r3, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f7fe fd90 	bl	8005be6 <vListInsertEnd>
 80070c6:	e005      	b.n	80070d4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	3318      	adds	r3, #24
 80070cc:	4619      	mov	r1, r3
 80070ce:	480e      	ldr	r0, [pc, #56]	; (8007108 <xTaskRemoveFromEventList+0xb8>)
 80070d0:	f7fe fd89 	bl	8005be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <xTaskRemoveFromEventList+0xbc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	429a      	cmp	r2, r3
 80070e0:	d905      	bls.n	80070ee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070e6:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <xTaskRemoveFromEventList+0xc0>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e001      	b.n	80070f2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070f2:	697b      	ldr	r3, [r7, #20]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	200002f0 	.word	0x200002f0
 8007100:	200002d0 	.word	0x200002d0
 8007104:	200001f4 	.word	0x200001f4
 8007108:	20000288 	.word	0x20000288
 800710c:	200001f0 	.word	0x200001f0
 8007110:	200002dc 	.word	0x200002dc

08007114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <vTaskInternalSetTimeOutState+0x24>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <vTaskInternalSetTimeOutState+0x28>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	605a      	str	r2, [r3, #4]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	200002e0 	.word	0x200002e0
 800713c:	200002cc 	.word	0x200002cc

08007140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b088      	sub	sp, #32
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	613b      	str	r3, [r7, #16]
}
 8007162:	bf00      	nop
 8007164:	e7fe      	b.n	8007164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007182:	f000 ff77 	bl	8008074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007186:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <xTaskCheckForTimeOut+0xbc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d102      	bne.n	80071a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	e023      	b.n	80071ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <xTaskCheckForTimeOut+0xc0>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d007      	beq.n	80071c2 <xTaskCheckForTimeOut+0x82>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d302      	bcc.n	80071c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071bc:	2301      	movs	r3, #1
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	e015      	b.n	80071ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d20b      	bcs.n	80071e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	1ad2      	subs	r2, r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff ff9b 	bl	8007114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	e004      	b.n	80071ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071ee:	f000 ff71 	bl	80080d4 <vPortExitCritical>

	return xReturn;
 80071f2:	69fb      	ldr	r3, [r7, #28]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	200002cc 	.word	0x200002cc
 8007200:	200002e0 	.word	0x200002e0

08007204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007208:	4b03      	ldr	r3, [pc, #12]	; (8007218 <vTaskMissedYield+0x14>)
 800720a:	2201      	movs	r2, #1
 800720c:	601a      	str	r2, [r3, #0]
}
 800720e:	bf00      	nop
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	200002dc 	.word	0x200002dc

0800721c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007224:	f000 f852 	bl	80072cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007228:	4b06      	ldr	r3, [pc, #24]	; (8007244 <prvIdleTask+0x28>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d9f9      	bls.n	8007224 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <prvIdleTask+0x2c>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007240:	e7f0      	b.n	8007224 <prvIdleTask+0x8>
 8007242:	bf00      	nop
 8007244:	200001f4 	.word	0x200001f4
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007252:	2300      	movs	r3, #0
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	e00c      	b.n	8007272 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4a12      	ldr	r2, [pc, #72]	; (80072ac <prvInitialiseTaskLists+0x60>)
 8007264:	4413      	add	r3, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fc90 	bl	8005b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3301      	adds	r3, #1
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d9ef      	bls.n	8007258 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007278:	480d      	ldr	r0, [pc, #52]	; (80072b0 <prvInitialiseTaskLists+0x64>)
 800727a:	f7fe fc87 	bl	8005b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800727e:	480d      	ldr	r0, [pc, #52]	; (80072b4 <prvInitialiseTaskLists+0x68>)
 8007280:	f7fe fc84 	bl	8005b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007284:	480c      	ldr	r0, [pc, #48]	; (80072b8 <prvInitialiseTaskLists+0x6c>)
 8007286:	f7fe fc81 	bl	8005b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800728a:	480c      	ldr	r0, [pc, #48]	; (80072bc <prvInitialiseTaskLists+0x70>)
 800728c:	f7fe fc7e 	bl	8005b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007290:	480b      	ldr	r0, [pc, #44]	; (80072c0 <prvInitialiseTaskLists+0x74>)
 8007292:	f7fe fc7b 	bl	8005b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007296:	4b0b      	ldr	r3, [pc, #44]	; (80072c4 <prvInitialiseTaskLists+0x78>)
 8007298:	4a05      	ldr	r2, [pc, #20]	; (80072b0 <prvInitialiseTaskLists+0x64>)
 800729a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800729c:	4b0a      	ldr	r3, [pc, #40]	; (80072c8 <prvInitialiseTaskLists+0x7c>)
 800729e:	4a05      	ldr	r2, [pc, #20]	; (80072b4 <prvInitialiseTaskLists+0x68>)
 80072a0:	601a      	str	r2, [r3, #0]
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	200001f4 	.word	0x200001f4
 80072b0:	20000258 	.word	0x20000258
 80072b4:	2000026c 	.word	0x2000026c
 80072b8:	20000288 	.word	0x20000288
 80072bc:	2000029c 	.word	0x2000029c
 80072c0:	200002b4 	.word	0x200002b4
 80072c4:	20000280 	.word	0x20000280
 80072c8:	20000284 	.word	0x20000284

080072cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072d2:	e019      	b.n	8007308 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072d4:	f000 fece 	bl	8008074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d8:	4b10      	ldr	r3, [pc, #64]	; (800731c <prvCheckTasksWaitingTermination+0x50>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fcdb 	bl	8005ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <prvCheckTasksWaitingTermination+0x54>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	4a0b      	ldr	r2, [pc, #44]	; (8007320 <prvCheckTasksWaitingTermination+0x54>)
 80072f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <prvCheckTasksWaitingTermination+0x58>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	4a0a      	ldr	r2, [pc, #40]	; (8007324 <prvCheckTasksWaitingTermination+0x58>)
 80072fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072fe:	f000 fee9 	bl	80080d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f810 	bl	8007328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <prvCheckTasksWaitingTermination+0x58>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e1      	bne.n	80072d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	2000029c 	.word	0x2000029c
 8007320:	200002c8 	.word	0x200002c8
 8007324:	200002b0 	.word	0x200002b0

08007328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f883 	bl	8008440 <vPortFree>
			vPortFree( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 f880 	bl	8008440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <prvResetNextTaskUnblockTime+0x38>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <prvResetNextTaskUnblockTime+0x3c>)
 800735a:	f04f 32ff 	mov.w	r2, #4294967295
 800735e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007360:	e008      	b.n	8007374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007362:	4b07      	ldr	r3, [pc, #28]	; (8007380 <prvResetNextTaskUnblockTime+0x38>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4a04      	ldr	r2, [pc, #16]	; (8007384 <prvResetNextTaskUnblockTime+0x3c>)
 8007372:	6013      	str	r3, [r2, #0]
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	20000280 	.word	0x20000280
 8007384:	200002e8 	.word	0x200002e8

08007388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800738e:	4b0b      	ldr	r3, [pc, #44]	; (80073bc <xTaskGetSchedulerState+0x34>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007396:	2301      	movs	r3, #1
 8007398:	607b      	str	r3, [r7, #4]
 800739a:	e008      	b.n	80073ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800739c:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <xTaskGetSchedulerState+0x38>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073a4:	2302      	movs	r3, #2
 80073a6:	607b      	str	r3, [r7, #4]
 80073a8:	e001      	b.n	80073ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073ae:	687b      	ldr	r3, [r7, #4]
	}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	200002d4 	.word	0x200002d4
 80073c0:	200002f0 	.word	0x200002f0

080073c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d069      	beq.n	80074ae <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4b36      	ldr	r3, [pc, #216]	; (80074b8 <xTaskPriorityInherit+0xf4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d259      	bcs.n	800749c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	db06      	blt.n	80073fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f0:	4b31      	ldr	r3, [pc, #196]	; (80074b8 <xTaskPriorityInherit+0xf4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f1c3 0205 	rsb	r2, r3, #5
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6959      	ldr	r1, [r3, #20]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4613      	mov	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a2b      	ldr	r2, [pc, #172]	; (80074bc <xTaskPriorityInherit+0xf8>)
 8007410:	4413      	add	r3, r2
 8007412:	4299      	cmp	r1, r3
 8007414:	d13a      	bne.n	800748c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3304      	adds	r3, #4
 800741a:	4618      	mov	r0, r3
 800741c:	f7fe fc40 	bl	8005ca0 <uxListRemove>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d115      	bne.n	8007452 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	4924      	ldr	r1, [pc, #144]	; (80074bc <xTaskPriorityInherit+0xf8>)
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <xTaskPriorityInherit+0x8e>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2201      	movs	r2, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43da      	mvns	r2, r3
 8007448:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <xTaskPriorityInherit+0xfc>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4013      	ands	r3, r2
 800744e:	4a1c      	ldr	r2, [pc, #112]	; (80074c0 <xTaskPriorityInherit+0xfc>)
 8007450:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007452:	4b19      	ldr	r3, [pc, #100]	; (80074b8 <xTaskPriorityInherit+0xf4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	2201      	movs	r2, #1
 8007462:	409a      	lsls	r2, r3
 8007464:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <xTaskPriorityInherit+0xfc>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4313      	orrs	r3, r2
 800746a:	4a15      	ldr	r2, [pc, #84]	; (80074c0 <xTaskPriorityInherit+0xfc>)
 800746c:	6013      	str	r3, [r2, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <xTaskPriorityInherit+0xf8>)
 800747c:	441a      	add	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	3304      	adds	r3, #4
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7fe fbae 	bl	8005be6 <vListInsertEnd>
 800748a:	e004      	b.n	8007496 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <xTaskPriorityInherit+0xf4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007496:	2301      	movs	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e008      	b.n	80074ae <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <xTaskPriorityInherit+0xf4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d201      	bcs.n	80074ae <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074ae:	68fb      	ldr	r3, [r7, #12]
	}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	200001f0 	.word	0x200001f0
 80074bc:	200001f4 	.word	0x200001f4
 80074c0:	200002d0 	.word	0x200002d0

080074c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d06e      	beq.n	80075b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074da:	4b3a      	ldr	r3, [pc, #232]	; (80075c4 <xTaskPriorityDisinherit+0x100>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d00a      	beq.n	80074fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60fb      	str	r3, [r7, #12]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d10a      	bne.n	8007518 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60bb      	str	r3, [r7, #8]
}
 8007514:	bf00      	nop
 8007516:	e7fe      	b.n	8007516 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751c:	1e5a      	subs	r2, r3, #1
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	429a      	cmp	r2, r3
 800752c:	d044      	beq.n	80075b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d140      	bne.n	80075b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	3304      	adds	r3, #4
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fbb0 	bl	8005ca0 <uxListRemove>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d115      	bne.n	8007572 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754a:	491f      	ldr	r1, [pc, #124]	; (80075c8 <xTaskPriorityDisinherit+0x104>)
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <xTaskPriorityDisinherit+0xae>
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	2201      	movs	r2, #1
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43da      	mvns	r2, r3
 8007568:	4b18      	ldr	r3, [pc, #96]	; (80075cc <xTaskPriorityDisinherit+0x108>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4013      	ands	r3, r2
 800756e:	4a17      	ldr	r2, [pc, #92]	; (80075cc <xTaskPriorityDisinherit+0x108>)
 8007570:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	f1c3 0205 	rsb	r2, r3, #5
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	2201      	movs	r2, #1
 800758c:	409a      	lsls	r2, r3
 800758e:	4b0f      	ldr	r3, [pc, #60]	; (80075cc <xTaskPriorityDisinherit+0x108>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4313      	orrs	r3, r2
 8007594:	4a0d      	ldr	r2, [pc, #52]	; (80075cc <xTaskPriorityDisinherit+0x108>)
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <xTaskPriorityDisinherit+0x104>)
 80075a6:	441a      	add	r2, r3
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3304      	adds	r3, #4
 80075ac:	4619      	mov	r1, r3
 80075ae:	4610      	mov	r0, r2
 80075b0:	f7fe fb19 	bl	8005be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075b8:	697b      	ldr	r3, [r7, #20]
	}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200001f0 	.word	0x200001f0
 80075c8:	200001f4 	.word	0x200001f4
 80075cc:	200002d0 	.word	0x200002d0

080075d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8083 	beq.w	80076f0 <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d902      	bls.n	8007618 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	e002      	b.n	800761e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800761c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	429a      	cmp	r2, r3
 8007626:	d063      	beq.n	80076f0 <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	429a      	cmp	r2, r3
 8007630:	d15e      	bne.n	80076f0 <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007632:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	429a      	cmp	r2, r3
 800763a:	d10a      	bne.n	8007652 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	60bb      	str	r3, [r7, #8]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	db04      	blt.n	8007670 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	f1c3 0205 	rsb	r2, r3, #5
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	6959      	ldr	r1, [r3, #20]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007680:	4413      	add	r3, r2
 8007682:	4299      	cmp	r1, r3
 8007684:	d134      	bne.n	80076f0 <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fb08 	bl	8005ca0 <uxListRemove>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d115      	bne.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4918      	ldr	r1, [pc, #96]	; (80076fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	2201      	movs	r2, #1
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43da      	mvns	r2, r3
 80076b8:	4b11      	ldr	r3, [pc, #68]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4013      	ands	r3, r2
 80076be:	4a10      	ldr	r2, [pc, #64]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	2201      	movs	r2, #1
 80076c8:	409a      	lsls	r2, r3
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	4a0b      	ldr	r2, [pc, #44]	; (8007700 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4a06      	ldr	r2, [pc, #24]	; (80076fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80076e2:	441a      	add	r2, r3
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	3304      	adds	r3, #4
 80076e8:	4619      	mov	r1, r3
 80076ea:	4610      	mov	r0, r2
 80076ec:	f7fe fa7b 	bl	8005be6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076f0:	bf00      	nop
 80076f2:	3720      	adds	r7, #32
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200001f0 	.word	0x200001f0
 80076fc:	200001f4 	.word	0x200001f4
 8007700:	200002d0 	.word	0x200002d0

08007704 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <pvTaskIncrementMutexHeldCount+0x24>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007710:	4b05      	ldr	r3, [pc, #20]	; (8007728 <pvTaskIncrementMutexHeldCount+0x24>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007716:	3201      	adds	r2, #1
 8007718:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800771a:	4b03      	ldr	r3, [pc, #12]	; (8007728 <pvTaskIncrementMutexHeldCount+0x24>)
 800771c:	681b      	ldr	r3, [r3, #0]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	200001f0 	.word	0x200001f0

0800772c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007736:	4b29      	ldr	r3, [pc, #164]	; (80077dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3304      	adds	r3, #4
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe faac 	bl	8005ca0 <uxListRemove>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10b      	bne.n	8007766 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800774e:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	2201      	movs	r2, #1
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43da      	mvns	r2, r3
 800775c:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4013      	ands	r3, r2
 8007762:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007764:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d10a      	bne.n	8007784 <prvAddCurrentTaskToDelayedList+0x58>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	481a      	ldr	r0, [pc, #104]	; (80077e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800777e:	f7fe fa32 	bl	8005be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007782:	e026      	b.n	80077d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4413      	add	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800778c:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	429a      	cmp	r2, r3
 800779a:	d209      	bcs.n	80077b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4b0f      	ldr	r3, [pc, #60]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4619      	mov	r1, r3
 80077a8:	4610      	mov	r0, r2
 80077aa:	f7fe fa40 	bl	8005c2e <vListInsert>
}
 80077ae:	e010      	b.n	80077d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077b0:	4b0f      	ldr	r3, [pc, #60]	; (80077f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7fe fa36 	bl	8005c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077c2:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d202      	bcs.n	80077d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80077cc:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6013      	str	r3, [r2, #0]
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	200002cc 	.word	0x200002cc
 80077e0:	200001f0 	.word	0x200001f0
 80077e4:	200002d0 	.word	0x200002d0
 80077e8:	200002b4 	.word	0x200002b4
 80077ec:	20000284 	.word	0x20000284
 80077f0:	20000280 	.word	0x20000280
 80077f4:	200002e8 	.word	0x200002e8

080077f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007802:	f000 fad5 	bl	8007db0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <xTimerCreateTimerTask+0x54>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800780e:	4b10      	ldr	r3, [pc, #64]	; (8007850 <xTimerCreateTimerTask+0x58>)
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	2302      	movs	r3, #2
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800781c:	490d      	ldr	r1, [pc, #52]	; (8007854 <xTimerCreateTimerTask+0x5c>)
 800781e:	480e      	ldr	r0, [pc, #56]	; (8007858 <xTimerCreateTimerTask+0x60>)
 8007820:	f7ff f838 	bl	8006894 <xTaskCreate>
 8007824:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10a      	bne.n	8007842 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	603b      	str	r3, [r7, #0]
}
 800783e:	bf00      	nop
 8007840:	e7fe      	b.n	8007840 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8007842:	687b      	ldr	r3, [r7, #4]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20000324 	.word	0x20000324
 8007850:	20000328 	.word	0x20000328
 8007854:	0800ae30 	.word	0x0800ae30
 8007858:	08007991 	.word	0x08007991

0800785c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	; 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	623b      	str	r3, [r7, #32]
}
 8007886:	bf00      	nop
 8007888:	e7fe      	b.n	8007888 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <xTimerGenericCommand+0x98>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d02a      	beq.n	80078e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b05      	cmp	r3, #5
 80078a2:	dc18      	bgt.n	80078d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078a4:	f7ff fd70 	bl	8007388 <xTaskGetSchedulerState>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d109      	bne.n	80078c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078ae:	4b11      	ldr	r3, [pc, #68]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f107 0114 	add.w	r1, r7, #20
 80078b6:	2300      	movs	r3, #0
 80078b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ba:	f7fe fae3 	bl	8005e84 <xQueueGenericSend>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24
 80078c0:	e012      	b.n	80078e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	f107 0114 	add.w	r1, r7, #20
 80078ca:	2300      	movs	r3, #0
 80078cc:	2200      	movs	r2, #0
 80078ce:	f7fe fad9 	bl	8005e84 <xQueueGenericSend>
 80078d2:	6278      	str	r0, [r7, #36]	; 0x24
 80078d4:	e008      	b.n	80078e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078d6:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <xTimerGenericCommand+0x98>)
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f107 0114 	add.w	r1, r7, #20
 80078de:	2300      	movs	r3, #0
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	f7fe fbcd 	bl	8006080 <xQueueGenericSendFromISR>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3728      	adds	r7, #40	; 0x28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20000324 	.word	0x20000324

080078f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af02      	add	r7, sp, #8
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007902:	4b22      	ldr	r3, [pc, #136]	; (800798c <prvProcessExpiredTimer+0x94>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3304      	adds	r3, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe f9c5 	bl	8005ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d022      	beq.n	800796a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	699a      	ldr	r2, [r3, #24]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	18d1      	adds	r1, r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	6978      	ldr	r0, [r7, #20]
 8007932:	f000 f8d1 	bl	8007ad8 <prvInsertTimerInActiveList>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01f      	beq.n	800797c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800793c:	2300      	movs	r3, #0
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	2300      	movs	r3, #0
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	2100      	movs	r1, #0
 8007946:	6978      	ldr	r0, [r7, #20]
 8007948:	f7ff ff88 	bl	800785c <xTimerGenericCommand>
 800794c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d113      	bne.n	800797c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60fb      	str	r3, [r7, #12]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007970:	f023 0301 	bic.w	r3, r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	6978      	ldr	r0, [r7, #20]
 8007982:	4798      	blx	r3
}
 8007984:	bf00      	nop
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	2000031c 	.word	0x2000031c

08007990 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007998:	f107 0308 	add.w	r3, r7, #8
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f857 	bl	8007a50 <prvGetNextExpireTime>
 80079a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4619      	mov	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f803 	bl	80079b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ae:	f000 f8d5 	bl	8007b5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079b2:	e7f1      	b.n	8007998 <prvTimerTask+0x8>

080079b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079be:	f7ff f929 	bl	8006c14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079c2:	f107 0308 	add.w	r3, r7, #8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 f866 	bl	8007a98 <prvSampleTimeNow>
 80079cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d130      	bne.n	8007a36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10a      	bne.n	80079f0 <prvProcessTimerOrBlockTask+0x3c>
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d806      	bhi.n	80079f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079e2:	f7ff f925 	bl	8006c30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff85 	bl	80078f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079ee:	e024      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079f6:	4b13      	ldr	r3, [pc, #76]	; (8007a44 <prvProcessTimerOrBlockTask+0x90>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <prvProcessTimerOrBlockTask+0x50>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <prvProcessTimerOrBlockTask+0x52>
 8007a04:	2300      	movs	r3, #0
 8007a06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <prvProcessTimerOrBlockTask+0x94>)
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	f7fe ff09 	bl	800682c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a1a:	f7ff f909 	bl	8006c30 <xTaskResumeAll>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10a      	bne.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <prvProcessTimerOrBlockTask+0x98>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
}
 8007a34:	e001      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a36:	f7ff f8fb 	bl	8006c30 <xTaskResumeAll>
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000320 	.word	0x20000320
 8007a48:	20000324 	.word	0x20000324
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <prvGetNextExpireTime+0x44>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <prvGetNextExpireTime+0x16>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e000      	b.n	8007a68 <prvGetNextExpireTime+0x18>
 8007a66:	2200      	movs	r2, #0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a74:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <prvGetNextExpireTime+0x44>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	e001      	b.n	8007a84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a84:	68fb      	ldr	r3, [r7, #12]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	2000031c 	.word	0x2000031c

08007a98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007aa0:	f7ff f962 	bl	8006d68 <xTaskGetTickCount>
 8007aa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <prvSampleTimeNow+0x3c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d205      	bcs.n	8007abc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ab0:	f000 f91a 	bl	8007ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e002      	b.n	8007ac2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	; (8007ad4 <prvSampleTimeNow+0x3c>)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000032c 	.word	0x2000032c

08007ad8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d812      	bhi.n	8007b24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d302      	bcc.n	8007b12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e01b      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <prvInsertTimerInActiveList+0x7c>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7fe f886 	bl	8005c2e <vListInsert>
 8007b22:	e012      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d206      	bcs.n	8007b3a <prvInsertTimerInActiveList+0x62>
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	e007      	b.n	8007b4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <prvInsertTimerInActiveList+0x80>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7fe f872 	bl	8005c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b4a:	697b      	ldr	r3, [r7, #20]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000320 	.word	0x20000320
 8007b58:	2000031c 	.word	0x2000031c

08007b5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	; 0x30
 8007b60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b62:	e0ae      	b.n	8007cc2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f2c0 80aa 	blt.w	8007cc0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d004      	beq.n	8007b82 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe f88f 	bl	8005ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b82:	1d3b      	adds	r3, r7, #4
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff ff87 	bl	8007a98 <prvSampleTimeNow>
 8007b8a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b09      	cmp	r3, #9
 8007b90:	f200 8097 	bhi.w	8007cc2 <prvProcessReceivedCommands+0x166>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <prvProcessReceivedCommands+0x40>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007c39 	.word	0x08007c39
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c97 	.word	0x08007c97
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bc5 	.word	0x08007bc5
 8007bbc:	08007c39 	.word	0x08007c39
 8007bc0:	08007c4d 	.word	0x08007c4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	18d1      	adds	r1, r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a3a      	ldr	r2, [r7, #32]
 8007be2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be4:	f7ff ff78 	bl	8007ad8 <prvInsertTimerInActiveList>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d069      	beq.n	8007cc2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d05e      	beq.n	8007cc2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	441a      	add	r2, r3
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2300      	movs	r3, #0
 8007c12:	2100      	movs	r1, #0
 8007c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c16:	f7ff fe21 	bl	800785c <xTimerGenericCommand>
 8007c1a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d14f      	bne.n	8007cc2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	61bb      	str	r3, [r7, #24]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c4a:	e03a      	b.n	8007cc2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10a      	bne.n	8007c82 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	617b      	str	r3, [r7, #20]
}
 8007c7e:	bf00      	nop
 8007c80:	e7fe      	b.n	8007c80 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	699a      	ldr	r2, [r3, #24]
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	18d1      	adds	r1, r2, r3
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	6a3a      	ldr	r2, [r7, #32]
 8007c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c90:	f7ff ff22 	bl	8007ad8 <prvInsertTimerInActiveList>
					break;
 8007c94:	e015      	b.n	8007cc2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007ca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ca6:	f000 fbcb 	bl	8008440 <vPortFree>
 8007caa:	e00a      	b.n	8007cc2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	b2da      	uxtb	r2, r3
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cbe:	e000      	b.n	8007cc2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <prvProcessReceivedCommands+0x188>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f107 0108 	add.w	r1, r7, #8
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe fa6f 	bl	80061b0 <xQueueReceive>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f af45 	bne.w	8007b64 <prvProcessReceivedCommands+0x8>
	}
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	3728      	adds	r7, #40	; 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000324 	.word	0x20000324

08007ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cee:	e048      	b.n	8007d82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cfa:	4b2b      	ldr	r3, [pc, #172]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7fd ffc9 	bl	8005ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02e      	beq.n	8007d82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d90e      	bls.n	8007d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d42:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f7fd ff6e 	bl	8005c2e <vListInsert>
 8007d52:	e016      	b.n	8007d82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d54:	2300      	movs	r3, #0
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff fd7c 	bl	800785c <xTimerGenericCommand>
 8007d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	603b      	str	r3, [r7, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1b1      	bne.n	8007cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <prvSwitchTimerLists+0xc4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a04      	ldr	r2, [pc, #16]	; (8007da8 <prvSwitchTimerLists+0xc0>)
 8007d98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d9a:	4a04      	ldr	r2, [pc, #16]	; (8007dac <prvSwitchTimerLists+0xc4>)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	6013      	str	r3, [r2, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2000031c 	.word	0x2000031c
 8007dac:	20000320 	.word	0x20000320

08007db0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007db4:	f000 f95e 	bl	8008074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007db8:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <prvCheckForValidListAndQueue+0x54>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11d      	bne.n	8007dfc <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dc0:	4811      	ldr	r0, [pc, #68]	; (8007e08 <prvCheckForValidListAndQueue+0x58>)
 8007dc2:	f7fd fee3 	bl	8005b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dc6:	4811      	ldr	r0, [pc, #68]	; (8007e0c <prvCheckForValidListAndQueue+0x5c>)
 8007dc8:	f7fd fee0 	bl	8005b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <prvCheckForValidListAndQueue+0x60>)
 8007dce:	4a0e      	ldr	r2, [pc, #56]	; (8007e08 <prvCheckForValidListAndQueue+0x58>)
 8007dd0:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <prvCheckForValidListAndQueue+0x64>)
 8007dd4:	4a0d      	ldr	r2, [pc, #52]	; (8007e0c <prvCheckForValidListAndQueue+0x5c>)
 8007dd6:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007dd8:	2200      	movs	r2, #0
 8007dda:	210c      	movs	r1, #12
 8007ddc:	200a      	movs	r0, #10
 8007dde:	f7fd fff1 	bl	8005dc4 <xQueueGenericCreate>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4a07      	ldr	r2, [pc, #28]	; (8007e04 <prvCheckForValidListAndQueue+0x54>)
 8007de6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <prvCheckForValidListAndQueue+0x54>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <prvCheckForValidListAndQueue+0x54>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4908      	ldr	r1, [pc, #32]	; (8007e18 <prvCheckForValidListAndQueue+0x68>)
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fe fcee 	bl	80067d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dfc:	f000 f96a 	bl	80080d4 <vPortExitCritical>
}
 8007e00:	bf00      	nop
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000324 	.word	0x20000324
 8007e08:	200002f4 	.word	0x200002f4
 8007e0c:	20000308 	.word	0x20000308
 8007e10:	2000031c 	.word	0x2000031c
 8007e14:	20000320 	.word	0x20000320
 8007e18:	0800ae38 	.word	0x0800ae38

08007e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b04      	subs	r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 0201 	bic.w	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e4c:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <pxPortInitialiseStack+0x64>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b14      	subs	r3, #20
 8007e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f06f 0202 	mvn.w	r2, #2
 8007e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3b20      	subs	r3, #32
 8007e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e72:	68fb      	ldr	r3, [r7, #12]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	08007e85 	.word	0x08007e85

08007e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <prvTaskExitError+0x54>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e96:	d00a      	beq.n	8007eae <prvTaskExitError+0x2a>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60fb      	str	r3, [r7, #12]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <prvTaskExitError+0x28>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60bb      	str	r3, [r7, #8]
}
 8007ec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ec2:	bf00      	nop
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0fc      	beq.n	8007ec4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	2000000c 	.word	0x2000000c
 8007edc:	00000000 	.word	0x00000000

08007ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <pxCurrentTCBConst2>)
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	6808      	ldr	r0, [r1, #0]
 8007ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f380 8809 	msr	PSP, r0
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8811 	msr	BASEPRI, r0
 8007efa:	4770      	bx	lr
 8007efc:	f3af 8000 	nop.w

08007f00 <pxCurrentTCBConst2>:
 8007f00:	200001f0 	.word	0x200001f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f08:	4808      	ldr	r0, [pc, #32]	; (8007f2c <prvPortStartFirstTask+0x24>)
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	6800      	ldr	r0, [r0, #0]
 8007f0e:	f380 8808 	msr	MSP, r0
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8814 	msr	CONTROL, r0
 8007f1a:	b662      	cpsie	i
 8007f1c:	b661      	cpsie	f
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	df00      	svc	0
 8007f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f2a:	bf00      	nop
 8007f2c:	e000ed08 	.word	0xe000ed08

08007f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f36:	4b46      	ldr	r3, [pc, #280]	; (8008050 <xPortStartScheduler+0x120>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a46      	ldr	r2, [pc, #280]	; (8008054 <xPortStartScheduler+0x124>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10a      	bne.n	8007f56 <xPortStartScheduler+0x26>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f56:	4b3e      	ldr	r3, [pc, #248]	; (8008050 <xPortStartScheduler+0x120>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a3f      	ldr	r2, [pc, #252]	; (8008058 <xPortStartScheduler+0x128>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10a      	bne.n	8007f76 <xPortStartScheduler+0x46>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	60fb      	str	r3, [r7, #12]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f76:	4b39      	ldr	r3, [pc, #228]	; (800805c <xPortStartScheduler+0x12c>)
 8007f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	22ff      	movs	r2, #255	; 0xff
 8007f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	4b31      	ldr	r3, [pc, #196]	; (8008060 <xPortStartScheduler+0x130>)
 8007f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f9e:	4b31      	ldr	r3, [pc, #196]	; (8008064 <xPortStartScheduler+0x134>)
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fa4:	e009      	b.n	8007fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fa6:	4b2f      	ldr	r3, [pc, #188]	; (8008064 <xPortStartScheduler+0x134>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	4a2d      	ldr	r2, [pc, #180]	; (8008064 <xPortStartScheduler+0x134>)
 8007fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b80      	cmp	r3, #128	; 0x80
 8007fc4:	d0ef      	beq.n	8007fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fc6:	4b27      	ldr	r3, [pc, #156]	; (8008064 <xPortStartScheduler+0x134>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f1c3 0307 	rsb	r3, r3, #7
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d00a      	beq.n	8007fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fe8:	4b1e      	ldr	r3, [pc, #120]	; (8008064 <xPortStartScheduler+0x134>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	021b      	lsls	r3, r3, #8
 8007fee:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <xPortStartScheduler+0x134>)
 8007ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <xPortStartScheduler+0x134>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ffa:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <xPortStartScheduler+0x134>)
 8007ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	b2da      	uxtb	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008006:	4b18      	ldr	r3, [pc, #96]	; (8008068 <xPortStartScheduler+0x138>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a17      	ldr	r2, [pc, #92]	; (8008068 <xPortStartScheduler+0x138>)
 800800c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <xPortStartScheduler+0x138>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a14      	ldr	r2, [pc, #80]	; (8008068 <xPortStartScheduler+0x138>)
 8008018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800801c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800801e:	f000 f8dd 	bl	80081dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <xPortStartScheduler+0x13c>)
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008028:	f000 f8fc 	bl	8008224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800802c:	4b10      	ldr	r3, [pc, #64]	; (8008070 <xPortStartScheduler+0x140>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <xPortStartScheduler+0x140>)
 8008032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008038:	f7ff ff66 	bl	8007f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800803c:	f7fe ff5c 	bl	8006ef8 <vTaskSwitchContext>
	prvTaskExitError();
 8008040:	f7ff ff20 	bl	8007e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	e000ed00 	.word	0xe000ed00
 8008054:	410fc271 	.word	0x410fc271
 8008058:	410fc270 	.word	0x410fc270
 800805c:	e000e400 	.word	0xe000e400
 8008060:	20000330 	.word	0x20000330
 8008064:	20000334 	.word	0x20000334
 8008068:	e000ed20 	.word	0xe000ed20
 800806c:	2000000c 	.word	0x2000000c
 8008070:	e000ef34 	.word	0xe000ef34

08008074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	607b      	str	r3, [r7, #4]
}
 800808c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800808e:	4b0f      	ldr	r3, [pc, #60]	; (80080cc <vPortEnterCritical+0x58>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <vPortEnterCritical+0x58>)
 8008096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008098:	4b0c      	ldr	r3, [pc, #48]	; (80080cc <vPortEnterCritical+0x58>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10f      	bne.n	80080c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <vPortEnterCritical+0x5c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	603b      	str	r3, [r7, #0]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <vPortEnterCritical+0x4a>
	}
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	2000000c 	.word	0x2000000c
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080da:	4b12      	ldr	r3, [pc, #72]	; (8008124 <vPortExitCritical+0x50>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10a      	bne.n	80080f8 <vPortExitCritical+0x24>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	607b      	str	r3, [r7, #4]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <vPortExitCritical+0x50>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	4a09      	ldr	r2, [pc, #36]	; (8008124 <vPortExitCritical+0x50>)
 8008100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <vPortExitCritical+0x50>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d105      	bne.n	8008116 <vPortExitCritical+0x42>
 800810a:	2300      	movs	r3, #0
 800810c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	f383 8811 	msr	BASEPRI, r3
}
 8008114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	2000000c 	.word	0x2000000c
	...

08008130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008130:	f3ef 8009 	mrs	r0, PSP
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	4b15      	ldr	r3, [pc, #84]	; (8008190 <pxCurrentTCBConst>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	f01e 0f10 	tst.w	lr, #16
 8008140:	bf08      	it	eq
 8008142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	6010      	str	r0, [r2, #0]
 800814c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008154:	f380 8811 	msr	BASEPRI, r0
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f7fe feca 	bl	8006ef8 <vTaskSwitchContext>
 8008164:	f04f 0000 	mov.w	r0, #0
 8008168:	f380 8811 	msr	BASEPRI, r0
 800816c:	bc09      	pop	{r0, r3}
 800816e:	6819      	ldr	r1, [r3, #0]
 8008170:	6808      	ldr	r0, [r1, #0]
 8008172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008176:	f01e 0f10 	tst.w	lr, #16
 800817a:	bf08      	it	eq
 800817c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008180:	f380 8809 	msr	PSP, r0
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w

08008190 <pxCurrentTCBConst>:
 8008190:	200001f0 	.word	0x200001f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop

08008198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
	__asm volatile
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	607b      	str	r3, [r7, #4]
}
 80081b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081b2:	f7fe fde9 	bl	8006d88 <xTaskIncrementTick>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <SysTick_Handler+0x40>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	2300      	movs	r3, #0
 80081c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	f383 8811 	msr	BASEPRI, r3
}
 80081ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <vPortSetupTimerInterrupt+0x34>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081e6:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <vPortSetupTimerInterrupt+0x38>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <vPortSetupTimerInterrupt+0x3c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a0a      	ldr	r2, [pc, #40]	; (800821c <vPortSetupTimerInterrupt+0x40>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	099b      	lsrs	r3, r3, #6
 80081f8:	4a09      	ldr	r2, [pc, #36]	; (8008220 <vPortSetupTimerInterrupt+0x44>)
 80081fa:	3b01      	subs	r3, #1
 80081fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081fe:	4b04      	ldr	r3, [pc, #16]	; (8008210 <vPortSetupTimerInterrupt+0x34>)
 8008200:	2207      	movs	r2, #7
 8008202:	601a      	str	r2, [r3, #0]
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	e000e010 	.word	0xe000e010
 8008214:	e000e018 	.word	0xe000e018
 8008218:	20000000 	.word	0x20000000
 800821c:	10624dd3 	.word	0x10624dd3
 8008220:	e000e014 	.word	0xe000e014

08008224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008234 <vPortEnableVFP+0x10>
 8008228:	6801      	ldr	r1, [r0, #0]
 800822a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800822e:	6001      	str	r1, [r0, #0]
 8008230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008232:	bf00      	nop
 8008234:	e000ed88 	.word	0xe000ed88

08008238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800823e:	f3ef 8305 	mrs	r3, IPSR
 8008242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d914      	bls.n	8008274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800824a:	4a17      	ldr	r2, [pc, #92]	; (80082a8 <vPortValidateInterruptPriority+0x70>)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <vPortValidateInterruptPriority+0x74>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	7afa      	ldrb	r2, [r7, #11]
 800825a:	429a      	cmp	r2, r3
 800825c:	d20a      	bcs.n	8008274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	607b      	str	r3, [r7, #4]
}
 8008270:	bf00      	nop
 8008272:	e7fe      	b.n	8008272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008274:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <vPortValidateInterruptPriority+0x78>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <vPortValidateInterruptPriority+0x7c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d90a      	bls.n	800829a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	603b      	str	r3, [r7, #0]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <vPortValidateInterruptPriority+0x60>
	}
 800829a:	bf00      	nop
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	e000e3f0 	.word	0xe000e3f0
 80082ac:	20000330 	.word	0x20000330
 80082b0:	e000ed0c 	.word	0xe000ed0c
 80082b4:	20000334 	.word	0x20000334

080082b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	; 0x28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082c4:	f7fe fca6 	bl	8006c14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082c8:	4b58      	ldr	r3, [pc, #352]	; (800842c <pvPortMalloc+0x174>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082d0:	f000 f910 	bl	80084f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082d4:	4b56      	ldr	r3, [pc, #344]	; (8008430 <pvPortMalloc+0x178>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4013      	ands	r3, r2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f040 808e 	bne.w	80083fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01d      	beq.n	8008324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082e8:	2208      	movs	r2, #8
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4413      	add	r3, r2
 80082ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d014      	beq.n	8008324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f023 0307 	bic.w	r3, r3, #7
 8008300:	3308      	adds	r3, #8
 8008302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <pvPortMalloc+0x6c>
	__asm volatile
 800830e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008312:	f383 8811 	msr	BASEPRI, r3
 8008316:	f3bf 8f6f 	isb	sy
 800831a:	f3bf 8f4f 	dsb	sy
 800831e:	617b      	str	r3, [r7, #20]
}
 8008320:	bf00      	nop
 8008322:	e7fe      	b.n	8008322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d069      	beq.n	80083fe <pvPortMalloc+0x146>
 800832a:	4b42      	ldr	r3, [pc, #264]	; (8008434 <pvPortMalloc+0x17c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d864      	bhi.n	80083fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008334:	4b40      	ldr	r3, [pc, #256]	; (8008438 <pvPortMalloc+0x180>)
 8008336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008338:	4b3f      	ldr	r3, [pc, #252]	; (8008438 <pvPortMalloc+0x180>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833e:	e004      	b.n	800834a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d903      	bls.n	800835c <pvPortMalloc+0xa4>
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f1      	bne.n	8008340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800835c:	4b33      	ldr	r3, [pc, #204]	; (800842c <pvPortMalloc+0x174>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008362:	429a      	cmp	r2, r3
 8008364:	d04b      	beq.n	80083fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2208      	movs	r2, #8
 800836c:	4413      	add	r3, r2
 800836e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	2308      	movs	r3, #8
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	429a      	cmp	r2, r3
 8008386:	d91f      	bls.n	80083c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <pvPortMalloc+0xf8>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	613b      	str	r3, [r7, #16]
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083c2:	69b8      	ldr	r0, [r7, #24]
 80083c4:	f000 f8f8 	bl	80085b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <pvPortMalloc+0x17c>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	4a18      	ldr	r2, [pc, #96]	; (8008434 <pvPortMalloc+0x17c>)
 80083d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083d6:	4b17      	ldr	r3, [pc, #92]	; (8008434 <pvPortMalloc+0x17c>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	4b18      	ldr	r3, [pc, #96]	; (800843c <pvPortMalloc+0x184>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d203      	bcs.n	80083ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083e2:	4b14      	ldr	r3, [pc, #80]	; (8008434 <pvPortMalloc+0x17c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a15      	ldr	r2, [pc, #84]	; (800843c <pvPortMalloc+0x184>)
 80083e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	4b10      	ldr	r3, [pc, #64]	; (8008430 <pvPortMalloc+0x178>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	431a      	orrs	r2, r3
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083fe:	f7fe fc17 	bl	8006c30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	f003 0307 	and.w	r3, r3, #7
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <pvPortMalloc+0x16a>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <pvPortMalloc+0x168>
	return pvReturn;
 8008422:	69fb      	ldr	r3, [r7, #28]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3728      	adds	r7, #40	; 0x28
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	20012f40 	.word	0x20012f40
 8008430:	20012f4c 	.word	0x20012f4c
 8008434:	20012f44 	.word	0x20012f44
 8008438:	20012f38 	.word	0x20012f38
 800843c:	20012f48 	.word	0x20012f48

08008440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d048      	beq.n	80084e4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008452:	2308      	movs	r3, #8
 8008454:	425b      	negs	r3, r3
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4413      	add	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b21      	ldr	r3, [pc, #132]	; (80084ec <vPortFree+0xac>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4013      	ands	r3, r2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10a      	bne.n	8008484 <vPortFree+0x44>
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60fb      	str	r3, [r7, #12]
}
 8008480:	bf00      	nop
 8008482:	e7fe      	b.n	8008482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00a      	beq.n	80084a2 <vPortFree+0x62>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	60bb      	str	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <vPortFree+0xac>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d019      	beq.n	80084e4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d115      	bne.n	80084e4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <vPortFree+0xac>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c8:	f7fe fba4 	bl	8006c14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <vPortFree+0xb0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <vPortFree+0xb0>)
 80084d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 f86c 	bl	80085b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084e0:	f7fe fba6 	bl	8006c30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084e4:	bf00      	nop
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20012f4c 	.word	0x20012f4c
 80084f0:	20012f44 	.word	0x20012f44

080084f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084fa:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80084fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <prvHeapInit+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <prvHeapInit+0xac>)
 8008524:	4413      	add	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800852c:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <prvHeapInit+0xb0>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <prvHeapInit+0xb0>)
 8008534:	2200      	movs	r2, #0
 8008536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008540:	2208      	movs	r2, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <prvHeapInit+0xb4>)
 8008554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <prvHeapInit+0xb4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvHeapInit+0xb4>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a0a      	ldr	r2, [pc, #40]	; (80085ac <prvHeapInit+0xb8>)
 8008582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <prvHeapInit+0xbc>)
 800858a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <prvHeapInit+0xc0>)
 800858e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	20000338 	.word	0x20000338
 80085a4:	20012f38 	.word	0x20012f38
 80085a8:	20012f40 	.word	0x20012f40
 80085ac:	20012f48 	.word	0x20012f48
 80085b0:	20012f44 	.word	0x20012f44
 80085b4:	20012f4c 	.word	0x20012f4c

080085b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c0:	4b28      	ldr	r3, [pc, #160]	; (8008664 <prvInsertBlockIntoFreeList+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <prvInsertBlockIntoFreeList+0x14>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8f7      	bhi.n	80085c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d108      	bne.n	80085fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d118      	bne.n	8008640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d00d      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e008      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e003      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d002      	beq.n	8008656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20012f38 	.word	0x20012f38
 8008668:	20012f40 	.word	0x20012f40

0800866c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008678:	2010      	movs	r0, #16
 800867a:	f001 ff1b 	bl	800a4b4 <USBD_static_malloc>
 800867e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800868e:	2302      	movs	r3, #2
 8008690:	e01b      	b.n	80086ca <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c1b      	ldrb	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2207      	movs	r2, #7
 80086a6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80086a8:	e002      	b.n	80086b0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	220a      	movs	r2, #10
 80086ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80086b0:	2304      	movs	r3, #4
 80086b2:	2203      	movs	r2, #3
 80086b4:	2181      	movs	r1, #129	; 0x81
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fdeb 	bl	800a292 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	460b      	mov	r3, r1
 80086dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80086de:	2181      	movs	r1, #129	; 0x81
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fdfc 	bl	800a2de <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008702:	4618      	mov	r0, r3
 8008704:	f001 fee4 	bl	800a4d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800872c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e0e8      	b.n	8008912 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008748:	2b00      	cmp	r3, #0
 800874a:	d046      	beq.n	80087da <USBD_HID_Setup+0xbe>
 800874c:	2b20      	cmp	r3, #32
 800874e:	f040 80d8 	bne.w	8008902 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	785b      	ldrb	r3, [r3, #1]
 8008756:	3b02      	subs	r3, #2
 8008758:	2b09      	cmp	r3, #9
 800875a:	d836      	bhi.n	80087ca <USBD_HID_Setup+0xae>
 800875c:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <USBD_HID_Setup+0x48>)
 800875e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008762:	bf00      	nop
 8008764:	080087bb 	.word	0x080087bb
 8008768:	0800879b 	.word	0x0800879b
 800876c:	080087cb 	.word	0x080087cb
 8008770:	080087cb 	.word	0x080087cb
 8008774:	080087cb 	.word	0x080087cb
 8008778:	080087cb 	.word	0x080087cb
 800877c:	080087cb 	.word	0x080087cb
 8008780:	080087cb 	.word	0x080087cb
 8008784:	080087a9 	.word	0x080087a9
 8008788:	0800878d 	.word	0x0800878d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	885b      	ldrh	r3, [r3, #2]
 8008790:	b2db      	uxtb	r3, r3
 8008792:	461a      	mov	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]
          break;
 8008798:	e01e      	b.n	80087d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 fa22 	bl	8009bea <USBD_CtlSendData>
          break;
 80087a6:	e017      	b.n	80087d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	885b      	ldrh	r3, [r3, #2]
 80087ac:	0a1b      	lsrs	r3, r3, #8
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	461a      	mov	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	605a      	str	r2, [r3, #4]
          break;
 80087b8:	e00e      	b.n	80087d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	2201      	movs	r2, #1
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fa11 	bl	8009bea <USBD_CtlSendData>
          break;
 80087c8:	e006      	b.n	80087d8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087ca:	6839      	ldr	r1, [r7, #0]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f001 f99b 	bl	8009b08 <USBD_CtlError>
          ret = USBD_FAIL;
 80087d2:	2303      	movs	r3, #3
 80087d4:	75fb      	strb	r3, [r7, #23]
          break;
 80087d6:	bf00      	nop
      }
      break;
 80087d8:	e09a      	b.n	8008910 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	785b      	ldrb	r3, [r3, #1]
 80087de:	2b0b      	cmp	r3, #11
 80087e0:	f200 8086 	bhi.w	80088f0 <USBD_HID_Setup+0x1d4>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <USBD_HID_Setup+0xd0>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	0800881d 	.word	0x0800881d
 80087f0:	080088ff 	.word	0x080088ff
 80087f4:	080088f1 	.word	0x080088f1
 80087f8:	080088f1 	.word	0x080088f1
 80087fc:	080088f1 	.word	0x080088f1
 8008800:	080088f1 	.word	0x080088f1
 8008804:	08008847 	.word	0x08008847
 8008808:	080088f1 	.word	0x080088f1
 800880c:	080088f1 	.word	0x080088f1
 8008810:	080088f1 	.word	0x080088f1
 8008814:	0800889f 	.word	0x0800889f
 8008818:	080088c9 	.word	0x080088c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b03      	cmp	r3, #3
 8008826:	d107      	bne.n	8008838 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008828:	f107 030a 	add.w	r3, r7, #10
 800882c:	2202      	movs	r2, #2
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f9da 	bl	8009bea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008836:	e063      	b.n	8008900 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f001 f964 	bl	8009b08 <USBD_CtlError>
            ret = USBD_FAIL;
 8008840:	2303      	movs	r3, #3
 8008842:	75fb      	strb	r3, [r7, #23]
          break;
 8008844:	e05c      	b.n	8008900 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	b29b      	uxth	r3, r3
 800884e:	2b22      	cmp	r3, #34	; 0x22
 8008850:	d108      	bne.n	8008864 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	88db      	ldrh	r3, [r3, #6]
 8008856:	2b4a      	cmp	r3, #74	; 0x4a
 8008858:	bf28      	it	cs
 800885a:	234a      	movcs	r3, #74	; 0x4a
 800885c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800885e:	4b2f      	ldr	r3, [pc, #188]	; (800891c <USBD_HID_Setup+0x200>)
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	e015      	b.n	8008890 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	885b      	ldrh	r3, [r3, #2]
 8008868:	0a1b      	lsrs	r3, r3, #8
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b21      	cmp	r3, #33	; 0x21
 800886e:	d108      	bne.n	8008882 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8008870:	4b2b      	ldr	r3, [pc, #172]	; (8008920 <USBD_HID_Setup+0x204>)
 8008872:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	88db      	ldrh	r3, [r3, #6]
 8008878:	2b09      	cmp	r3, #9
 800887a:	bf28      	it	cs
 800887c:	2309      	movcs	r3, #9
 800887e:	82bb      	strh	r3, [r7, #20]
 8008880:	e006      	b.n	8008890 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f001 f93f 	bl	8009b08 <USBD_CtlError>
            ret = USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	75fb      	strb	r3, [r7, #23]
            break;
 800888e:	e037      	b.n	8008900 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008890:	8abb      	ldrh	r3, [r7, #20]
 8008892:	461a      	mov	r2, r3
 8008894:	6939      	ldr	r1, [r7, #16]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 f9a7 	bl	8009bea <USBD_CtlSendData>
          break;
 800889c:	e030      	b.n	8008900 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d107      	bne.n	80088ba <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3308      	adds	r3, #8
 80088ae:	2201      	movs	r2, #1
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 f999 	bl	8009bea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088b8:	e022      	b.n	8008900 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 f923 	bl	8009b08 <USBD_CtlError>
            ret = USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	75fb      	strb	r3, [r7, #23]
          break;
 80088c6:	e01b      	b.n	8008900 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d106      	bne.n	80088e2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	885b      	ldrh	r3, [r3, #2]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088e0:	e00e      	b.n	8008900 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 f90f 	bl	8009b08 <USBD_CtlError>
            ret = USBD_FAIL;
 80088ea:	2303      	movs	r3, #3
 80088ec:	75fb      	strb	r3, [r7, #23]
          break;
 80088ee:	e007      	b.n	8008900 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088f0:	6839      	ldr	r1, [r7, #0]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 f908 	bl	8009b08 <USBD_CtlError>
          ret = USBD_FAIL;
 80088f8:	2303      	movs	r3, #3
 80088fa:	75fb      	strb	r3, [r7, #23]
          break;
 80088fc:	e000      	b.n	8008900 <USBD_HID_Setup+0x1e4>
          break;
 80088fe:	bf00      	nop
      }
      break;
 8008900:	e006      	b.n	8008910 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f001 f8ff 	bl	8009b08 <USBD_CtlError>
      ret = USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	75fb      	strb	r3, [r7, #23]
      break;
 800890e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200000cc 	.word	0x200000cc
 8008920:	200000b4 	.word	0x200000b4

08008924 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	4613      	mov	r3, r2
 8008930:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008938:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	e013      	b.n	800896c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b03      	cmp	r3, #3
 800894e:	d10c      	bne.n	800896a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	7b1b      	ldrb	r3, [r3, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d108      	bne.n	800896a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2201      	movs	r2, #1
 800895c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	2181      	movs	r1, #129	; 0x81
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f001 fd62 	bl	800a42e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2222      	movs	r2, #34	; 0x22
 8008980:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8008982:	4b03      	ldr	r3, [pc, #12]	; (8008990 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8008984:	4618      	mov	r0, r3
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	20000048 	.word	0x20000048

08008994 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2222      	movs	r2, #34	; 0x22
 80089a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80089a2:	4b03      	ldr	r3, [pc, #12]	; (80089b0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	2000006c 	.word	0x2000006c

080089b4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2222      	movs	r2, #34	; 0x22
 80089c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80089c2:	4b03      	ldr	r3, [pc, #12]	; (80089d0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	20000090 	.word	0x20000090

080089d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089e6:	2200      	movs	r2, #0
 80089e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	220a      	movs	r2, #10
 8008a04:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008a06:	4b03      	ldr	r3, [pc, #12]	; (8008a14 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	200000c0 	.word	0x200000c0

08008a18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e01f      	b.n	8008a70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	79fa      	ldrb	r2, [r7, #7]
 8008a62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f001 fbad 	bl	800a1c4 <USBD_LL_Init>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e016      	b.n	8008abe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f107 020e 	add.w	r2, r7, #14
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fbc4 	bl	800a25c <USBD_LL_Start>
 8008ad4:	4603      	mov	r3, r0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d009      	beq.n	8008b22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	78fa      	ldrb	r2, [r7, #3]
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	4798      	blx	r3
  }

  return USBD_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ff90 	bl	8009a94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d01a      	beq.n	8008bce <USBD_LL_SetupStage+0x72>
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d822      	bhi.n	8008be2 <USBD_LL_SetupStage+0x86>
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <USBD_LL_SetupStage+0x4a>
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d00a      	beq.n	8008bba <USBD_LL_SetupStage+0x5e>
 8008ba4:	e01d      	b.n	8008be2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa62 	bl	8009078 <USBD_StdDevReq>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb8:	e020      	b.n	8008bfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fac6 	bl	8009154 <USBD_StdItfReq>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73fb      	strb	r3, [r7, #15]
      break;
 8008bcc:	e016      	b.n	8008bfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fb05 	bl	80091e6 <USBD_StdEPReq>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]
      break;
 8008be0:	e00c      	b.n	8008bfc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008be8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 fb93 	bl	800a31c <USBD_LL_StallEP>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfa:	bf00      	nop
  }

  return ret;
 8008bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b086      	sub	sp, #24
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	607a      	str	r2, [r7, #4]
 8008c12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d138      	bne.n	8008c8c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d14a      	bne.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d913      	bls.n	8008c60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	bf28      	it	cs
 8008c52:	4613      	movcs	r3, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	6879      	ldr	r1, [r7, #4]
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fff2 	bl	8009c42 <USBD_CtlContinueRx>
 8008c5e:	e030      	b.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d10b      	bne.n	8008c84 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 ffed 	bl	8009c64 <USBD_CtlSendStatus>
 8008c8a:	e01a      	b.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d114      	bne.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00e      	beq.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008caa:	699b      	ldr	r3, [r3, #24]
 8008cac:	7afa      	ldrb	r2, [r7, #11]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	4798      	blx	r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	e000      	b.n	8008cc4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008cda:	7afb      	ldrb	r3, [r7, #11]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d16b      	bne.n	8008db8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d156      	bne.n	8008d9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d914      	bls.n	8008d26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	1ad2      	subs	r2, r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 ff84 	bl	8009c20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f001 fba6 	bl	800a470 <USBD_LL_PrepareReceive>
 8008d24:	e03b      	b.n	8008d9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	68da      	ldr	r2, [r3, #12]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d11c      	bne.n	8008d6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d316      	bcc.n	8008d6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d20f      	bcs.n	8008d6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	2100      	movs	r1, #0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 ff65 	bl	8009c20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2200      	movs	r2, #0
 8008d62:	2100      	movs	r1, #0
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f001 fb83 	bl	800a470 <USBD_LL_PrepareReceive>
 8008d6a:	e018      	b.n	8008d9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d10b      	bne.n	8008d90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d90:	2180      	movs	r1, #128	; 0x80
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f001 fac2 	bl	800a31c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 ff76 	bl	8009c8a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d122      	bne.n	8008dee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fe98 	bl	8008ade <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008db6:	e01a      	b.n	8008dee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d114      	bne.n	8008dee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00e      	beq.n	8008dee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	7afa      	ldrb	r2, [r7, #11]
 8008dda:	4611      	mov	r1, r2
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	4798      	blx	r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	e000      	b.n	8008df0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e02f      	b.n	8008e8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00f      	beq.n	8008e56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6852      	ldr	r2, [r2, #4]
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	4611      	mov	r1, r2
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e56:	2340      	movs	r3, #64	; 0x40
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fa18 	bl	800a292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2240      	movs	r2, #64	; 0x40
 8008e6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e72:	2340      	movs	r3, #64	; 0x40
 8008e74:	2200      	movs	r2, #0
 8008e76:	2180      	movs	r1, #128	; 0x80
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 fa0a 	bl	800a292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2240      	movs	r2, #64	; 0x40
 8008e88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2204      	movs	r2, #4
 8008ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d106      	bne.n	8008f02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008efa:	b2da      	uxtb	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e012      	b.n	8008f4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b03      	cmp	r3, #3
 8008f30:	d10b      	bne.n	8008f4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d005      	beq.n	8008f4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f44:	69db      	ldr	r3, [r3, #28]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e014      	b.n	8008f98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d10d      	bne.n	8008f96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	e014      	b.n	8008fe4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d10d      	bne.n	8008fe2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d007      	beq.n	8008fe2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009018:	2b00      	cmp	r3, #0
 800901a:	d009      	beq.n	8009030 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6852      	ldr	r2, [r2, #4]
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	4611      	mov	r1, r2
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
  }

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800903a:	b480      	push	{r7}
 800903c:	b087      	sub	sp, #28
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	3301      	adds	r3, #1
 8009050:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009058:	8a3b      	ldrh	r3, [r7, #16]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	b21a      	sxth	r2, r3
 800905e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009062:	4313      	orrs	r3, r2
 8009064:	b21b      	sxth	r3, r3
 8009066:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009068:	89fb      	ldrh	r3, [r7, #14]
}
 800906a:	4618      	mov	r0, r3
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009082:	2300      	movs	r3, #0
 8009084:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800908e:	2b40      	cmp	r3, #64	; 0x40
 8009090:	d005      	beq.n	800909e <USBD_StdDevReq+0x26>
 8009092:	2b40      	cmp	r3, #64	; 0x40
 8009094:	d853      	bhi.n	800913e <USBD_StdDevReq+0xc6>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00b      	beq.n	80090b2 <USBD_StdDevReq+0x3a>
 800909a:	2b20      	cmp	r3, #32
 800909c:	d14f      	bne.n	800913e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]
      break;
 80090b0:	e04a      	b.n	8009148 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	785b      	ldrb	r3, [r3, #1]
 80090b6:	2b09      	cmp	r3, #9
 80090b8:	d83b      	bhi.n	8009132 <USBD_StdDevReq+0xba>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <USBD_StdDevReq+0x48>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	08009115 	.word	0x08009115
 80090c4:	08009129 	.word	0x08009129
 80090c8:	08009133 	.word	0x08009133
 80090cc:	0800911f 	.word	0x0800911f
 80090d0:	08009133 	.word	0x08009133
 80090d4:	080090f3 	.word	0x080090f3
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	08009133 	.word	0x08009133
 80090e0:	0800910b 	.word	0x0800910b
 80090e4:	080090fd 	.word	0x080090fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9de 	bl	80094ac <USBD_GetDescriptor>
          break;
 80090f0:	e024      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb43 	bl	8009780 <USBD_SetAddress>
          break;
 80090fa:	e01f      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb82 	bl	8009808 <USBD_SetConfig>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
          break;
 8009108:	e018      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc21 	bl	8009954 <USBD_GetConfig>
          break;
 8009112:	e013      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fc52 	bl	80099c0 <USBD_GetStatus>
          break;
 800911c:	e00e      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fc81 	bl	8009a28 <USBD_SetFeature>
          break;
 8009126:	e009      	b.n	800913c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fc90 	bl	8009a50 <USBD_ClrFeature>
          break;
 8009130:	e004      	b.n	800913c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fce7 	bl	8009b08 <USBD_CtlError>
          break;
 800913a:	bf00      	nop
      }
      break;
 800913c:	e004      	b.n	8009148 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fce1 	bl	8009b08 <USBD_CtlError>
      break;
 8009146:	bf00      	nop
  }

  return ret;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop

08009154 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d005      	beq.n	800917a <USBD_StdItfReq+0x26>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d82f      	bhi.n	80091d2 <USBD_StdItfReq+0x7e>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <USBD_StdItfReq+0x26>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d12b      	bne.n	80091d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009180:	b2db      	uxtb	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	2b02      	cmp	r3, #2
 8009186:	d81d      	bhi.n	80091c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	889b      	ldrh	r3, [r3, #4]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b01      	cmp	r3, #1
 8009190:	d813      	bhi.n	80091ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	4798      	blx	r3
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	88db      	ldrh	r3, [r3, #6]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d110      	bne.n	80091ce <USBD_StdItfReq+0x7a>
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10d      	bne.n	80091ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fd56 	bl	8009c64 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091b8:	e009      	b.n	80091ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fca3 	bl	8009b08 <USBD_CtlError>
          break;
 80091c2:	e004      	b.n	80091ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fc9e 	bl	8009b08 <USBD_CtlError>
          break;
 80091cc:	e000      	b.n	80091d0 <USBD_StdItfReq+0x7c>
          break;
 80091ce:	bf00      	nop
      }
      break;
 80091d0:	e004      	b.n	80091dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fc97 	bl	8009b08 <USBD_CtlError>
      break;
 80091da:	bf00      	nop
  }

  return ret;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	889b      	ldrh	r3, [r3, #4]
 80091f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009202:	2b40      	cmp	r3, #64	; 0x40
 8009204:	d007      	beq.n	8009216 <USBD_StdEPReq+0x30>
 8009206:	2b40      	cmp	r3, #64	; 0x40
 8009208:	f200 8145 	bhi.w	8009496 <USBD_StdEPReq+0x2b0>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00c      	beq.n	800922a <USBD_StdEPReq+0x44>
 8009210:	2b20      	cmp	r3, #32
 8009212:	f040 8140 	bne.w	8009496 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	6839      	ldr	r1, [r7, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	4798      	blx	r3
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
      break;
 8009228:	e13a      	b.n	80094a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	2b03      	cmp	r3, #3
 8009230:	d007      	beq.n	8009242 <USBD_StdEPReq+0x5c>
 8009232:	2b03      	cmp	r3, #3
 8009234:	f300 8129 	bgt.w	800948a <USBD_StdEPReq+0x2a4>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d07f      	beq.n	800933c <USBD_StdEPReq+0x156>
 800923c:	2b01      	cmp	r3, #1
 800923e:	d03c      	beq.n	80092ba <USBD_StdEPReq+0xd4>
 8009240:	e123      	b.n	800948a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d002      	beq.n	8009254 <USBD_StdEPReq+0x6e>
 800924e:	2b03      	cmp	r3, #3
 8009250:	d016      	beq.n	8009280 <USBD_StdEPReq+0x9a>
 8009252:	e02c      	b.n	80092ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00d      	beq.n	8009276 <USBD_StdEPReq+0x90>
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b80      	cmp	r3, #128	; 0x80
 800925e:	d00a      	beq.n	8009276 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009260:	7bbb      	ldrb	r3, [r7, #14]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f859 	bl	800a31c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800926a:	2180      	movs	r1, #128	; 0x80
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f855 	bl	800a31c <USBD_LL_StallEP>
 8009272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009274:	e020      	b.n	80092b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 fc45 	bl	8009b08 <USBD_CtlError>
              break;
 800927e:	e01b      	b.n	80092b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	885b      	ldrh	r3, [r3, #2]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10e      	bne.n	80092a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <USBD_StdEPReq+0xc0>
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b80      	cmp	r3, #128	; 0x80
 8009292:	d008      	beq.n	80092a6 <USBD_StdEPReq+0xc0>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d104      	bne.n	80092a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 f83b 	bl	800a31c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fcdc 	bl	8009c64 <USBD_CtlSendStatus>

              break;
 80092ac:	e004      	b.n	80092b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fc29 	bl	8009b08 <USBD_CtlError>
              break;
 80092b6:	bf00      	nop
          }
          break;
 80092b8:	e0ec      	b.n	8009494 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d002      	beq.n	80092cc <USBD_StdEPReq+0xe6>
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d016      	beq.n	80092f8 <USBD_StdEPReq+0x112>
 80092ca:	e030      	b.n	800932e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00d      	beq.n	80092ee <USBD_StdEPReq+0x108>
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b80      	cmp	r3, #128	; 0x80
 80092d6:	d00a      	beq.n	80092ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 f81d 	bl	800a31c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e2:	2180      	movs	r1, #128	; 0x80
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 f819 	bl	800a31c <USBD_LL_StallEP>
 80092ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092ec:	e025      	b.n	800933a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fc09 	bl	8009b08 <USBD_CtlError>
              break;
 80092f6:	e020      	b.n	800933a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	885b      	ldrh	r3, [r3, #2]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d11b      	bne.n	8009338 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009306:	2b00      	cmp	r3, #0
 8009308:	d004      	beq.n	8009314 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f823 	bl	800a35a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fca5 	bl	8009c64 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	4798      	blx	r3
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800932c:	e004      	b.n	8009338 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fbe9 	bl	8009b08 <USBD_CtlError>
              break;
 8009336:	e000      	b.n	800933a <USBD_StdEPReq+0x154>
              break;
 8009338:	bf00      	nop
          }
          break;
 800933a:	e0ab      	b.n	8009494 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d002      	beq.n	800934e <USBD_StdEPReq+0x168>
 8009348:	2b03      	cmp	r3, #3
 800934a:	d032      	beq.n	80093b2 <USBD_StdEPReq+0x1cc>
 800934c:	e097      	b.n	800947e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <USBD_StdEPReq+0x17e>
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b80      	cmp	r3, #128	; 0x80
 8009358:	d004      	beq.n	8009364 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fbd3 	bl	8009b08 <USBD_CtlError>
                break;
 8009362:	e091      	b.n	8009488 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009368:	2b00      	cmp	r3, #0
 800936a:	da0b      	bge.n	8009384 <USBD_StdEPReq+0x19e>
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009372:	4613      	mov	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	3310      	adds	r3, #16
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	4413      	add	r3, r2
 8009380:	3304      	adds	r3, #4
 8009382:	e00b      	b.n	800939c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	3304      	adds	r3, #4
 800939c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2202      	movs	r2, #2
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fc1d 	bl	8009bea <USBD_CtlSendData>
              break;
 80093b0:	e06a      	b.n	8009488 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da11      	bge.n	80093de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093ba:	7bbb      	ldrb	r3, [r7, #14]
 80093bc:	f003 020f 	and.w	r2, r3, #15
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	3324      	adds	r3, #36	; 0x24
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d117      	bne.n	8009404 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fb96 	bl	8009b08 <USBD_CtlError>
                  break;
 80093dc:	e054      	b.n	8009488 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	f003 020f 	and.w	r2, r3, #15
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	440b      	add	r3, r1
 80093f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d104      	bne.n	8009404 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fb83 	bl	8009b08 <USBD_CtlError>
                  break;
 8009402:	e041      	b.n	8009488 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009408:	2b00      	cmp	r3, #0
 800940a:	da0b      	bge.n	8009424 <USBD_StdEPReq+0x23e>
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009412:	4613      	mov	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	3310      	adds	r3, #16
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	4413      	add	r3, r2
 8009420:	3304      	adds	r3, #4
 8009422:	e00b      	b.n	800943c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <USBD_StdEPReq+0x264>
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b80      	cmp	r3, #128	; 0x80
 8009448:	d103      	bne.n	8009452 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e00e      	b.n	8009470 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009452:	7bbb      	ldrb	r3, [r7, #14]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 ff9e 	bl	800a398 <USBD_LL_IsStallEP>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2201      	movs	r2, #1
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	e002      	b.n	8009470 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2202      	movs	r2, #2
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fbb7 	bl	8009bea <USBD_CtlSendData>
              break;
 800947c:	e004      	b.n	8009488 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fb41 	bl	8009b08 <USBD_CtlError>
              break;
 8009486:	bf00      	nop
          }
          break;
 8009488:	e004      	b.n	8009494 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb3b 	bl	8009b08 <USBD_CtlError>
          break;
 8009492:	bf00      	nop
      }
      break;
 8009494:	e004      	b.n	80094a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fb35 	bl	8009b08 <USBD_CtlError>
      break;
 800949e:	bf00      	nop
  }

  return ret;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	2b06      	cmp	r3, #6
 80094ce:	f200 8128 	bhi.w	8009722 <USBD_GetDescriptor+0x276>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBD_GetDescriptor+0x2c>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	080094f5 	.word	0x080094f5
 80094dc:	0800950d 	.word	0x0800950d
 80094e0:	0800954d 	.word	0x0800954d
 80094e4:	08009723 	.word	0x08009723
 80094e8:	08009723 	.word	0x08009723
 80094ec:	080096c3 	.word	0x080096c3
 80094f0:	080096ef 	.word	0x080096ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	7c12      	ldrb	r2, [r2, #16]
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	4610      	mov	r0, r2
 8009506:	4798      	blx	r3
 8009508:	60f8      	str	r0, [r7, #12]
      break;
 800950a:	e112      	b.n	8009732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7c1b      	ldrb	r3, [r3, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10d      	bne.n	8009530 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	f107 0208 	add.w	r2, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3301      	adds	r3, #1
 800952a:	2202      	movs	r2, #2
 800952c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800952e:	e100      	b.n	8009732 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	f107 0208 	add.w	r2, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	2202      	movs	r2, #2
 8009548:	701a      	strb	r2, [r3, #0]
      break;
 800954a:	e0f2      	b.n	8009732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	885b      	ldrh	r3, [r3, #2]
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b05      	cmp	r3, #5
 8009554:	f200 80ac 	bhi.w	80096b0 <USBD_GetDescriptor+0x204>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <USBD_GetDescriptor+0xb4>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009579 	.word	0x08009579
 8009564:	080095ad 	.word	0x080095ad
 8009568:	080095e1 	.word	0x080095e1
 800956c:	08009615 	.word	0x08009615
 8009570:	08009649 	.word	0x08009649
 8009574:	0800967d 	.word	0x0800967d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7c12      	ldrb	r2, [r2, #16]
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800959a:	e091      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fab2 	bl	8009b08 <USBD_CtlError>
            err++;
 80095a4:	7afb      	ldrb	r3, [r7, #11]
 80095a6:	3301      	adds	r3, #1
 80095a8:	72fb      	strb	r3, [r7, #11]
          break;
 80095aa:	e089      	b.n	80096c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00b      	beq.n	80095d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	7c12      	ldrb	r2, [r2, #16]
 80095c4:	f107 0108 	add.w	r1, r7, #8
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
 80095cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ce:	e077      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fa98 	bl	8009b08 <USBD_CtlError>
            err++;
 80095d8:	7afb      	ldrb	r3, [r7, #11]
 80095da:	3301      	adds	r3, #1
 80095dc:	72fb      	strb	r3, [r7, #11]
          break;
 80095de:	e06f      	b.n	80096c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7c12      	ldrb	r2, [r2, #16]
 80095f8:	f107 0108 	add.w	r1, r7, #8
 80095fc:	4610      	mov	r0, r2
 80095fe:	4798      	blx	r3
 8009600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009602:	e05d      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fa7e 	bl	8009b08 <USBD_CtlError>
            err++;
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	3301      	adds	r3, #1
 8009610:	72fb      	strb	r3, [r7, #11]
          break;
 8009612:	e055      	b.n	80096c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	7c12      	ldrb	r2, [r2, #16]
 800962c:	f107 0108 	add.w	r1, r7, #8
 8009630:	4610      	mov	r0, r2
 8009632:	4798      	blx	r3
 8009634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009636:	e043      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fa64 	bl	8009b08 <USBD_CtlError>
            err++;
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	3301      	adds	r3, #1
 8009644:	72fb      	strb	r3, [r7, #11]
          break;
 8009646:	e03b      	b.n	80096c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	7c12      	ldrb	r2, [r2, #16]
 8009660:	f107 0108 	add.w	r1, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800966a:	e029      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fa4a 	bl	8009b08 <USBD_CtlError>
            err++;
 8009674:	7afb      	ldrb	r3, [r7, #11]
 8009676:	3301      	adds	r3, #1
 8009678:	72fb      	strb	r3, [r7, #11]
          break;
 800967a:	e021      	b.n	80096c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	7c12      	ldrb	r2, [r2, #16]
 8009694:	f107 0108 	add.w	r1, r7, #8
 8009698:	4610      	mov	r0, r2
 800969a:	4798      	blx	r3
 800969c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800969e:	e00f      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fa30 	bl	8009b08 <USBD_CtlError>
            err++;
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	3301      	adds	r3, #1
 80096ac:	72fb      	strb	r3, [r7, #11]
          break;
 80096ae:	e007      	b.n	80096c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa28 	bl	8009b08 <USBD_CtlError>
          err++;
 80096b8:	7afb      	ldrb	r3, [r7, #11]
 80096ba:	3301      	adds	r3, #1
 80096bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80096be:	bf00      	nop
      }
      break;
 80096c0:	e037      	b.n	8009732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	7c1b      	ldrb	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	f107 0208 	add.w	r2, r7, #8
 80096d6:	4610      	mov	r0, r2
 80096d8:	4798      	blx	r3
 80096da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096dc:	e029      	b.n	8009732 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fa11 	bl	8009b08 <USBD_CtlError>
        err++;
 80096e6:	7afb      	ldrb	r3, [r7, #11]
 80096e8:	3301      	adds	r3, #1
 80096ea:	72fb      	strb	r3, [r7, #11]
      break;
 80096ec:	e021      	b.n	8009732 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	7c1b      	ldrb	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10d      	bne.n	8009712 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f107 0208 	add.w	r2, r7, #8
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
 8009706:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	3301      	adds	r3, #1
 800970c:	2207      	movs	r2, #7
 800970e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009710:	e00f      	b.n	8009732 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 f9f7 	bl	8009b08 <USBD_CtlError>
        err++;
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	3301      	adds	r3, #1
 800971e:	72fb      	strb	r3, [r7, #11]
      break;
 8009720:	e007      	b.n	8009732 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f9ef 	bl	8009b08 <USBD_CtlError>
      err++;
 800972a:	7afb      	ldrb	r3, [r7, #11]
 800972c:	3301      	adds	r3, #1
 800972e:	72fb      	strb	r3, [r7, #11]
      break;
 8009730:	bf00      	nop
  }

  if (err != 0U)
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11e      	bne.n	8009776 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	88db      	ldrh	r3, [r3, #6]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d016      	beq.n	800976e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009740:	893b      	ldrh	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00e      	beq.n	8009764 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	88da      	ldrh	r2, [r3, #6]
 800974a:	893b      	ldrh	r3, [r7, #8]
 800974c:	4293      	cmp	r3, r2
 800974e:	bf28      	it	cs
 8009750:	4613      	movcs	r3, r2
 8009752:	b29b      	uxth	r3, r3
 8009754:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009756:	893b      	ldrh	r3, [r7, #8]
 8009758:	461a      	mov	r2, r3
 800975a:	68f9      	ldr	r1, [r7, #12]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fa44 	bl	8009bea <USBD_CtlSendData>
 8009762:	e009      	b.n	8009778 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009764:	6839      	ldr	r1, [r7, #0]
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f9ce 	bl	8009b08 <USBD_CtlError>
 800976c:	e004      	b.n	8009778 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa78 	bl	8009c64 <USBD_CtlSendStatus>
 8009774:	e000      	b.n	8009778 <USBD_GetDescriptor+0x2cc>
    return;
 8009776:	bf00      	nop
  }
}
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop

08009780 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	889b      	ldrh	r3, [r3, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d131      	bne.n	80097f6 <USBD_SetAddress+0x76>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	88db      	ldrh	r3, [r3, #6]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d12d      	bne.n	80097f6 <USBD_SetAddress+0x76>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	2b7f      	cmp	r3, #127	; 0x7f
 80097a0:	d829      	bhi.n	80097f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d104      	bne.n	80097c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f9a3 	bl	8009b08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c2:	e01d      	b.n	8009800 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7bfa      	ldrb	r2, [r7, #15]
 80097c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fe0d 	bl	800a3f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa44 	bl	8009c64 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2202      	movs	r2, #2
 80097e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ea:	e009      	b.n	8009800 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f4:	e004      	b.n	8009800 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f985 	bl	8009b08 <USBD_CtlError>
  }
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	885b      	ldrh	r3, [r3, #2]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b4c      	ldr	r3, [pc, #304]	; (8009950 <USBD_SetConfig+0x148>)
 800981e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009820:	4b4b      	ldr	r3, [pc, #300]	; (8009950 <USBD_SetConfig+0x148>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d905      	bls.n	8009834 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f96c 	bl	8009b08 <USBD_CtlError>
    return USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	e088      	b.n	8009946 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d002      	beq.n	8009846 <USBD_SetConfig+0x3e>
 8009840:	2b03      	cmp	r3, #3
 8009842:	d025      	beq.n	8009890 <USBD_SetConfig+0x88>
 8009844:	e071      	b.n	800992a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009846:	4b42      	ldr	r3, [pc, #264]	; (8009950 <USBD_SetConfig+0x148>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01c      	beq.n	8009888 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800984e:	4b40      	ldr	r3, [pc, #256]	; (8009950 <USBD_SetConfig+0x148>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009858:	4b3d      	ldr	r3, [pc, #244]	; (8009950 <USBD_SetConfig+0x148>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff f948 	bl	8008af4 <USBD_SetClassConfig>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800986e:	6839      	ldr	r1, [r7, #0]
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f949 	bl	8009b08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009876:	e065      	b.n	8009944 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f9f3 	bl	8009c64 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2203      	movs	r2, #3
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009886:	e05d      	b.n	8009944 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9eb 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 800988e:	e059      	b.n	8009944 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009890:	4b2f      	ldr	r3, [pc, #188]	; (8009950 <USBD_SetConfig+0x148>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d112      	bne.n	80098be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098a0:	4b2b      	ldr	r3, [pc, #172]	; (8009950 <USBD_SetConfig+0x148>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098aa:	4b29      	ldr	r3, [pc, #164]	; (8009950 <USBD_SetConfig+0x148>)
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff f93b 	bl	8008b2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f9d4 	bl	8009c64 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098bc:	e042      	b.n	8009944 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80098be:	4b24      	ldr	r3, [pc, #144]	; (8009950 <USBD_SetConfig+0x148>)
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d02a      	beq.n	8009922 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7ff f929 	bl	8008b2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098da:	4b1d      	ldr	r3, [pc, #116]	; (8009950 <USBD_SetConfig+0x148>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098e4:	4b1a      	ldr	r3, [pc, #104]	; (8009950 <USBD_SetConfig+0x148>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f902 	bl	8008af4 <USBD_SetClassConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00f      	beq.n	800991a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f903 	bl	8009b08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b2db      	uxtb	r3, r3
 8009908:	4619      	mov	r1, r3
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f7ff f90e 	bl	8008b2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009918:	e014      	b.n	8009944 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f9a2 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 8009920:	e010      	b.n	8009944 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f99e 	bl	8009c64 <USBD_CtlSendStatus>
      break;
 8009928:	e00c      	b.n	8009944 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f8eb 	bl	8009b08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <USBD_SetConfig+0x148>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff f8f7 	bl	8008b2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800993e:	2303      	movs	r3, #3
 8009940:	73fb      	strb	r3, [r7, #15]
      break;
 8009942:	bf00      	nop
  }

  return ret;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20012f50 	.word	0x20012f50

08009954 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	88db      	ldrh	r3, [r3, #6]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d004      	beq.n	8009970 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f8cd 	bl	8009b08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800996e:	e023      	b.n	80099b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	dc02      	bgt.n	8009982 <USBD_GetConfig+0x2e>
 800997c:	2b00      	cmp	r3, #0
 800997e:	dc03      	bgt.n	8009988 <USBD_GetConfig+0x34>
 8009980:	e015      	b.n	80099ae <USBD_GetConfig+0x5a>
 8009982:	2b03      	cmp	r3, #3
 8009984:	d00b      	beq.n	800999e <USBD_GetConfig+0x4a>
 8009986:	e012      	b.n	80099ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3308      	adds	r3, #8
 8009992:	2201      	movs	r2, #1
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f927 	bl	8009bea <USBD_CtlSendData>
        break;
 800999c:	e00c      	b.n	80099b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3304      	adds	r3, #4
 80099a2:	2201      	movs	r2, #1
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f91f 	bl	8009bea <USBD_CtlSendData>
        break;
 80099ac:	e004      	b.n	80099b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f8a9 	bl	8009b08 <USBD_CtlError>
        break;
 80099b6:	bf00      	nop
}
 80099b8:	bf00      	nop
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d81e      	bhi.n	8009a16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	88db      	ldrh	r3, [r3, #6]
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d004      	beq.n	80099ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f890 	bl	8009b08 <USBD_CtlError>
        break;
 80099e8:	e01a      	b.n	8009a20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f043 0202 	orr.w	r2, r3, #2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f8eb 	bl	8009bea <USBD_CtlSendData>
      break;
 8009a14:	e004      	b.n	8009a20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f875 	bl	8009b08 <USBD_CtlError>
      break;
 8009a1e:	bf00      	nop
  }
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	885b      	ldrh	r3, [r3, #2]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d106      	bne.n	8009a48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f90e 	bl	8009c64 <USBD_CtlSendStatus>
  }
}
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d80b      	bhi.n	8009a80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	885b      	ldrh	r3, [r3, #2]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10c      	bne.n	8009a8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f8f3 	bl	8009c64 <USBD_CtlSendStatus>
      }
      break;
 8009a7e:	e004      	b.n	8009a8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f840 	bl	8009b08 <USBD_CtlError>
      break;
 8009a88:	e000      	b.n	8009a8c <USBD_ClrFeature+0x3c>
      break;
 8009a8a:	bf00      	nop
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	781a      	ldrb	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	3301      	adds	r3, #1
 8009aae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fabb 	bl	800903a <SWAPBYTE>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f7ff faae 	bl	800903a <SWAPBYTE>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7ff faa1 	bl	800903a <SWAPBYTE>
 8009af8:	4603      	mov	r3, r0
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	80da      	strh	r2, [r3, #6]
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b12:	2180      	movs	r1, #128	; 0x80
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fc01 	bl	800a31c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fbfd 	bl	800a31c <USBD_LL_StallEP>
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b086      	sub	sp, #24
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	60f8      	str	r0, [r7, #12]
 8009b32:	60b9      	str	r1, [r7, #8]
 8009b34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d036      	beq.n	8009bae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f000 f836 	bl	8009bb6 <USBD_GetLen>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	7812      	ldrb	r2, [r2, #0]
 8009b62:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
 8009b66:	3301      	adds	r3, #1
 8009b68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	4413      	add	r3, r2
 8009b70:	2203      	movs	r2, #3
 8009b72:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	3301      	adds	r3, #1
 8009b78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b7a:	e013      	b.n	8009ba4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b7c:	7dfb      	ldrb	r3, [r7, #23]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	613b      	str	r3, [r7, #16]
    idx++;
 8009b8e:	7dfb      	ldrb	r3, [r7, #23]
 8009b90:	3301      	adds	r3, #1
 8009b92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e7      	bne.n	8009b7c <USBD_GetString+0x52>
 8009bac:	e000      	b.n	8009bb0 <USBD_GetString+0x86>
    return;
 8009bae:	bf00      	nop
  }
}
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009bc6:	e005      	b.n	8009bd4 <USBD_GetLen+0x1e>
  {
    len++;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1f5      	bne.n	8009bc8 <USBD_GetLen+0x12>
  }

  return len;
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fc0c 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	2100      	movs	r1, #0
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fbfb 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	2100      	movs	r1, #0
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fc0b 	bl	800a470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2204      	movs	r2, #4
 8009c70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c74:	2300      	movs	r3, #0
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fbd7 	bl	800a42e <USBD_LL_Transmit>

  return USBD_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2205      	movs	r2, #5
 8009c96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fbe5 	bl	800a470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	490e      	ldr	r1, [pc, #56]	; (8009cf0 <MX_USB_DEVICE_Init+0x40>)
 8009cb8:	480e      	ldr	r0, [pc, #56]	; (8009cf4 <MX_USB_DEVICE_Init+0x44>)
 8009cba:	f7fe fead 	bl	8008a18 <USBD_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009cc4:	f7f7 f89c 	bl	8000e00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009cc8:	490b      	ldr	r1, [pc, #44]	; (8009cf8 <MX_USB_DEVICE_Init+0x48>)
 8009cca:	480a      	ldr	r0, [pc, #40]	; (8009cf4 <MX_USB_DEVICE_Init+0x44>)
 8009ccc:	f7fe fed4 	bl	8008a78 <USBD_RegisterClass>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009cd6:	f7f7 f893 	bl	8000e00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009cda:	4806      	ldr	r0, [pc, #24]	; (8009cf4 <MX_USB_DEVICE_Init+0x44>)
 8009cdc:	f7fe fef3 	bl	8008ac6 <USBD_Start>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009ce6:	f7f7 f88b 	bl	8000e00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009cea:	bf00      	nop
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000118 	.word	0x20000118
 8009cf4:	200130e0 	.word	0x200130e0
 8009cf8:	20000010 	.word	0x20000010

08009cfc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2212      	movs	r2, #18
 8009d0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009d0e:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	20000134 	.word	0x20000134

08009d20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	6039      	str	r1, [r7, #0]
 8009d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009d32:	4b03      	ldr	r3, [pc, #12]	; (8009d40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr
 8009d40:	20000148 	.word	0x20000148

08009d44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4907      	ldr	r1, [pc, #28]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d5a:	4808      	ldr	r0, [pc, #32]	; (8009d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d5c:	f7ff fee5 	bl	8009b2a <USBD_GetString>
 8009d60:	e004      	b.n	8009d6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4904      	ldr	r1, [pc, #16]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
 8009d66:	4805      	ldr	r0, [pc, #20]	; (8009d7c <USBD_FS_ProductStrDescriptor+0x38>)
 8009d68:	f7ff fedf 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d6c:	4b02      	ldr	r3, [pc, #8]	; (8009d78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	200133b0 	.word	0x200133b0
 8009d7c:	0800ae40 	.word	0x0800ae40

08009d80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d8c:	683a      	ldr	r2, [r7, #0]
 8009d8e:	4904      	ldr	r1, [pc, #16]	; (8009da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009d90:	4804      	ldr	r0, [pc, #16]	; (8009da4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009d92:	f7ff feca 	bl	8009b2a <USBD_GetString>
  return USBD_StrDesc;
 8009d96:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	200133b0 	.word	0x200133b0
 8009da4:	0800ae58 	.word	0x0800ae58

08009da8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	221a      	movs	r2, #26
 8009db8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009dba:	f000 f843 	bl	8009e44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009dbe:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	2000014c 	.word	0x2000014c

08009dcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	6039      	str	r1, [r7, #0]
 8009dd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009dd8:	79fb      	ldrb	r3, [r7, #7]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	4907      	ldr	r1, [pc, #28]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009de2:	4808      	ldr	r0, [pc, #32]	; (8009e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009de4:	f7ff fea1 	bl	8009b2a <USBD_GetString>
 8009de8:	e004      	b.n	8009df4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	4904      	ldr	r1, [pc, #16]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009dee:	4805      	ldr	r0, [pc, #20]	; (8009e04 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009df0:	f7ff fe9b 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200133b0 	.word	0x200133b0
 8009e04:	0800ae6c 	.word	0x0800ae6c

08009e08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	6039      	str	r1, [r7, #0]
 8009e12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d105      	bne.n	8009e26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	4907      	ldr	r1, [pc, #28]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e1e:	4808      	ldr	r0, [pc, #32]	; (8009e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e20:	f7ff fe83 	bl	8009b2a <USBD_GetString>
 8009e24:	e004      	b.n	8009e30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	4904      	ldr	r1, [pc, #16]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009e2a:	4805      	ldr	r0, [pc, #20]	; (8009e40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009e2c:	f7ff fe7d 	bl	8009b2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e30:	4b02      	ldr	r3, [pc, #8]	; (8009e3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200133b0 	.word	0x200133b0
 8009e40:	0800ae78 	.word	0x0800ae78

08009e44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009e4a:	4b0f      	ldr	r3, [pc, #60]	; (8009e88 <Get_SerialNum+0x44>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009e50:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <Get_SerialNum+0x48>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009e56:	4b0e      	ldr	r3, [pc, #56]	; (8009e90 <Get_SerialNum+0x4c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d009      	beq.n	8009e7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009e6a:	2208      	movs	r2, #8
 8009e6c:	4909      	ldr	r1, [pc, #36]	; (8009e94 <Get_SerialNum+0x50>)
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f814 	bl	8009e9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e74:	2204      	movs	r2, #4
 8009e76:	4908      	ldr	r1, [pc, #32]	; (8009e98 <Get_SerialNum+0x54>)
 8009e78:	68b8      	ldr	r0, [r7, #8]
 8009e7a:	f000 f80f 	bl	8009e9c <IntToUnicode>
  }
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	1fff7a10 	.word	0x1fff7a10
 8009e8c:	1fff7a14 	.word	0x1fff7a14
 8009e90:	1fff7a18 	.word	0x1fff7a18
 8009e94:	2000014e 	.word	0x2000014e
 8009e98:	2000015e 	.word	0x2000015e

08009e9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
 8009eb2:	e027      	b.n	8009f04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	0f1b      	lsrs	r3, r3, #28
 8009eb8:	2b09      	cmp	r3, #9
 8009eba:	d80b      	bhi.n	8009ed4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0f1b      	lsrs	r3, r3, #28
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	005b      	lsls	r3, r3, #1
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	440b      	add	r3, r1
 8009ecc:	3230      	adds	r2, #48	; 0x30
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e00a      	b.n	8009eea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	0f1b      	lsrs	r3, r3, #28
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
 8009edc:	005b      	lsls	r3, r3, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	440b      	add	r3, r1
 8009ee4:	3237      	adds	r2, #55	; 0x37
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	005b      	lsls	r3, r3, #1
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4413      	add	r3, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	3301      	adds	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
 8009f04:	7dfa      	ldrb	r2, [r7, #23]
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3d3      	bcc.n	8009eb4 <IntToUnicode+0x18>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
	...

08009f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	605a      	str	r2, [r3, #4]
 8009f2e:	609a      	str	r2, [r3, #8]
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f3c:	d147      	bne.n	8009fce <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f3e:	2300      	movs	r3, #0
 8009f40:	613b      	str	r3, [r7, #16]
 8009f42:	4b25      	ldr	r3, [pc, #148]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	4a24      	ldr	r2, [pc, #144]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f4e:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	613b      	str	r3, [r7, #16]
 8009f58:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f60:	2300      	movs	r3, #0
 8009f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f68:	f107 0314 	add.w	r3, r7, #20
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	481b      	ldr	r0, [pc, #108]	; (8009fdc <HAL_PCD_MspInit+0xc0>)
 8009f70:	f7f7 fcf8 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f82:	2300      	movs	r3, #0
 8009f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f86:	230a      	movs	r3, #10
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f8a:	f107 0314 	add.w	r3, r7, #20
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4812      	ldr	r0, [pc, #72]	; (8009fdc <HAL_PCD_MspInit+0xc0>)
 8009f92:	f7f7 fce7 	bl	8001964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f96:	4b10      	ldr	r3, [pc, #64]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	4a0f      	ldr	r2, [pc, #60]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fa0:	6353      	str	r3, [r2, #52]	; 0x34
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009faa:	4a0b      	ldr	r2, [pc, #44]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8009fb2:	4b09      	ldr	r3, [pc, #36]	; (8009fd8 <HAL_PCD_MspInit+0xbc>)
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	2043      	movs	r0, #67	; 0x43
 8009fc4:	f7f7 fca4 	bl	8001910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009fc8:	2043      	movs	r0, #67	; 0x43
 8009fca:	f7f7 fcbd 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009fce:	bf00      	nop
 8009fd0:	3728      	adds	r7, #40	; 0x28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	40023800 	.word	0x40023800
 8009fdc:	40020000 	.word	0x40020000

08009fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe fdb0 	bl	8008b5c <USBD_LL_SetupStage>
}
 8009ffc:	bf00      	nop
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	6879      	ldr	r1, [r7, #4]
 800a01a:	4613      	mov	r3, r2
 800a01c:	00db      	lsls	r3, r3, #3
 800a01e:	1a9b      	subs	r3, r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	440b      	add	r3, r1
 800a024:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	4619      	mov	r1, r3
 800a02e:	f7fe fdea 	bl	8008c06 <USBD_LL_DataOutStage>
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a04c:	78fa      	ldrb	r2, [r7, #3]
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4613      	mov	r3, r2
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	1a9b      	subs	r3, r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	3348      	adds	r3, #72	; 0x48
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	4619      	mov	r1, r3
 800a062:	f7fe fe33 	bl	8008ccc <USBD_LL_DataInStage>
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b082      	sub	sp, #8
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe ff47 	bl	8008f10 <USBD_LL_SOF>
}
 800a082:	bf00      	nop
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a092:	2301      	movs	r3, #1
 800a094:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
 800a0a2:	e008      	b.n	800a0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d102      	bne.n	800a0b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	e001      	b.n	800a0b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a0b2:	f7f6 fea5 	bl	8000e00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0bc:	7bfa      	ldrb	r2, [r7, #15]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe fee7 	bl	8008e94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe fe93 	bl	8008df8 <USBD_LL_Reset>
}
 800a0d2:	bf00      	nop
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fe fee2 	bl	8008eb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a102:	f043 0301 	orr.w	r3, r3, #1
 800a106:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <HAL_PCD_SuspendCallback+0x48>)
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	4a03      	ldr	r2, [pc, #12]	; (800a124 <HAL_PCD_SuspendCallback+0x48>)
 800a116:	f043 0306 	orr.w	r3, r3, #6
 800a11a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	e000ed00 	.word	0xe000ed00

0800a128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe fed2 	bl	8008ee0 <USBD_LL_Resume>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe ff20 	bl	8008fa0 <USBD_LL_IsoOUTIncomplete>
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b082      	sub	sp, #8
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fee8 	bl	8008f54 <USBD_LL_IsoINIncomplete>
}
 800a184:	bf00      	nop
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ff26 	bl	8008fec <USBD_LL_DevConnected>
}
 800a1a0:	bf00      	nop
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fe ff23 	bl	8009002 <USBD_LL_DevDisconnected>
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d13c      	bne.n	800a24e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a1d4:	4a20      	ldr	r2, [pc, #128]	; (800a258 <USBD_LL_Init+0x94>)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a1e      	ldr	r2, [pc, #120]	; (800a258 <USBD_LL_Init+0x94>)
 800a1e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a1e4:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <USBD_LL_Init+0x94>)
 800a1e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a1ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <USBD_LL_Init+0x94>)
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a1f2:	4b19      	ldr	r3, [pc, #100]	; (800a258 <USBD_LL_Init+0x94>)
 800a1f4:	2202      	movs	r2, #2
 800a1f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a1f8:	4b17      	ldr	r3, [pc, #92]	; (800a258 <USBD_LL_Init+0x94>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a1fe:	4b16      	ldr	r3, [pc, #88]	; (800a258 <USBD_LL_Init+0x94>)
 800a200:	2202      	movs	r2, #2
 800a202:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a204:	4b14      	ldr	r3, [pc, #80]	; (800a258 <USBD_LL_Init+0x94>)
 800a206:	2200      	movs	r2, #0
 800a208:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a20a:	4b13      	ldr	r3, [pc, #76]	; (800a258 <USBD_LL_Init+0x94>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a210:	4b11      	ldr	r3, [pc, #68]	; (800a258 <USBD_LL_Init+0x94>)
 800a212:	2200      	movs	r2, #0
 800a214:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a216:	4b10      	ldr	r3, [pc, #64]	; (800a258 <USBD_LL_Init+0x94>)
 800a218:	2200      	movs	r2, #0
 800a21a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a21c:	4b0e      	ldr	r3, [pc, #56]	; (800a258 <USBD_LL_Init+0x94>)
 800a21e:	2200      	movs	r2, #0
 800a220:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a222:	480d      	ldr	r0, [pc, #52]	; (800a258 <USBD_LL_Init+0x94>)
 800a224:	f7f7 fd53 	bl	8001cce <HAL_PCD_Init>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a22e:	f7f6 fde7 	bl	8000e00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a232:	2180      	movs	r1, #128	; 0x80
 800a234:	4808      	ldr	r0, [pc, #32]	; (800a258 <USBD_LL_Init+0x94>)
 800a236:	f7f8 fe98 	bl	8002f6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a23a:	2240      	movs	r2, #64	; 0x40
 800a23c:	2100      	movs	r1, #0
 800a23e:	4806      	ldr	r0, [pc, #24]	; (800a258 <USBD_LL_Init+0x94>)
 800a240:	f7f8 fe4c 	bl	8002edc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a244:	2280      	movs	r2, #128	; 0x80
 800a246:	2101      	movs	r1, #1
 800a248:	4803      	ldr	r0, [pc, #12]	; (800a258 <USBD_LL_Init+0x94>)
 800a24a:	f7f8 fe47 	bl	8002edc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	200135b0 	.word	0x200135b0

0800a25c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a272:	4618      	mov	r0, r3
 800a274:	f7f7 fe48 	bl	8001f08 <HAL_PCD_Start>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f930 	bl	800a4e4 <USBD_Get_USB_Status>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a288:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	4608      	mov	r0, r1
 800a29c:	4611      	mov	r1, r2
 800a29e:	461a      	mov	r2, r3
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	70fb      	strb	r3, [r7, #3]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70bb      	strb	r3, [r7, #2]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2ba:	78bb      	ldrb	r3, [r7, #2]
 800a2bc:	883a      	ldrh	r2, [r7, #0]
 800a2be:	78f9      	ldrb	r1, [r7, #3]
 800a2c0:	f7f8 fa2c 	bl	800271c <HAL_PCD_EP_Open>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f90a 	bl	800a4e4 <USBD_Get_USB_Status>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7f8 fa75 	bl	80027ec <HAL_PCD_EP_Close>
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 f8eb 	bl	800a4e4 <USBD_Get_USB_Status>
 800a30e:	4603      	mov	r3, r0
 800a310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a312:	7bbb      	ldrb	r3, [r7, #14]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a336:	78fa      	ldrb	r2, [r7, #3]
 800a338:	4611      	mov	r1, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f8 fb35 	bl	80029aa <HAL_PCD_EP_SetStall>
 800a340:	4603      	mov	r3, r0
 800a342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f8cc 	bl	800a4e4 <USBD_Get_USB_Status>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a350:	7bbb      	ldrb	r3, [r7, #14]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	4611      	mov	r1, r2
 800a378:	4618      	mov	r0, r3
 800a37a:	f7f8 fb7a 	bl	8002a72 <HAL_PCD_EP_ClrStall>
 800a37e:	4603      	mov	r3, r0
 800a380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f8ad 	bl	800a4e4 <USBD_Get_USB_Status>
 800a38a:	4603      	mov	r3, r0
 800a38c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a3aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a3ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	da0b      	bge.n	800a3cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a3b4:	78fb      	ldrb	r3, [r7, #3]
 800a3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3ba:	68f9      	ldr	r1, [r7, #12]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	00db      	lsls	r3, r3, #3
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	333e      	adds	r3, #62	; 0x3e
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	e00b      	b.n	800a3e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	00db      	lsls	r3, r3, #3
 800a3d8:	1a9b      	subs	r3, r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	440b      	add	r3, r1
 800a3de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f8 f95f 	bl	80026d2 <HAL_PCD_SetAddress>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 f862 	bl	800a4e4 <USBD_Get_USB_Status>
 800a420:	4603      	mov	r3, r0
 800a422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a424:	7bbb      	ldrb	r3, [r7, #14]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b086      	sub	sp, #24
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	460b      	mov	r3, r1
 800a43c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a44c:	7af9      	ldrb	r1, [r7, #11]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	f7f8 fa60 	bl	8002916 <HAL_PCD_EP_Transmit>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 f841 	bl	800a4e4 <USBD_Get_USB_Status>
 800a462:	4603      	mov	r3, r0
 800a464:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a466:	7dbb      	ldrb	r3, [r7, #22]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	603b      	str	r3, [r7, #0]
 800a47c:	460b      	mov	r3, r1
 800a47e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a48e:	7af9      	ldrb	r1, [r7, #11]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	f7f8 f9f4 	bl	8002880 <HAL_PCD_EP_Receive>
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 f820 	bl	800a4e4 <USBD_Get_USB_Status>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a4a8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4bc:	4b03      	ldr	r3, [pc, #12]	; (800a4cc <USBD_static_malloc+0x18>)
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20012f54 	.word	0x20012f54

0800a4d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]

}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d817      	bhi.n	800a528 <USBD_Get_USB_Status+0x44>
 800a4f8:	a201      	add	r2, pc, #4	; (adr r2, 800a500 <USBD_Get_USB_Status+0x1c>)
 800a4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fe:	bf00      	nop
 800a500:	0800a511 	.word	0x0800a511
 800a504:	0800a517 	.word	0x0800a517
 800a508:	0800a51d 	.word	0x0800a51d
 800a50c:	0800a523 	.word	0x0800a523
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
    break;
 800a514:	e00b      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a516:	2303      	movs	r3, #3
 800a518:	73fb      	strb	r3, [r7, #15]
    break;
 800a51a:	e008      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
    break;
 800a520:	e005      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a522:	2303      	movs	r3, #3
 800a524:	73fb      	strb	r3, [r7, #15]
    break;
 800a526:	e002      	b.n	800a52e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a528:	2303      	movs	r3, #3
 800a52a:	73fb      	strb	r3, [r7, #15]
    break;
 800a52c:	bf00      	nop
  }
  return usb_status;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <__errno>:
 800a53c:	4b01      	ldr	r3, [pc, #4]	; (800a544 <__errno+0x8>)
 800a53e:	6818      	ldr	r0, [r3, #0]
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	20000168 	.word	0x20000168

0800a548 <__libc_init_array>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	4d0d      	ldr	r5, [pc, #52]	; (800a580 <__libc_init_array+0x38>)
 800a54c:	4c0d      	ldr	r4, [pc, #52]	; (800a584 <__libc_init_array+0x3c>)
 800a54e:	1b64      	subs	r4, r4, r5
 800a550:	10a4      	asrs	r4, r4, #2
 800a552:	2600      	movs	r6, #0
 800a554:	42a6      	cmp	r6, r4
 800a556:	d109      	bne.n	800a56c <__libc_init_array+0x24>
 800a558:	4d0b      	ldr	r5, [pc, #44]	; (800a588 <__libc_init_array+0x40>)
 800a55a:	4c0c      	ldr	r4, [pc, #48]	; (800a58c <__libc_init_array+0x44>)
 800a55c:	f000 fc4e 	bl	800adfc <_init>
 800a560:	1b64      	subs	r4, r4, r5
 800a562:	10a4      	asrs	r4, r4, #2
 800a564:	2600      	movs	r6, #0
 800a566:	42a6      	cmp	r6, r4
 800a568:	d105      	bne.n	800a576 <__libc_init_array+0x2e>
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a570:	4798      	blx	r3
 800a572:	3601      	adds	r6, #1
 800a574:	e7ee      	b.n	800a554 <__libc_init_array+0xc>
 800a576:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57a:	4798      	blx	r3
 800a57c:	3601      	adds	r6, #1
 800a57e:	e7f2      	b.n	800a566 <__libc_init_array+0x1e>
 800a580:	0800aedc 	.word	0x0800aedc
 800a584:	0800aedc 	.word	0x0800aedc
 800a588:	0800aedc 	.word	0x0800aedc
 800a58c:	0800aee0 	.word	0x0800aee0

0800a590 <memcpy>:
 800a590:	440a      	add	r2, r1
 800a592:	4291      	cmp	r1, r2
 800a594:	f100 33ff 	add.w	r3, r0, #4294967295
 800a598:	d100      	bne.n	800a59c <memcpy+0xc>
 800a59a:	4770      	bx	lr
 800a59c:	b510      	push	{r4, lr}
 800a59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a6:	4291      	cmp	r1, r2
 800a5a8:	d1f9      	bne.n	800a59e <memcpy+0xe>
 800a5aa:	bd10      	pop	{r4, pc}

0800a5ac <memset>:
 800a5ac:	4402      	add	r2, r0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d100      	bne.n	800a5b6 <memset+0xa>
 800a5b4:	4770      	bx	lr
 800a5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5ba:	e7f9      	b.n	800a5b0 <memset+0x4>

0800a5bc <siprintf>:
 800a5bc:	b40e      	push	{r1, r2, r3}
 800a5be:	b500      	push	{lr}
 800a5c0:	b09c      	sub	sp, #112	; 0x70
 800a5c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a5c4:	9002      	str	r0, [sp, #8]
 800a5c6:	9006      	str	r0, [sp, #24]
 800a5c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5cc:	4809      	ldr	r0, [pc, #36]	; (800a5f4 <siprintf+0x38>)
 800a5ce:	9107      	str	r1, [sp, #28]
 800a5d0:	9104      	str	r1, [sp, #16]
 800a5d2:	4909      	ldr	r1, [pc, #36]	; (800a5f8 <siprintf+0x3c>)
 800a5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d8:	9105      	str	r1, [sp, #20]
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	a902      	add	r1, sp, #8
 800a5e0:	f000 f868 	bl	800a6b4 <_svfiprintf_r>
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	b01c      	add	sp, #112	; 0x70
 800a5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f0:	b003      	add	sp, #12
 800a5f2:	4770      	bx	lr
 800a5f4:	20000168 	.word	0x20000168
 800a5f8:	ffff0208 	.word	0xffff0208

0800a5fc <__ssputs_r>:
 800a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	688e      	ldr	r6, [r1, #8]
 800a602:	429e      	cmp	r6, r3
 800a604:	4682      	mov	sl, r0
 800a606:	460c      	mov	r4, r1
 800a608:	4690      	mov	r8, r2
 800a60a:	461f      	mov	r7, r3
 800a60c:	d838      	bhi.n	800a680 <__ssputs_r+0x84>
 800a60e:	898a      	ldrh	r2, [r1, #12]
 800a610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a614:	d032      	beq.n	800a67c <__ssputs_r+0x80>
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	6909      	ldr	r1, [r1, #16]
 800a61a:	eba5 0901 	sub.w	r9, r5, r1
 800a61e:	6965      	ldr	r5, [r4, #20]
 800a620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a624:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a628:	3301      	adds	r3, #1
 800a62a:	444b      	add	r3, r9
 800a62c:	106d      	asrs	r5, r5, #1
 800a62e:	429d      	cmp	r5, r3
 800a630:	bf38      	it	cc
 800a632:	461d      	movcc	r5, r3
 800a634:	0553      	lsls	r3, r2, #21
 800a636:	d531      	bpl.n	800a69c <__ssputs_r+0xa0>
 800a638:	4629      	mov	r1, r5
 800a63a:	f000 fb39 	bl	800acb0 <_malloc_r>
 800a63e:	4606      	mov	r6, r0
 800a640:	b950      	cbnz	r0, 800a658 <__ssputs_r+0x5c>
 800a642:	230c      	movs	r3, #12
 800a644:	f8ca 3000 	str.w	r3, [sl]
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a658:	6921      	ldr	r1, [r4, #16]
 800a65a:	464a      	mov	r2, r9
 800a65c:	f7ff ff98 	bl	800a590 <memcpy>
 800a660:	89a3      	ldrh	r3, [r4, #12]
 800a662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	6126      	str	r6, [r4, #16]
 800a66e:	6165      	str	r5, [r4, #20]
 800a670:	444e      	add	r6, r9
 800a672:	eba5 0509 	sub.w	r5, r5, r9
 800a676:	6026      	str	r6, [r4, #0]
 800a678:	60a5      	str	r5, [r4, #8]
 800a67a:	463e      	mov	r6, r7
 800a67c:	42be      	cmp	r6, r7
 800a67e:	d900      	bls.n	800a682 <__ssputs_r+0x86>
 800a680:	463e      	mov	r6, r7
 800a682:	4632      	mov	r2, r6
 800a684:	6820      	ldr	r0, [r4, #0]
 800a686:	4641      	mov	r1, r8
 800a688:	f000 faa8 	bl	800abdc <memmove>
 800a68c:	68a3      	ldr	r3, [r4, #8]
 800a68e:	6822      	ldr	r2, [r4, #0]
 800a690:	1b9b      	subs	r3, r3, r6
 800a692:	4432      	add	r2, r6
 800a694:	60a3      	str	r3, [r4, #8]
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	2000      	movs	r0, #0
 800a69a:	e7db      	b.n	800a654 <__ssputs_r+0x58>
 800a69c:	462a      	mov	r2, r5
 800a69e:	f000 fb61 	bl	800ad64 <_realloc_r>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1e1      	bne.n	800a66c <__ssputs_r+0x70>
 800a6a8:	6921      	ldr	r1, [r4, #16]
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	f000 fab0 	bl	800ac10 <_free_r>
 800a6b0:	e7c7      	b.n	800a642 <__ssputs_r+0x46>
	...

0800a6b4 <_svfiprintf_r>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4698      	mov	r8, r3
 800a6ba:	898b      	ldrh	r3, [r1, #12]
 800a6bc:	061b      	lsls	r3, r3, #24
 800a6be:	b09d      	sub	sp, #116	; 0x74
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	460d      	mov	r5, r1
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	d50e      	bpl.n	800a6e6 <_svfiprintf_r+0x32>
 800a6c8:	690b      	ldr	r3, [r1, #16]
 800a6ca:	b963      	cbnz	r3, 800a6e6 <_svfiprintf_r+0x32>
 800a6cc:	2140      	movs	r1, #64	; 0x40
 800a6ce:	f000 faef 	bl	800acb0 <_malloc_r>
 800a6d2:	6028      	str	r0, [r5, #0]
 800a6d4:	6128      	str	r0, [r5, #16]
 800a6d6:	b920      	cbnz	r0, 800a6e2 <_svfiprintf_r+0x2e>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	e0d1      	b.n	800a886 <_svfiprintf_r+0x1d2>
 800a6e2:	2340      	movs	r3, #64	; 0x40
 800a6e4:	616b      	str	r3, [r5, #20]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	2320      	movs	r3, #32
 800a6ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6f4:	2330      	movs	r3, #48	; 0x30
 800a6f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8a0 <_svfiprintf_r+0x1ec>
 800a6fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6fe:	f04f 0901 	mov.w	r9, #1
 800a702:	4623      	mov	r3, r4
 800a704:	469a      	mov	sl, r3
 800a706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70a:	b10a      	cbz	r2, 800a710 <_svfiprintf_r+0x5c>
 800a70c:	2a25      	cmp	r2, #37	; 0x25
 800a70e:	d1f9      	bne.n	800a704 <_svfiprintf_r+0x50>
 800a710:	ebba 0b04 	subs.w	fp, sl, r4
 800a714:	d00b      	beq.n	800a72e <_svfiprintf_r+0x7a>
 800a716:	465b      	mov	r3, fp
 800a718:	4622      	mov	r2, r4
 800a71a:	4629      	mov	r1, r5
 800a71c:	4638      	mov	r0, r7
 800a71e:	f7ff ff6d 	bl	800a5fc <__ssputs_r>
 800a722:	3001      	adds	r0, #1
 800a724:	f000 80aa 	beq.w	800a87c <_svfiprintf_r+0x1c8>
 800a728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a72a:	445a      	add	r2, fp
 800a72c:	9209      	str	r2, [sp, #36]	; 0x24
 800a72e:	f89a 3000 	ldrb.w	r3, [sl]
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 80a2 	beq.w	800a87c <_svfiprintf_r+0x1c8>
 800a738:	2300      	movs	r3, #0
 800a73a:	f04f 32ff 	mov.w	r2, #4294967295
 800a73e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a742:	f10a 0a01 	add.w	sl, sl, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	9307      	str	r3, [sp, #28]
 800a74a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a74e:	931a      	str	r3, [sp, #104]	; 0x68
 800a750:	4654      	mov	r4, sl
 800a752:	2205      	movs	r2, #5
 800a754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a758:	4851      	ldr	r0, [pc, #324]	; (800a8a0 <_svfiprintf_r+0x1ec>)
 800a75a:	f7f5 fd41 	bl	80001e0 <memchr>
 800a75e:	9a04      	ldr	r2, [sp, #16]
 800a760:	b9d8      	cbnz	r0, 800a79a <_svfiprintf_r+0xe6>
 800a762:	06d0      	lsls	r0, r2, #27
 800a764:	bf44      	itt	mi
 800a766:	2320      	movmi	r3, #32
 800a768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a76c:	0711      	lsls	r1, r2, #28
 800a76e:	bf44      	itt	mi
 800a770:	232b      	movmi	r3, #43	; 0x2b
 800a772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a776:	f89a 3000 	ldrb.w	r3, [sl]
 800a77a:	2b2a      	cmp	r3, #42	; 0x2a
 800a77c:	d015      	beq.n	800a7aa <_svfiprintf_r+0xf6>
 800a77e:	9a07      	ldr	r2, [sp, #28]
 800a780:	4654      	mov	r4, sl
 800a782:	2000      	movs	r0, #0
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	4621      	mov	r1, r4
 800a78a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a78e:	3b30      	subs	r3, #48	; 0x30
 800a790:	2b09      	cmp	r3, #9
 800a792:	d94e      	bls.n	800a832 <_svfiprintf_r+0x17e>
 800a794:	b1b0      	cbz	r0, 800a7c4 <_svfiprintf_r+0x110>
 800a796:	9207      	str	r2, [sp, #28]
 800a798:	e014      	b.n	800a7c4 <_svfiprintf_r+0x110>
 800a79a:	eba0 0308 	sub.w	r3, r0, r8
 800a79e:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	46a2      	mov	sl, r4
 800a7a8:	e7d2      	b.n	800a750 <_svfiprintf_r+0x9c>
 800a7aa:	9b03      	ldr	r3, [sp, #12]
 800a7ac:	1d19      	adds	r1, r3, #4
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	9103      	str	r1, [sp, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bfbb      	ittet	lt
 800a7b6:	425b      	neglt	r3, r3
 800a7b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a7bc:	9307      	strge	r3, [sp, #28]
 800a7be:	9307      	strlt	r3, [sp, #28]
 800a7c0:	bfb8      	it	lt
 800a7c2:	9204      	strlt	r2, [sp, #16]
 800a7c4:	7823      	ldrb	r3, [r4, #0]
 800a7c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a7c8:	d10c      	bne.n	800a7e4 <_svfiprintf_r+0x130>
 800a7ca:	7863      	ldrb	r3, [r4, #1]
 800a7cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ce:	d135      	bne.n	800a83c <_svfiprintf_r+0x188>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d1a      	adds	r2, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9203      	str	r2, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfb8      	it	lt
 800a7dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e0:	3402      	adds	r4, #2
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8b0 <_svfiprintf_r+0x1fc>
 800a7e8:	7821      	ldrb	r1, [r4, #0]
 800a7ea:	2203      	movs	r2, #3
 800a7ec:	4650      	mov	r0, sl
 800a7ee:	f7f5 fcf7 	bl	80001e0 <memchr>
 800a7f2:	b140      	cbz	r0, 800a806 <_svfiprintf_r+0x152>
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	eba0 000a 	sub.w	r0, r0, sl
 800a7fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a7fe:	9b04      	ldr	r3, [sp, #16]
 800a800:	4303      	orrs	r3, r0
 800a802:	3401      	adds	r4, #1
 800a804:	9304      	str	r3, [sp, #16]
 800a806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80a:	4826      	ldr	r0, [pc, #152]	; (800a8a4 <_svfiprintf_r+0x1f0>)
 800a80c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a810:	2206      	movs	r2, #6
 800a812:	f7f5 fce5 	bl	80001e0 <memchr>
 800a816:	2800      	cmp	r0, #0
 800a818:	d038      	beq.n	800a88c <_svfiprintf_r+0x1d8>
 800a81a:	4b23      	ldr	r3, [pc, #140]	; (800a8a8 <_svfiprintf_r+0x1f4>)
 800a81c:	bb1b      	cbnz	r3, 800a866 <_svfiprintf_r+0x1b2>
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	3307      	adds	r3, #7
 800a822:	f023 0307 	bic.w	r3, r3, #7
 800a826:	3308      	adds	r3, #8
 800a828:	9303      	str	r3, [sp, #12]
 800a82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a82c:	4433      	add	r3, r6
 800a82e:	9309      	str	r3, [sp, #36]	; 0x24
 800a830:	e767      	b.n	800a702 <_svfiprintf_r+0x4e>
 800a832:	fb0c 3202 	mla	r2, ip, r2, r3
 800a836:	460c      	mov	r4, r1
 800a838:	2001      	movs	r0, #1
 800a83a:	e7a5      	b.n	800a788 <_svfiprintf_r+0xd4>
 800a83c:	2300      	movs	r3, #0
 800a83e:	3401      	adds	r4, #1
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	4619      	mov	r1, r3
 800a844:	f04f 0c0a 	mov.w	ip, #10
 800a848:	4620      	mov	r0, r4
 800a84a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84e:	3a30      	subs	r2, #48	; 0x30
 800a850:	2a09      	cmp	r2, #9
 800a852:	d903      	bls.n	800a85c <_svfiprintf_r+0x1a8>
 800a854:	2b00      	cmp	r3, #0
 800a856:	d0c5      	beq.n	800a7e4 <_svfiprintf_r+0x130>
 800a858:	9105      	str	r1, [sp, #20]
 800a85a:	e7c3      	b.n	800a7e4 <_svfiprintf_r+0x130>
 800a85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a860:	4604      	mov	r4, r0
 800a862:	2301      	movs	r3, #1
 800a864:	e7f0      	b.n	800a848 <_svfiprintf_r+0x194>
 800a866:	ab03      	add	r3, sp, #12
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	462a      	mov	r2, r5
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <_svfiprintf_r+0x1f8>)
 800a86e:	a904      	add	r1, sp, #16
 800a870:	4638      	mov	r0, r7
 800a872:	f3af 8000 	nop.w
 800a876:	1c42      	adds	r2, r0, #1
 800a878:	4606      	mov	r6, r0
 800a87a:	d1d6      	bne.n	800a82a <_svfiprintf_r+0x176>
 800a87c:	89ab      	ldrh	r3, [r5, #12]
 800a87e:	065b      	lsls	r3, r3, #25
 800a880:	f53f af2c 	bmi.w	800a6dc <_svfiprintf_r+0x28>
 800a884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a886:	b01d      	add	sp, #116	; 0x74
 800a888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <_svfiprintf_r+0x1f8>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4638      	mov	r0, r7
 800a898:	f000 f87a 	bl	800a990 <_printf_i>
 800a89c:	e7eb      	b.n	800a876 <_svfiprintf_r+0x1c2>
 800a89e:	bf00      	nop
 800a8a0:	0800aea0 	.word	0x0800aea0
 800a8a4:	0800aeaa 	.word	0x0800aeaa
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	0800a5fd 	.word	0x0800a5fd
 800a8b0:	0800aea6 	.word	0x0800aea6

0800a8b4 <_printf_common>:
 800a8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	4699      	mov	r9, r3
 800a8bc:	688a      	ldr	r2, [r1, #8]
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	bfb8      	it	lt
 800a8c8:	4613      	movlt	r3, r2
 800a8ca:	6033      	str	r3, [r6, #0]
 800a8cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8d0:	4607      	mov	r7, r0
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	b10a      	cbz	r2, 800a8da <_printf_common+0x26>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	0699      	lsls	r1, r3, #26
 800a8de:	bf42      	ittt	mi
 800a8e0:	6833      	ldrmi	r3, [r6, #0]
 800a8e2:	3302      	addmi	r3, #2
 800a8e4:	6033      	strmi	r3, [r6, #0]
 800a8e6:	6825      	ldr	r5, [r4, #0]
 800a8e8:	f015 0506 	ands.w	r5, r5, #6
 800a8ec:	d106      	bne.n	800a8fc <_printf_common+0x48>
 800a8ee:	f104 0a19 	add.w	sl, r4, #25
 800a8f2:	68e3      	ldr	r3, [r4, #12]
 800a8f4:	6832      	ldr	r2, [r6, #0]
 800a8f6:	1a9b      	subs	r3, r3, r2
 800a8f8:	42ab      	cmp	r3, r5
 800a8fa:	dc26      	bgt.n	800a94a <_printf_common+0x96>
 800a8fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a900:	1e13      	subs	r3, r2, #0
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	bf18      	it	ne
 800a906:	2301      	movne	r3, #1
 800a908:	0692      	lsls	r2, r2, #26
 800a90a:	d42b      	bmi.n	800a964 <_printf_common+0xb0>
 800a90c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a910:	4649      	mov	r1, r9
 800a912:	4638      	mov	r0, r7
 800a914:	47c0      	blx	r8
 800a916:	3001      	adds	r0, #1
 800a918:	d01e      	beq.n	800a958 <_printf_common+0xa4>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	68e5      	ldr	r5, [r4, #12]
 800a91e:	6832      	ldr	r2, [r6, #0]
 800a920:	f003 0306 	and.w	r3, r3, #6
 800a924:	2b04      	cmp	r3, #4
 800a926:	bf08      	it	eq
 800a928:	1aad      	subeq	r5, r5, r2
 800a92a:	68a3      	ldr	r3, [r4, #8]
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	bf0c      	ite	eq
 800a930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a934:	2500      	movne	r5, #0
 800a936:	4293      	cmp	r3, r2
 800a938:	bfc4      	itt	gt
 800a93a:	1a9b      	subgt	r3, r3, r2
 800a93c:	18ed      	addgt	r5, r5, r3
 800a93e:	2600      	movs	r6, #0
 800a940:	341a      	adds	r4, #26
 800a942:	42b5      	cmp	r5, r6
 800a944:	d11a      	bne.n	800a97c <_printf_common+0xc8>
 800a946:	2000      	movs	r0, #0
 800a948:	e008      	b.n	800a95c <_printf_common+0xa8>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4652      	mov	r2, sl
 800a94e:	4649      	mov	r1, r9
 800a950:	4638      	mov	r0, r7
 800a952:	47c0      	blx	r8
 800a954:	3001      	adds	r0, #1
 800a956:	d103      	bne.n	800a960 <_printf_common+0xac>
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a960:	3501      	adds	r5, #1
 800a962:	e7c6      	b.n	800a8f2 <_printf_common+0x3e>
 800a964:	18e1      	adds	r1, r4, r3
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	2030      	movs	r0, #48	; 0x30
 800a96a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a96e:	4422      	add	r2, r4
 800a970:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a974:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a978:	3302      	adds	r3, #2
 800a97a:	e7c7      	b.n	800a90c <_printf_common+0x58>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4622      	mov	r2, r4
 800a980:	4649      	mov	r1, r9
 800a982:	4638      	mov	r0, r7
 800a984:	47c0      	blx	r8
 800a986:	3001      	adds	r0, #1
 800a988:	d0e6      	beq.n	800a958 <_printf_common+0xa4>
 800a98a:	3601      	adds	r6, #1
 800a98c:	e7d9      	b.n	800a942 <_printf_common+0x8e>
	...

0800a990 <_printf_i>:
 800a990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	4691      	mov	r9, r2
 800a998:	7e27      	ldrb	r7, [r4, #24]
 800a99a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a99c:	2f78      	cmp	r7, #120	; 0x78
 800a99e:	4680      	mov	r8, r0
 800a9a0:	469a      	mov	sl, r3
 800a9a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9a6:	d807      	bhi.n	800a9b8 <_printf_i+0x28>
 800a9a8:	2f62      	cmp	r7, #98	; 0x62
 800a9aa:	d80a      	bhi.n	800a9c2 <_printf_i+0x32>
 800a9ac:	2f00      	cmp	r7, #0
 800a9ae:	f000 80d8 	beq.w	800ab62 <_printf_i+0x1d2>
 800a9b2:	2f58      	cmp	r7, #88	; 0x58
 800a9b4:	f000 80a3 	beq.w	800aafe <_printf_i+0x16e>
 800a9b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9c0:	e03a      	b.n	800aa38 <_printf_i+0xa8>
 800a9c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9c6:	2b15      	cmp	r3, #21
 800a9c8:	d8f6      	bhi.n	800a9b8 <_printf_i+0x28>
 800a9ca:	a001      	add	r0, pc, #4	; (adr r0, 800a9d0 <_printf_i+0x40>)
 800a9cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a9d0:	0800aa29 	.word	0x0800aa29
 800a9d4:	0800aa3d 	.word	0x0800aa3d
 800a9d8:	0800a9b9 	.word	0x0800a9b9
 800a9dc:	0800a9b9 	.word	0x0800a9b9
 800a9e0:	0800a9b9 	.word	0x0800a9b9
 800a9e4:	0800a9b9 	.word	0x0800a9b9
 800a9e8:	0800aa3d 	.word	0x0800aa3d
 800a9ec:	0800a9b9 	.word	0x0800a9b9
 800a9f0:	0800a9b9 	.word	0x0800a9b9
 800a9f4:	0800a9b9 	.word	0x0800a9b9
 800a9f8:	0800a9b9 	.word	0x0800a9b9
 800a9fc:	0800ab49 	.word	0x0800ab49
 800aa00:	0800aa6d 	.word	0x0800aa6d
 800aa04:	0800ab2b 	.word	0x0800ab2b
 800aa08:	0800a9b9 	.word	0x0800a9b9
 800aa0c:	0800a9b9 	.word	0x0800a9b9
 800aa10:	0800ab6b 	.word	0x0800ab6b
 800aa14:	0800a9b9 	.word	0x0800a9b9
 800aa18:	0800aa6d 	.word	0x0800aa6d
 800aa1c:	0800a9b9 	.word	0x0800a9b9
 800aa20:	0800a9b9 	.word	0x0800a9b9
 800aa24:	0800ab33 	.word	0x0800ab33
 800aa28:	680b      	ldr	r3, [r1, #0]
 800aa2a:	1d1a      	adds	r2, r3, #4
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	600a      	str	r2, [r1, #0]
 800aa30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e0a3      	b.n	800ab84 <_printf_i+0x1f4>
 800aa3c:	6825      	ldr	r5, [r4, #0]
 800aa3e:	6808      	ldr	r0, [r1, #0]
 800aa40:	062e      	lsls	r6, r5, #24
 800aa42:	f100 0304 	add.w	r3, r0, #4
 800aa46:	d50a      	bpl.n	800aa5e <_printf_i+0xce>
 800aa48:	6805      	ldr	r5, [r0, #0]
 800aa4a:	600b      	str	r3, [r1, #0]
 800aa4c:	2d00      	cmp	r5, #0
 800aa4e:	da03      	bge.n	800aa58 <_printf_i+0xc8>
 800aa50:	232d      	movs	r3, #45	; 0x2d
 800aa52:	426d      	negs	r5, r5
 800aa54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa58:	485e      	ldr	r0, [pc, #376]	; (800abd4 <_printf_i+0x244>)
 800aa5a:	230a      	movs	r3, #10
 800aa5c:	e019      	b.n	800aa92 <_printf_i+0x102>
 800aa5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aa62:	6805      	ldr	r5, [r0, #0]
 800aa64:	600b      	str	r3, [r1, #0]
 800aa66:	bf18      	it	ne
 800aa68:	b22d      	sxthne	r5, r5
 800aa6a:	e7ef      	b.n	800aa4c <_printf_i+0xbc>
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	6825      	ldr	r5, [r4, #0]
 800aa70:	1d18      	adds	r0, r3, #4
 800aa72:	6008      	str	r0, [r1, #0]
 800aa74:	0628      	lsls	r0, r5, #24
 800aa76:	d501      	bpl.n	800aa7c <_printf_i+0xec>
 800aa78:	681d      	ldr	r5, [r3, #0]
 800aa7a:	e002      	b.n	800aa82 <_printf_i+0xf2>
 800aa7c:	0669      	lsls	r1, r5, #25
 800aa7e:	d5fb      	bpl.n	800aa78 <_printf_i+0xe8>
 800aa80:	881d      	ldrh	r5, [r3, #0]
 800aa82:	4854      	ldr	r0, [pc, #336]	; (800abd4 <_printf_i+0x244>)
 800aa84:	2f6f      	cmp	r7, #111	; 0x6f
 800aa86:	bf0c      	ite	eq
 800aa88:	2308      	moveq	r3, #8
 800aa8a:	230a      	movne	r3, #10
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa92:	6866      	ldr	r6, [r4, #4]
 800aa94:	60a6      	str	r6, [r4, #8]
 800aa96:	2e00      	cmp	r6, #0
 800aa98:	bfa2      	ittt	ge
 800aa9a:	6821      	ldrge	r1, [r4, #0]
 800aa9c:	f021 0104 	bicge.w	r1, r1, #4
 800aaa0:	6021      	strge	r1, [r4, #0]
 800aaa2:	b90d      	cbnz	r5, 800aaa8 <_printf_i+0x118>
 800aaa4:	2e00      	cmp	r6, #0
 800aaa6:	d04d      	beq.n	800ab44 <_printf_i+0x1b4>
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaae:	fb03 5711 	mls	r7, r3, r1, r5
 800aab2:	5dc7      	ldrb	r7, [r0, r7]
 800aab4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aab8:	462f      	mov	r7, r5
 800aaba:	42bb      	cmp	r3, r7
 800aabc:	460d      	mov	r5, r1
 800aabe:	d9f4      	bls.n	800aaaa <_printf_i+0x11a>
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d10b      	bne.n	800aadc <_printf_i+0x14c>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	07df      	lsls	r7, r3, #31
 800aac8:	d508      	bpl.n	800aadc <_printf_i+0x14c>
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	6861      	ldr	r1, [r4, #4]
 800aace:	4299      	cmp	r1, r3
 800aad0:	bfde      	ittt	le
 800aad2:	2330      	movle	r3, #48	; 0x30
 800aad4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aad8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aadc:	1b92      	subs	r2, r2, r6
 800aade:	6122      	str	r2, [r4, #16]
 800aae0:	f8cd a000 	str.w	sl, [sp]
 800aae4:	464b      	mov	r3, r9
 800aae6:	aa03      	add	r2, sp, #12
 800aae8:	4621      	mov	r1, r4
 800aaea:	4640      	mov	r0, r8
 800aaec:	f7ff fee2 	bl	800a8b4 <_printf_common>
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	d14c      	bne.n	800ab8e <_printf_i+0x1fe>
 800aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf8:	b004      	add	sp, #16
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafe:	4835      	ldr	r0, [pc, #212]	; (800abd4 <_printf_i+0x244>)
 800ab00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	680e      	ldr	r6, [r1, #0]
 800ab08:	061f      	lsls	r7, r3, #24
 800ab0a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab0e:	600e      	str	r6, [r1, #0]
 800ab10:	d514      	bpl.n	800ab3c <_printf_i+0x1ac>
 800ab12:	07d9      	lsls	r1, r3, #31
 800ab14:	bf44      	itt	mi
 800ab16:	f043 0320 	orrmi.w	r3, r3, #32
 800ab1a:	6023      	strmi	r3, [r4, #0]
 800ab1c:	b91d      	cbnz	r5, 800ab26 <_printf_i+0x196>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	f023 0320 	bic.w	r3, r3, #32
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	2310      	movs	r3, #16
 800ab28:	e7b0      	b.n	800aa8c <_printf_i+0xfc>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	f043 0320 	orr.w	r3, r3, #32
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	2378      	movs	r3, #120	; 0x78
 800ab34:	4828      	ldr	r0, [pc, #160]	; (800abd8 <_printf_i+0x248>)
 800ab36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab3a:	e7e3      	b.n	800ab04 <_printf_i+0x174>
 800ab3c:	065e      	lsls	r6, r3, #25
 800ab3e:	bf48      	it	mi
 800ab40:	b2ad      	uxthmi	r5, r5
 800ab42:	e7e6      	b.n	800ab12 <_printf_i+0x182>
 800ab44:	4616      	mov	r6, r2
 800ab46:	e7bb      	b.n	800aac0 <_printf_i+0x130>
 800ab48:	680b      	ldr	r3, [r1, #0]
 800ab4a:	6826      	ldr	r6, [r4, #0]
 800ab4c:	6960      	ldr	r0, [r4, #20]
 800ab4e:	1d1d      	adds	r5, r3, #4
 800ab50:	600d      	str	r5, [r1, #0]
 800ab52:	0635      	lsls	r5, r6, #24
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	d501      	bpl.n	800ab5c <_printf_i+0x1cc>
 800ab58:	6018      	str	r0, [r3, #0]
 800ab5a:	e002      	b.n	800ab62 <_printf_i+0x1d2>
 800ab5c:	0671      	lsls	r1, r6, #25
 800ab5e:	d5fb      	bpl.n	800ab58 <_printf_i+0x1c8>
 800ab60:	8018      	strh	r0, [r3, #0]
 800ab62:	2300      	movs	r3, #0
 800ab64:	6123      	str	r3, [r4, #16]
 800ab66:	4616      	mov	r6, r2
 800ab68:	e7ba      	b.n	800aae0 <_printf_i+0x150>
 800ab6a:	680b      	ldr	r3, [r1, #0]
 800ab6c:	1d1a      	adds	r2, r3, #4
 800ab6e:	600a      	str	r2, [r1, #0]
 800ab70:	681e      	ldr	r6, [r3, #0]
 800ab72:	6862      	ldr	r2, [r4, #4]
 800ab74:	2100      	movs	r1, #0
 800ab76:	4630      	mov	r0, r6
 800ab78:	f7f5 fb32 	bl	80001e0 <memchr>
 800ab7c:	b108      	cbz	r0, 800ab82 <_printf_i+0x1f2>
 800ab7e:	1b80      	subs	r0, r0, r6
 800ab80:	6060      	str	r0, [r4, #4]
 800ab82:	6863      	ldr	r3, [r4, #4]
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	2300      	movs	r3, #0
 800ab88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab8c:	e7a8      	b.n	800aae0 <_printf_i+0x150>
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	4632      	mov	r2, r6
 800ab92:	4649      	mov	r1, r9
 800ab94:	4640      	mov	r0, r8
 800ab96:	47d0      	blx	sl
 800ab98:	3001      	adds	r0, #1
 800ab9a:	d0ab      	beq.n	800aaf4 <_printf_i+0x164>
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	079b      	lsls	r3, r3, #30
 800aba0:	d413      	bmi.n	800abca <_printf_i+0x23a>
 800aba2:	68e0      	ldr	r0, [r4, #12]
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	4298      	cmp	r0, r3
 800aba8:	bfb8      	it	lt
 800abaa:	4618      	movlt	r0, r3
 800abac:	e7a4      	b.n	800aaf8 <_printf_i+0x168>
 800abae:	2301      	movs	r3, #1
 800abb0:	4632      	mov	r2, r6
 800abb2:	4649      	mov	r1, r9
 800abb4:	4640      	mov	r0, r8
 800abb6:	47d0      	blx	sl
 800abb8:	3001      	adds	r0, #1
 800abba:	d09b      	beq.n	800aaf4 <_printf_i+0x164>
 800abbc:	3501      	adds	r5, #1
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	9903      	ldr	r1, [sp, #12]
 800abc2:	1a5b      	subs	r3, r3, r1
 800abc4:	42ab      	cmp	r3, r5
 800abc6:	dcf2      	bgt.n	800abae <_printf_i+0x21e>
 800abc8:	e7eb      	b.n	800aba2 <_printf_i+0x212>
 800abca:	2500      	movs	r5, #0
 800abcc:	f104 0619 	add.w	r6, r4, #25
 800abd0:	e7f5      	b.n	800abbe <_printf_i+0x22e>
 800abd2:	bf00      	nop
 800abd4:	0800aeb1 	.word	0x0800aeb1
 800abd8:	0800aec2 	.word	0x0800aec2

0800abdc <memmove>:
 800abdc:	4288      	cmp	r0, r1
 800abde:	b510      	push	{r4, lr}
 800abe0:	eb01 0402 	add.w	r4, r1, r2
 800abe4:	d902      	bls.n	800abec <memmove+0x10>
 800abe6:	4284      	cmp	r4, r0
 800abe8:	4623      	mov	r3, r4
 800abea:	d807      	bhi.n	800abfc <memmove+0x20>
 800abec:	1e43      	subs	r3, r0, #1
 800abee:	42a1      	cmp	r1, r4
 800abf0:	d008      	beq.n	800ac04 <memmove+0x28>
 800abf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abfa:	e7f8      	b.n	800abee <memmove+0x12>
 800abfc:	4402      	add	r2, r0
 800abfe:	4601      	mov	r1, r0
 800ac00:	428a      	cmp	r2, r1
 800ac02:	d100      	bne.n	800ac06 <memmove+0x2a>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0e:	e7f7      	b.n	800ac00 <memmove+0x24>

0800ac10 <_free_r>:
 800ac10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac12:	2900      	cmp	r1, #0
 800ac14:	d048      	beq.n	800aca8 <_free_r+0x98>
 800ac16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac1a:	9001      	str	r0, [sp, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac22:	bfb8      	it	lt
 800ac24:	18e4      	addlt	r4, r4, r3
 800ac26:	f000 f8d3 	bl	800add0 <__malloc_lock>
 800ac2a:	4a20      	ldr	r2, [pc, #128]	; (800acac <_free_r+0x9c>)
 800ac2c:	9801      	ldr	r0, [sp, #4]
 800ac2e:	6813      	ldr	r3, [r2, #0]
 800ac30:	4615      	mov	r5, r2
 800ac32:	b933      	cbnz	r3, 800ac42 <_free_r+0x32>
 800ac34:	6063      	str	r3, [r4, #4]
 800ac36:	6014      	str	r4, [r2, #0]
 800ac38:	b003      	add	sp, #12
 800ac3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac3e:	f000 b8cd 	b.w	800addc <__malloc_unlock>
 800ac42:	42a3      	cmp	r3, r4
 800ac44:	d90b      	bls.n	800ac5e <_free_r+0x4e>
 800ac46:	6821      	ldr	r1, [r4, #0]
 800ac48:	1862      	adds	r2, r4, r1
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	bf04      	itt	eq
 800ac4e:	681a      	ldreq	r2, [r3, #0]
 800ac50:	685b      	ldreq	r3, [r3, #4]
 800ac52:	6063      	str	r3, [r4, #4]
 800ac54:	bf04      	itt	eq
 800ac56:	1852      	addeq	r2, r2, r1
 800ac58:	6022      	streq	r2, [r4, #0]
 800ac5a:	602c      	str	r4, [r5, #0]
 800ac5c:	e7ec      	b.n	800ac38 <_free_r+0x28>
 800ac5e:	461a      	mov	r2, r3
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	b10b      	cbz	r3, 800ac68 <_free_r+0x58>
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	d9fa      	bls.n	800ac5e <_free_r+0x4e>
 800ac68:	6811      	ldr	r1, [r2, #0]
 800ac6a:	1855      	adds	r5, r2, r1
 800ac6c:	42a5      	cmp	r5, r4
 800ac6e:	d10b      	bne.n	800ac88 <_free_r+0x78>
 800ac70:	6824      	ldr	r4, [r4, #0]
 800ac72:	4421      	add	r1, r4
 800ac74:	1854      	adds	r4, r2, r1
 800ac76:	42a3      	cmp	r3, r4
 800ac78:	6011      	str	r1, [r2, #0]
 800ac7a:	d1dd      	bne.n	800ac38 <_free_r+0x28>
 800ac7c:	681c      	ldr	r4, [r3, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	6053      	str	r3, [r2, #4]
 800ac82:	4421      	add	r1, r4
 800ac84:	6011      	str	r1, [r2, #0]
 800ac86:	e7d7      	b.n	800ac38 <_free_r+0x28>
 800ac88:	d902      	bls.n	800ac90 <_free_r+0x80>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	6003      	str	r3, [r0, #0]
 800ac8e:	e7d3      	b.n	800ac38 <_free_r+0x28>
 800ac90:	6825      	ldr	r5, [r4, #0]
 800ac92:	1961      	adds	r1, r4, r5
 800ac94:	428b      	cmp	r3, r1
 800ac96:	bf04      	itt	eq
 800ac98:	6819      	ldreq	r1, [r3, #0]
 800ac9a:	685b      	ldreq	r3, [r3, #4]
 800ac9c:	6063      	str	r3, [r4, #4]
 800ac9e:	bf04      	itt	eq
 800aca0:	1949      	addeq	r1, r1, r5
 800aca2:	6021      	streq	r1, [r4, #0]
 800aca4:	6054      	str	r4, [r2, #4]
 800aca6:	e7c7      	b.n	800ac38 <_free_r+0x28>
 800aca8:	b003      	add	sp, #12
 800acaa:	bd30      	pop	{r4, r5, pc}
 800acac:	20012f68 	.word	0x20012f68

0800acb0 <_malloc_r>:
 800acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb2:	1ccd      	adds	r5, r1, #3
 800acb4:	f025 0503 	bic.w	r5, r5, #3
 800acb8:	3508      	adds	r5, #8
 800acba:	2d0c      	cmp	r5, #12
 800acbc:	bf38      	it	cc
 800acbe:	250c      	movcc	r5, #12
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	4606      	mov	r6, r0
 800acc4:	db01      	blt.n	800acca <_malloc_r+0x1a>
 800acc6:	42a9      	cmp	r1, r5
 800acc8:	d903      	bls.n	800acd2 <_malloc_r+0x22>
 800acca:	230c      	movs	r3, #12
 800accc:	6033      	str	r3, [r6, #0]
 800acce:	2000      	movs	r0, #0
 800acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd2:	f000 f87d 	bl	800add0 <__malloc_lock>
 800acd6:	4921      	ldr	r1, [pc, #132]	; (800ad5c <_malloc_r+0xac>)
 800acd8:	680a      	ldr	r2, [r1, #0]
 800acda:	4614      	mov	r4, r2
 800acdc:	b99c      	cbnz	r4, 800ad06 <_malloc_r+0x56>
 800acde:	4f20      	ldr	r7, [pc, #128]	; (800ad60 <_malloc_r+0xb0>)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	b923      	cbnz	r3, 800acee <_malloc_r+0x3e>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4630      	mov	r0, r6
 800ace8:	f000 f862 	bl	800adb0 <_sbrk_r>
 800acec:	6038      	str	r0, [r7, #0]
 800acee:	4629      	mov	r1, r5
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 f85d 	bl	800adb0 <_sbrk_r>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	d123      	bne.n	800ad42 <_malloc_r+0x92>
 800acfa:	230c      	movs	r3, #12
 800acfc:	6033      	str	r3, [r6, #0]
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 f86c 	bl	800addc <__malloc_unlock>
 800ad04:	e7e3      	b.n	800acce <_malloc_r+0x1e>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	1b5b      	subs	r3, r3, r5
 800ad0a:	d417      	bmi.n	800ad3c <_malloc_r+0x8c>
 800ad0c:	2b0b      	cmp	r3, #11
 800ad0e:	d903      	bls.n	800ad18 <_malloc_r+0x68>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	441c      	add	r4, r3
 800ad14:	6025      	str	r5, [r4, #0]
 800ad16:	e004      	b.n	800ad22 <_malloc_r+0x72>
 800ad18:	6863      	ldr	r3, [r4, #4]
 800ad1a:	42a2      	cmp	r2, r4
 800ad1c:	bf0c      	ite	eq
 800ad1e:	600b      	streq	r3, [r1, #0]
 800ad20:	6053      	strne	r3, [r2, #4]
 800ad22:	4630      	mov	r0, r6
 800ad24:	f000 f85a 	bl	800addc <__malloc_unlock>
 800ad28:	f104 000b 	add.w	r0, r4, #11
 800ad2c:	1d23      	adds	r3, r4, #4
 800ad2e:	f020 0007 	bic.w	r0, r0, #7
 800ad32:	1ac2      	subs	r2, r0, r3
 800ad34:	d0cc      	beq.n	800acd0 <_malloc_r+0x20>
 800ad36:	1a1b      	subs	r3, r3, r0
 800ad38:	50a3      	str	r3, [r4, r2]
 800ad3a:	e7c9      	b.n	800acd0 <_malloc_r+0x20>
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	6864      	ldr	r4, [r4, #4]
 800ad40:	e7cc      	b.n	800acdc <_malloc_r+0x2c>
 800ad42:	1cc4      	adds	r4, r0, #3
 800ad44:	f024 0403 	bic.w	r4, r4, #3
 800ad48:	42a0      	cmp	r0, r4
 800ad4a:	d0e3      	beq.n	800ad14 <_malloc_r+0x64>
 800ad4c:	1a21      	subs	r1, r4, r0
 800ad4e:	4630      	mov	r0, r6
 800ad50:	f000 f82e 	bl	800adb0 <_sbrk_r>
 800ad54:	3001      	adds	r0, #1
 800ad56:	d1dd      	bne.n	800ad14 <_malloc_r+0x64>
 800ad58:	e7cf      	b.n	800acfa <_malloc_r+0x4a>
 800ad5a:	bf00      	nop
 800ad5c:	20012f68 	.word	0x20012f68
 800ad60:	20012f6c 	.word	0x20012f6c

0800ad64 <_realloc_r>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	4607      	mov	r7, r0
 800ad68:	4614      	mov	r4, r2
 800ad6a:	460e      	mov	r6, r1
 800ad6c:	b921      	cbnz	r1, 800ad78 <_realloc_r+0x14>
 800ad6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ad72:	4611      	mov	r1, r2
 800ad74:	f7ff bf9c 	b.w	800acb0 <_malloc_r>
 800ad78:	b922      	cbnz	r2, 800ad84 <_realloc_r+0x20>
 800ad7a:	f7ff ff49 	bl	800ac10 <_free_r>
 800ad7e:	4625      	mov	r5, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad84:	f000 f830 	bl	800ade8 <_malloc_usable_size_r>
 800ad88:	42a0      	cmp	r0, r4
 800ad8a:	d20f      	bcs.n	800adac <_realloc_r+0x48>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ff8e 	bl	800acb0 <_malloc_r>
 800ad94:	4605      	mov	r5, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d0f2      	beq.n	800ad80 <_realloc_r+0x1c>
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4622      	mov	r2, r4
 800ad9e:	f7ff fbf7 	bl	800a590 <memcpy>
 800ada2:	4631      	mov	r1, r6
 800ada4:	4638      	mov	r0, r7
 800ada6:	f7ff ff33 	bl	800ac10 <_free_r>
 800adaa:	e7e9      	b.n	800ad80 <_realloc_r+0x1c>
 800adac:	4635      	mov	r5, r6
 800adae:	e7e7      	b.n	800ad80 <_realloc_r+0x1c>

0800adb0 <_sbrk_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d06      	ldr	r5, [pc, #24]	; (800adcc <_sbrk_r+0x1c>)
 800adb4:	2300      	movs	r3, #0
 800adb6:	4604      	mov	r4, r0
 800adb8:	4608      	mov	r0, r1
 800adba:	602b      	str	r3, [r5, #0]
 800adbc:	f7f6 f9b6 	bl	800112c <_sbrk>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	d102      	bne.n	800adca <_sbrk_r+0x1a>
 800adc4:	682b      	ldr	r3, [r5, #0]
 800adc6:	b103      	cbz	r3, 800adca <_sbrk_r+0x1a>
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	bd38      	pop	{r3, r4, r5, pc}
 800adcc:	200139b8 	.word	0x200139b8

0800add0 <__malloc_lock>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__malloc_lock+0x8>)
 800add2:	f000 b811 	b.w	800adf8 <__retarget_lock_acquire_recursive>
 800add6:	bf00      	nop
 800add8:	200139c0 	.word	0x200139c0

0800addc <__malloc_unlock>:
 800addc:	4801      	ldr	r0, [pc, #4]	; (800ade4 <__malloc_unlock+0x8>)
 800adde:	f000 b80c 	b.w	800adfa <__retarget_lock_release_recursive>
 800ade2:	bf00      	nop
 800ade4:	200139c0 	.word	0x200139c0

0800ade8 <_malloc_usable_size_r>:
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f18      	subs	r0, r3, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfbc      	itt	lt
 800adf2:	580b      	ldrlt	r3, [r1, r0]
 800adf4:	18c0      	addlt	r0, r0, r3
 800adf6:	4770      	bx	lr

0800adf8 <__retarget_lock_acquire_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_release_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <_init>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr

0800ae08 <_fini>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	bf00      	nop
 800ae0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0e:	bc08      	pop	{r3}
 800ae10:	469e      	mov	lr, r3
 800ae12:	4770      	bx	lr
